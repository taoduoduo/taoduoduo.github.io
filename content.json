{"meta":{"title":"从设计到实现","subtitle":"手把手教你做android应用开发","description":"my description","author":"安豆","url":"http://booktest.anddle.com"},"pages":[{"title":"从设计到实现","date":"2017-01-29T01:12:26.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"index/index.html","permalink":"http://booktest.anddle.com/index/index.html","excerpt":"","text":"@card{ 展现安卓开发的整个流程用生动的事例，向你展示了一个应用从创意到设计，再到开发，最后直至发布的全部过程。所有的技术要点贯穿于整个产品流程，让学习不再枯燥单调，让你印象深刻。 } @card{ 图文并貌的生动文档用通俗的文字结合生动的图片，讲述着产品开发的所有故事。制作了近千张图片和视频动画，目的只是为了让你能更好理解我想传达给你的每一个细节。 } @card{ 一站式获取开发资源文中所有使用到设计资源和开发图标，我都全部打包呈现。只要你想学并学好，我将为你做好充分的准备，帮助你迈出关键的第一步。 } @card{ 示例代码的参考除了照着文档从头到尾实现你的第一个安卓应用；也可以通过我托管到Github上的源码进行对比学习。掌握一项代码管理的工程技能，对你的帮助将十分巨大。 } @card{ 适合阅读本系列文章的人群 @column-2{ @card{ 大学生大学时光充满了活力、激情与好奇心，不幸的是对技术感兴趣却没有人带路。我保证只要你按照文档中讲到的内容一步一步照着做，一个月的时间定让你脱胎换骨。当其他同学对前路还一片迷茫的时候，你已经来到了充满了新奇与未知的全新领域。 } @card{ 开发者已经有经验的开发者也很适合这系列的文章。它将你的视野从眼前挪开，从设计者的角度看问题。为什么设计师要如此设计？为什么我开发的安卓代码是这个样子？问题的答案都放在本系列文章的各个角落当中。 } } @column-2{ @card{ 设计师界面设计师常常苦恼自己设计出来的作品永远停留在概念阶段：要么自己设计的太超前，不接地气；要么自己没有能力去实现它。我保证，设计师把本系列文章做完之后，一定会重新认识一遍设计的工作，将设计的能力延展到实践当中，更好的与别人合作。 } @card{ 产品经理优秀的产品经理除了要能提出一款出色产品概念，更需要能将它们变成现实的高瞻远瞩。要与聪明的设计师与开发者打交道，最好能理解他们的所思所想，站在他们的角度去看看产品。了解他们的最好办法，就是通过一个简单的案例，把大家的角色都模拟一遍。 } } } @card{ 交流方式 @column-2{ @card{ QQ群：348702074我们开通了这个QQ群，希望大家能够通过它互相讨论，在学习上互相帮助，取得更快的进步；也希望借此能得到大家对本系列文章的反馈，得到各位的呵护，让它茁壮成长。 } @card{ 订阅号：xxx我们开通了订阅号，每当有新文章发布之时，可以第一时间推送给大家。也希望喜欢本系列文章的同学们能够借助网络的力量，让更多的人知道它，利用它，学到各种知识。 } } } @card{ 成书计划等到本系列文章全部完成以后，我计划将它整理成书，提供给更多的希望了解安卓应用开发的读者学习和参考。希望大家能多多给予反馈，让它出生的时候尽可能的全面而完善。 @timeline{ 2017@item{ 6月计划整理文档成书。 } @item{ 5月计划发布软件发布相关的文章内容。 } @item{ 4月计划发布软件测试相关的文章内容。 } @item{ 3月计划发布软件开发相关的文章内容。 } @item{ 2月计划发布设计实践相关的文章内容。 } @item{ 1月发布设计理论相关的文章内容。 } } } @card{ 关于打赏如果您觉得本系列文章对您很有帮助，在可能的情况下，非常感谢您的鼓励。在您的资助下，我将进一步完善文档的内容，希望很快以其他方式回报于您！ @column-2{ @card{ 通过微信支持 } @card{ 通过支付宝支持 } } }"},{"title":"资源下载","date":"2017-01-30T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"resources/index.html","permalink":"http://booktest.anddle.com/resources/index.html","excerpt":"","text":"@card{ 资源下载 项目 下载地址 说明 Sketch素材 下载 提供天气预报界面会用到的各种矢量图 Sketch静态产品原型 下载 Sketch开发完成后的静态原型 Origami动态产品原型 下载 Origami开发完成后的动态可交互原型 安卓应用图标素材 下载 使用Android Studio开发时会使用到的各种图标 } @card{ 项目源码天气预报应用，已经托管到了GitHub上。使用GitHub可以学会如何对代码进行管理，能看到整个项目开发逐渐的演变过程。 点击这里。 } @card{ 设计工具 工具名称 下载地址 说明 Sketch 官方地址 云盘下载 只支持MacOS，付费软件，这里提供的是试用版 Origami 官方下载 云盘下载 只支持MacOS Sketch官方地址：这里Origami官方地址：这里 } @card{ Android StudioAndroid应用开发的官方集成开发环境。 版本号 Windows Mac Linux 2.2.2 官方下载 云盘下载 官方下载 云盘下载 官方下载 云盘下载 2.1.3 官方下载 云盘下载 官方下载 云盘下载 官方下载 云盘下载 1.5.1 官方下载 云盘下载 官方下载 云盘下载 官方下载 云盘下载 *Window下载包集成了Android Studio和Android SDK 官方地址：这里 } @card{ Oracle JDKAndroid Studio与Android SDK依赖的JAVA开发环境。 版本号 Windows 64bit Windows 32bit Mac Linux 64bit Linux 32bit JDK8 官方下载 云盘下载 官方下载 云盘下载 官方下载 云盘下载 官方下载 云盘下载 官方下载 云盘下载 官方地址：这里 }"},{"title":"categories","date":"2017-02-01T00:41:38.000Z","updated":"2017-02-04T09:04:19.000Z","comments":false,"path":"categories/index.html","permalink":"http://booktest.anddle.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-02-01T00:41:23.000Z","updated":"2017-02-04T09:04:19.000Z","comments":false,"path":"tags/index.html","permalink":"http://booktest.anddle.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"6 界面的整体布局","slug":"4_开发/6_界面的整体布局","date":"2017-01-23T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"4_开发/6_界面的整体布局/","link":"","permalink":"http://booktest.anddle.com/4_开发/6_界面的整体布局/","excerpt":"","text":"界面的整体布局从这一章节开始，我们终于可以开始使用Android Studio写代码了。 天气预报这个应用虽然功能很简单，但是对于从来没有接触过安卓开发的人来讲，开发完成还是需要很多步骤。为了减小学习的坡度，增加开发的阶段性成就感，我将天气预报分成2个阶段来开发， 暂时不考虑Material Design的各种限制，比如Appbar的滑动效果，界面的配色设置，字体的大小等等，先把功能实现了再说； ？？？配图简化后的效果图 加入Material Design的种种要求，完善天气预报； 我们就从第一阶段开始。 Activity与布局Activity几乎是每个应用必有的组件，所以任何安卓应用的开发几乎都是从Activity开始的。 你甚至可以简单的认为，手机屏幕上能看到的整个界面，就是一个Activity。 ？？？配图说明各种Activity 使用Android Studio创建工程后，会默认为我们创建一个Activity组件。它继承自Android SDK的Activity或其派生类。 123class MainActivity extends Activity &#123; ......&#125; Activity界面具体该长成什么样，是通过布局文件决定的。它位于项目的res\\layout\\activity_main.xml文件中。 这个布局文件通过java源代码MainActivity.java中的setContentView()函数，设置到界面上。 12345@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);&#125; 可以说xml布局文件，负责Activity的外观容貌；java源代码，负责Activity的逻辑控制。java控制着xml中的各个元素的显示逻辑。 接下来，我们天气预报界面的布局，就会在布局文件activity_main.xml中进行。 WeatherApp工程项目中的MainActicity继承自AppCompatActivity。AppCompatActivity也是Activity的子类，所以是没有问题的。这个AppCompatActivity作用是为了兼容各个版本的Android SDK而使用的，我们会在今后给出详细的介绍。 布局的划分整个布局被分成了三个部分： ？？？配图展示 Appbar：占据高度56dp； 天气详情：显示当日的温度范围和实时天气，占据高度300dp - 56dp = 244dp；按照最终的设计，天气详情是需要放在Appbar里面的，但是第1阶段做了简化，所以将它单独拿出来了； 天气预报：显示未来5日的天气预报，占据高度100dp； 分割线：占据高度10dp； 相关信息：当日天气的相关信息，占据所有剩余空间的高度； Appbar的存在是由系统决定的，我们就不做修改了，主要是分配2～5的布局空间。 Android SDK给我们提供了一个叫做LinearLayout的布局控件。它能够让存放于其中的其他控件按照首尾顺序，一个接一个的排队摆放。 通过将LinearLayout的android:orientation属性设置成vertical来将它包含的内容以竖直方式排列; 整个界面将尽可能占用整个屏幕，因此使用match_parent指定布局的宽度和高度。match_parent说明尺寸要尽可能的大。","categories":[{"name":"第4章 开发","slug":"第4章-开发","permalink":"http://booktest.anddle.com/categories/第4章-开发/"}],"tags":[]},{"title":"5 资源的导入","slug":"4_开发/5_资源的导入","date":"2017-01-22T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"4_开发/5_资源的导入/","link":"","permalink":"http://booktest.anddle.com/4_开发/5_资源的导入/","excerpt":"","text":"资源的导入在前面讲解产品原型设计的章节中，我们已经创建出了各种开发时需要使用的各种图标了，包括应用图标、系统图标等等。 图标导入现在，我们先把开发过程中要使用到的图片资源添加到Android Studio工程目录当中。 将Sketch创建的静态高保真原型中的图标，根据导出的尺寸，将它们分类整理到对应的文件夹当中， | 文件夹 | 图片放大倍数 | | — | :-: | | mipmap-mdpi | x 1 | | mipmap-hdpi | x 1.5 | | mipmap-xhdpi | x 2 | | mipmap-xxhdpi | x 3 | | mipmap-xxxhdpi | x 4 | 打开天气预报所在的Android Studio的工程文件夹-app -&gt; src -&gt; main -&gt; res，将图片替换到对应的mipmap目录当中； 重新部署应用到设备上，桌面上的天气预报应用图标，已经从以前的安卓机器人，变成了新的图标了， 图片的使用对于那些导入的图片资源，Android Studio会做进一步处理，自动生成一个R.java文件，文件中给每一张图片生成一个对应的id值。 12345678910111213141516171819202122232425public final class R &#123; public static final class mipmap &#123; public static final int ic_air_quality=0x7f030000; public static final int ic_cloudy_l=0x7f030001; public static final int ic_cloudy_s=0x7f030002; public static final int ic_fog_l=0x7f030003; public static final int ic_fog_s=0x7f030004; public static final int ic_humidity_level=0x7f030005; public static final int ic_launcher=0x7f030006; public static final int ic_rainy_l=0x7f030007; public static final int ic_rainy_s=0x7f030008; public static final int ic_snow_l=0x7f030009; public static final int ic_snow_s=0x7f03000a; public static final int ic_sport_level=0x7f03000b; public static final int ic_sunny_cloudy_l=0x7f03000c; public static final int ic_sunny_cloudy_s=0x7f03000d; public static final int ic_sunny_l=0x7f03000e; public static final int ic_sunny_s=0x7f03000f; public static final int ic_ultraviolet_level=0x7f030010; public static final int ic_wind_direction=0x7f030011; public static final int ic_wind_level=0x7f030012; &#125;&#125; 当我们要使用对应资源的时候，直接使用java代码： 1int id = R.mipmap.ic_launcher; 就可以了。 通过这种方式，完成了资源到代码的转换。 资源的条件命名法图片资源文件夹的命名方式很有特点，在主名字之后，使用-间隔了一些扩展名字。例如， mipmap-hdpi mipmap-xhdpi 目录名用“－”增加了限制条件。也就是给目录里资源的使用增加了约束。 这里用mipmap-hdpi文件夹举例说明：如果当前的设备属于hdpi类型的屏幕，那么在使用图片的时候，系统优先使用其中的图片。 除了上面的目录结构，有时你还会看到如下的目录形式： mipmap-hdpi：给属于hdpi的设备使用; values-zh：给当前语言是中文的系统使用; layout-land：给处于横屏状态的系统使用; 图片的优化屏幕密度选择性匹配并不是说一定要为所有的屏幕密度做对应图片尺寸的匹配，因为如果做全部匹配会让程序的体积快速增大。 大多数时候，我们会选择先做高清晰度的尺寸，例如xxhdpi。其他屏幕密度的设备需要使用资源时，就会把xxhdpi中的资源，做适度的缩放，以达到匹配的效果。 ？？？配图说明不是所有都做匹配 对于个别系统缩放也达不到显示要求的图片，才做针对不同屏幕密度的配套图片。 我们的天气预报把所有尺寸的屏幕密度都做了适配。 矢量图标另外，对于很多系统图标，我们也可以不使用png图片，而采用矢量图，让安卓系统绘制图标。这样一来，程序的体积可以跟小，显示效果也更为出众。 不过大家初次接触安卓开发，为了减少不必要的枝节，我就隐去了这部分内容，将来再和大家详细的讲述。","categories":[{"name":"第4章 开发","slug":"第4章-开发","permalink":"http://booktest.anddle.com/categories/第4章-开发/"}],"tags":[]},{"title":"4 版本管理","slug":"4_开发/4_版本管理","date":"2017-01-21T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"4_开发/4_版本管理/","link":"","permalink":"http://booktest.anddle.com/4_开发/4_版本管理/","excerpt":"","text":"版本管理前面已经提到了，非常有必要对开发的代码进行管理。那么进行版本管理到底什么时候使用呢？ 我总结了使用版本管理的主要场景，有以下3种： 对于个人开发者，版本管理能记录开发的变迁。它记录了所有文档的修改记录，就好比玩游戏时，我们都会时刻存档，就怕哪一次不小心，控制的角色挂了；假如不存档，出了问题，必须得从新开始。 如果使用了版本管理，就可以随时保存文档修改的进度。一旦文档任何时候出现了问题，或者希望快速还原到之前某个特定的状态，都可以很容易的切换过去。省去了程序员不少麻烦，毕竟谁也记不清哪年哪月哪日我添加了一段什么代码，目的是什么，而正是这段代码引起了bug，搞得我现在大脑崩溃。 当多个程序员开发同一个项目的时候，版本管理工具能很好的协调彼此的工作，让大家开发的代码不会冲突、互相干扰，即使出现了问题，也能很快找到原因。 比如程序员A在他的开发代码中修改了work.java中第15行的内容，同时程序员B在他的开发代码中修改了work.java中第20行的内容。两人把修改提交保存的时候，版本管理工具，会把两人的修改合并起来。 如果程序员A在他的开发代码中修改了work.java中第15行的内容，同时程序员B在他的开发代码中也修改了work.java中第15行的内容。两人把修改的内容提交保存的时候，版本管理工具，会发现两人的修改冲突，告诉A和B，让他们两协商解决问题。 文档的修改积累到一定程度，比如说完成了设计的所有内容，就可以设置一个大的节点。后继的开发可以分成两支：一支继续添加新的功能；一支修复现有程序的bug。 管理的工具为了满足前面提到使用场景，在软件开发的不同历史阶段，出现了不同的版本管理工具：从CVS，到SVN，再到现在使用最广泛的Git。 早期的版本控制软件存在的各种缺点，都被后来的代替者解决了。在安卓的开发中，基本上都在使用Git作为版本控制工具。 Git是Linux之父Linus Torvalds亲自开发的工具，有着高效的管理能力。它最为基本的运作思路大致如下： 仓库Repository是一个Git项目的容器，里面存放着文档（包括代码）、以及各个文档的历史修改信息； 仓库Repository可以存在于网络端，也可以存在于本地电脑当中； 仓库有两种获取的方式，一个是clone网络端已有的；一个是在本地电脑上自行创建，再通过网络提供给别人访问； 假如对本地的仓库内容进行了修改，要保存修改进度的时候， 要先将这些修改放到stage当中， 然后提交-commit到本地的仓库中，此时会产生一个全局唯一识别码-Commit ID，就像f27af79； 将commit后的内容推送push到网络端，而这个Commit ID就代表你这次提交的唯一标记； 假如推送的时候，自己修改的代码和仓库中的代码出现了冲突Conflit（因为修改了同一处的代码导致），那么推送者就需要查看代码、找到修改这段代码的提交者商量修改方案，解决冲突； 其他开发者假如clone了这个仓库，就能看到Commit后的各种修改，并通过拉取pull的操作从网络端把更新同步到自己本地的代码当中； 假如同步代码的过程中，自己的代码和别人的修改发生了冲突Conflit，那么拉取者就需要查看代码、找到修改这段代码的提交者商量修改方案，解决冲突； 除此之外，Git还拥有软件工程方面的实用技巧，例如创建开发分支Branch，给代码打标签Tag。 更加详细的内容，可以参考这里。里面还列举出了各个平台下可以选择的图形化工具。 Github的使用Github几乎是全世界程序员都知道的项目托管平台，我们可以把代码放在这个平台上。整个项目的托管就是基于Git的原理实现的。 Github在Git管理中充当着网络端的功能，扮演中心服务器的角色，让我们可以随时更新代码、提交代码，分享代码。 而Android Studio具有对Github平台的原生支持，让我们在开发的时候能够无缝的加入对软件版本控制的管理功能。 Github的注册打开Github的官网，按照指示很容易的注册一个账号。 登陆账号后，可以看到你现在具有的仓库-Repository， 我之前已经创建过几个免费仓库了，所以列表里会将它们呈现出来。如果是新注册的账号，这里应该是空的。 Android Studio的配置现在我们来把之前创建的天气预报工程，托管到Github上： 启动工具栏的VCS -&gt; Import into Version Control -&gt; Share Project on Github； 在弹出的窗口中，根据提示输入Github上的账户名和密码； 输入项目的名称WeatherApp和项目描述，选择Share； 确认要添加到管理中的文件（代码、配置、资源等文件），并给这次提交添加描述信息； 刷新Github上的个人主页，可以看到新添加的项目仓库WeatherApp已经出现在那里了， 此时看看Android Studio的Version Control窗口，就能看到当前的代码管理情况， Android Studio的Git管理提交与推送入库Git版本管理有很多用法，这里我们先介绍两个最常使用的功能commit与push。 假如我们修改了WeatherApp的MainActivity.java， LocalChanges选项卡会将当前发生了变化的、被版本管理记录的文件列出来， 点击提交commit按钮，会将修改过的文件放入stage状态， 并展示当前要提交commit文件的状态，让我们再次确认， 检查无误后，选择提交并推送入库-Commit and Push， 假如没有冲突发生，就能看到提交成功，版本控制增加新的节点， Github上项目对应的代码页，也会更新， 其他Android Studio还提供了创建分支Branch、创建标签Tag、以及在不同节点上来回切换的功能，这里就不详细描述了。 因为这些内容如果没有实际的例子，讲起来会很枯燥。我会在开发的过程中根据需要穿插进响应的内容，这样大家理解起来就会非常的方便了。","categories":[{"name":"第4章 开发","slug":"第4章-开发","permalink":"http://booktest.anddle.com/categories/第4章-开发/"}],"tags":[]},{"title":"3 应用的创建与部署","slug":"4_开发/3_应用的创建与部署","date":"2017-01-20T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"4_开发/3_应用的创建与部署/","link":"","permalink":"http://booktest.anddle.com/4_开发/3_应用的创建与部署/","excerpt":"","text":"应用的创建与部署现在我们开始创建一个全新的项目工程-天气预报，并在编译后让它运行到真实的设备上。 创建应用工程运行Android Studio， 启动Android Studio，选择Start a new Android Projcet； 在Application name栏，为应用取个名字为WeatherApp； 在Company Domain栏，按照网址的形式填上anddle.com－－当然，你也可以根据自己的喜好填上别的域名； 在Project location栏，填写应用存放的位置，可以选择任意你希望存放项目工程的目录。 在下一步中，勾选上Phone and Tablet； Minimum SDK的选择，要与调试设备的安卓版本尽量一致，我们这里至少要是Android 5.0以上， *手机版本与API等级的对应关系如下： 下一步后，选择Empty Activity， 选择下一步后，开始设置Activity相关的信息； 在Activity Name栏，Activity采用默认的名字MainActivity； 在Layout Name栏，layout文件也采用默认的名字activity_main； 勾选上Backwards Compatiblility； Activity代表一个应用的主界面；而Activity具体长什么样子，就是靠布局文件Layout来指定的，二者是互相关联的关系。 Activity与Layout将在后面做详细的介绍。 选择完成后，工程也就创建完成， *因为Android Studio是第一次创建项目工程，因此需要连接网络下载一些组件，需要多等待一些时间。一旦下载成功，以后创建工程就不会花费这些时间了。 AS界面初步Android studio是Google为Android应用开发提供的一个强大的集成开发环境（IDE），有着非常多的帮助开发者进行开发的工具。 虽然Android应用也可以使用Eclipse开发，但是Android Studio将是Google未来唯一长期支持的开发工具。 Android Studio启动并打开工程后它的默认布局大体如下： 这些布局并不是一成不变的，我们可以通过拖动它们，调整它们的位置和大小，可以隐藏一些区域，在需要这些区域的时候再显示它们。 工程目录浏览当前的项目工程是最经常遇到的，Android Studio提供了多种对项目查看的方式， 它们从不同的角度来展示一个工程的方方面面。大家可以切换看看，不同的效果。 Project浏览方式当选择Project浏览方式的时候，它就像资源管理器的树形结构展开。所以当你希望看看磁盘上实实在在存在的关于这个项目的文件夹和目录的时候，就可以使用Projcect浏览方式， app文件夹：这是工程产生后，Android Studio自动创建的module所在文件夹。 Module是Android Studio工程中的一个功能单位。我们应用程序的源码和资源文件就放在这个module当中。 目前来说，我们需要使用到并修改到的内容，都在这个文件夹里面。其它的可以暂时不管。 src文件夹里面有三个子文件夹：androidTest、test和main。androidTest和test从名字就知道，里面放的是和测试我们程序相关的内容。目前我们将重点放到介绍开发上，测试的内容以后再讲。 main文件夹分了java和res两支，java存放的是java源代码，res存放的是资源文件。 main文件夹下面的AndroidManifest.xml文件是当前安卓应用自己的配置文件，我们将在开发过程当中重点详细的介绍。 Android浏览方式这是安卓安卓程序的逻辑功能划分的浏览方式，将配置文件（manifest文件）、代码（java文件）、资源（图片、字符串、布局文件等等）分类存放，显得非常整洁， 刚开始，我们就使用Project和Android两种浏览方式吧。随着经验的增加，会逐步发现其他浏览模式的方便之处。 UI所见即所得通过Android浏览方式，打开res -&gt; layout-&gt; activity_main.xml，会出现对应的设备上的预览效果， 当选择不同的预览设备时，预览界面会根据不同的设备做相应的变化。这个功能在做多尺寸设备的界面布局设计时非常有用。 暗黑主题在Android Studio中，还有一个我们程序员非常喜欢使用的暗黑主题， 启动设置，选择Appearance -&gt; Theme; Theme切换成Darcula就可以了; 是不是很酷呢？ 其他Android Studio还有很多实用的功能，比如资源引用的实时预览、代码自动补完、代码版本管理、各种快捷按键方式。很多内容需要大家自己去揣摩。 在后继的开发当中，我将会穿插人更多实用的特性介绍。 部署应用项目创建成功后，我们需要把它生编译成Apk，然后部署到设备上运行。 这需要手机和电脑两方面的配合。 设置要进行真实设备上的调试，需要修改手机上的原始设置。 默认情况下，设备端的调试模式是被关闭的，我们需要在设备的设置中，将这个功能打开。虽然各种品牌的手机不同，但是它们的设置菜单中都会有一个开发者选项。 我们首先要找到开发者选项。在Google Nexus设备上这个选项是被隐藏的， 需要进入到设置-&gt;关于手机； 连续点击“版本号”，将隐藏的开发者模式打开， 启用开发者模式后，打开“USB调试”功能， 之后将手机和电脑用USB数据线连接起来。 如果连接的是MacOS系统，手机就能直接被识别了；如果这是在Windows系统中，还要为连接上的设备安装ADB驱动。 在“我的电脑”上点鼠标右键，选择“管理”，打开设备管理器，可以看到没有安装驱动的设备， 为它更新驱动，选择“浏览计算机查找”， 驱动存放在Android SDK所在目录的extras\\google\\usb_driver下面， 点击确定后，驱动很快就安装成功了. 此时我们点击Android Studio的Android Monitor窗口，就能看到这个连接上的设备了，这个窗口还输出了手机端打印的运行信息。 部署现在开始部署应用到设备上运行， 点击工具栏上方绿色的小三角或者虫子背景的绿色小三角，程序就开始编译并准备部署到我们的设备上了， 绿色的小三角的含义是：以非调试状态运行程序；虫子背景的绿色小三角的含义是：以调试状态运行程序； 让我选择要部署的设备，我们在选定的设备上双击， 此时可以在设备上看到，我们的应用程序运行起来了。","categories":[{"name":"第4章 开发","slug":"第4章-开发","permalink":"http://booktest.anddle.com/categories/第4章-开发/"}],"tags":[]},{"title":"2 开发环境搭建","slug":"4_开发/2_开发环境搭建","date":"2017-01-19T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"4_开发/2_开发环境搭建/","link":"","permalink":"http://booktest.anddle.com/4_开发/2_开发环境搭建/","excerpt":"","text":"开发环境搭建开发安卓应用可以在Window系统 MacOS系统 Linux系统上进行。但并不是说打开一个写字板就可以了，它还需要编译器等开发工具的配合。所以在正式开发之前，需要搭建开发的环境，我们需要给开发平台（Window系统 MacOS系统 Linux系统）安装上： JDK（Java Development kit）：Java开发工具包，因为安卓使用java开发，而且安卓应用开发的其它部分工具也依赖于java开发环境，所以必须安装JDK； Android SDK（Android Development kit）：谷歌提供的安卓应用开发工具包。 Android Studio：谷歌提供的安卓开发环境。 不同的平台搭建开发环境的过程几乎相同。我将介绍如何在Windows系统 MacOS系统上进行开发环境的搭建。 安装JDKJDK可以通过官方网站下载。 下载时，请根据操作系统的种类和位数进行选择。 下载到本地后，双击安装包进行安装。 如果使用MacOS系统，可以安装XCode。XCode在安装过程中，已经完成了对JDK的安装。所以使用MacOS开发会显得非常的方便：只需要安装一个XCode，其他很多开发工具就都有了（其他程序的开发环境也是类似）。所以我强烈的推荐你，今后有了资金，一定要选Macbook。 验证JDK安装是否成功的方式，在不同平台下稍有不同。 Windows验证安装完成后， 通过Win+R启动Windows操作系统的运行面板； 在面板中输入cmd，启动命令行窗口； 在命令行窗口中，输入java -version; 如果此时能看到类似以下的内容，就说明JDK安装成功了。 123C:\\Users\\XXX&gt;java -versionjava version \"1.8.0_66\" Java(TM) SE Runtime Environment (build 1.8.0_66-b18)Java HotSpot(TM) 64-Bit Server VM (build 25.66-b18, mixed mode) MacOS验证安装完成后， 启动terminal命令行窗口； 在窗口中输入java -version； 如果此时能看到类似以下的内容，就说明JDK安装成功了。1234GymdeMacBook-Pro-7:~ Gym$ java -versionjava version \"1.8.0_65\"Java(TM) SE Runtime Environment (build 1.8.0_65-b17)Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode) 安装Android Studio感谢Google中文开发网站的上线，让我们可以很方便的下载到Android Studio，以及它集成的Android SDK了。 针对不同的平台，官方网站提供了不同的下载包， 平台 Android Studio 安装包 Windows android-studio-bundle-145.3537739-windows.exe MacOS android-studio-ide-145.3537739-mac.dmg Linux android-studio-ide-145.3537739-linux.zip 下载完成后，双击安装包进行安装。 注意： 整个安装过程在官网的安装指南上，有详细的介绍，大家可以移步此处； 在Windows系统上搭建开发环境更加方便，谷歌将Android SDK和Android Studio打包在一起提供我们下载； 安装Android SDK从现在开始各个平台下的Android Studio操作都几乎完全一样了。 对于Windows系统，因为安装包已经集成了Android SDK，所以不用再去单独下载了。对于没有集成Android SDK的Android Studio还有后续的工作要做。 启动Android Studio之后，会提示我们安装Android SDK。 也可以通过Android Studio的设置功能，启动设置选项，切换到Android SDK选项卡，将列出当前已经安装或者可以安装的Android SDK组件， 选择Launch Standalone SDK Manager，启动SDK manager， 勾选上， Tools中的Android SDK Tools Android SDK Platform-tools和Android SDK Build-tools最新版本； Android X.X.X中的SDK和参考源码，例如，Android 7.1.1的SDK Platform（必选），Sources for Android SDK（可选，便于查看SDK中的源码）； Extras中的Android Support Repository，其他的可以不选； 如果是Windows系统，为了避免电脑不能识别连接上的安卓设备，可以多勾选一个USB driver。 选择Install packages之后，SDK Manager将自动下载。完成之后， 整个Android SDK也就安装完毕了。 安卓的中文开发官网上，有更多的详细的介绍。遇到任何问题，都可以来这里查看官方的文档。","categories":[{"name":"第4章 开发","slug":"第4章-开发","permalink":"http://booktest.anddle.com/categories/第4章-开发/"}],"tags":[]},{"title":"1 开发产品","slug":"4_开发/1_开发产品","date":"2017-01-18T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"4_开发/1_开发产品/","link":"","permalink":"http://booktest.anddle.com/4_开发/1_开发产品/","excerpt":"","text":"开发产品当开发者拿到设计师提供的原型（静态或者动态）和资源后，也并不是就可以开始写代码了。 开发阶段通常还会包含以下几个部分： 1功能验证 -&gt; 设计文档 -&gt; 编写代码 -&gt; 测试 -&gt; 产品发布 -&gt; 产品升级 在整个开发的过程期间，还需要对各种文档、代码、资源进行管理，引入版本控制的概念。 功能验证如果产品的功能很复杂，开发者在正式开始编码前，还得做一番功能的验证。也就是， 在创意阶段确定功能点的那些验证功能可行性的工作； 设计师设计的界面逻辑合理性验证； 设计师的设计要落地，并不是天马行空，而是要和开发者的实际情况匹配才行。 开发并不是只有编码的工作，这是一个系统的工程，还包括了各种写作设计文档和代码的管理技巧。 设计文档写文档也是开发者重要的工作，你不能保证将来永远自己来维护自己写的代码，所以要把自己的设计思路用文字、图表的形式记录下来，便于后继者能够理解。 根据开发阶段的不同，产出文档的内容也不同；而且不同的公司或团队，也有不同的要求。撰写开发文档，是一个很具有弹性的工作，如果身在一个以快为核心价值的小团队（2-3个人），也许就不会把大把的时间花在这上面；如果是一个拥有几十人的大团体，或者是以严谨闻名的日本开发者，一定会把程序设计的方方面面都体现到设计文档当中。 国内的大多数程序员都是思维超前的物种，不大会拘泥于每天写文档这样“小节”，对文档的态度大都是能拖就拖，能不写就不写。程序员的精力太宝贵了，总希望把它们投入到更多的新功能的开发当中。所以写文档成了程序员们最头痛的事情了–不是不会，而是没有兴趣。 要解决这个问题，除了强制要求，似乎也没有特别有效的办法:( 在开发我们的天气预报时，我简化了文档方面的要求，没有使用专业的设计文档。大家可以将本文就作为天气预报的设计文档-因为只要把这篇文档从头到尾看一遍，你就一定能设计出这个应用-这也正是各种设计文档存在的终极意义。 版本控制和写小说一样，内容可能会经历反复的修改，一段代码加入之前，程序运行的很好，但是加入之后却发生了意外，不得不回到修改前的状态。退回到以前的状态，通常会非常的繁琐，程序员必须的记住每一个修改的细节。 如果采用了版本控制的技术，退回到之前的修改将是一件非常容易的事情，只需要一个按键即可。除了代码、任何文档的修改都可以用版本控制软件来管理。例如我现在正在敲下这篇文档以及这一系列文档将组合成的书，都是在版本控制软件-Git的帮助下完成了。 其他测试、产品发布、升级看起来比较简单，但都是一门可以很深入的学问，我们将为它们开辟单独的大章节来讲述。 进行安卓软件开发我们还需要准备3样东西， 一台安装了Windows系统或者MacOS系统的电脑（Linux系统也可以，不过我在后面的章节中不会单独的讲如何搭建Linux系统下的开发环境）； 一台安卓5.0及其以上的手机设备：我们这里的安卓开发是基于Material Design的，而它是在安卓5.0的系统上推出的。所以对安卓系统提出了版本上的要求。目前市场上绝大多数的主流手机已经过渡到了安卓5.0之上了。如果你的设备还很古老，是不是可以考虑稍微与时俱进一点了呢？ 我将使用一台标准的安卓设备Google Nexus 5作为调试用的真机。 开发程序的时候也可以使用模拟器来代替真机。不过我到建议能用真机是最合适的，运行速度快、对电脑的配置也没有要求，更能够省去使用模拟器可能遇到的各种状况。 一根连接手机与开发电脑的数据线：数据线通常使用的是micro USB接口，它几乎成了安卓手机的标配。不过越来越多的手机开始引入了USB type-C接口了。这根数据线都不需要单独去购买。买手机的时候，商家会把这样的数据线作为标配提供的。","categories":[{"name":"第4章 开发","slug":"第4章-开发","permalink":"http://booktest.anddle.com/categories/第4章-开发/"}],"tags":[]},{"title":"5 资源的创建","slug":"3_产品原型/5_资源的创建","date":"2017-01-17T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"3_产品原型/5_资源的创建/","link":"","permalink":"http://booktest.anddle.com/3_产品原型/5_资源的创建/","excerpt":"","text":"资源的创建界面原型已经设计完成了。不过离最后交付给开发人员开发还差一步：产品中使用的图片还没有准备好呢？ 设计师除了产品原型还要交付哪些资源呢？开发者最关心的资源就是应用中会使用到的各种图标资源和配色方案。 在天气预报应用当中，我们已经确定好了界面的主要颜色， 颜色项目 颜色名称 颜色RGB值 Primary Color Indigo 500 #3F51B5 Primary Dark Color Indigo 700 #303F9F Accent Color Amber 500 #FFC107 现在就剩下各种图标了。这些图标包括了， 系统图标：显示更多信息时使用到的， 天气图标：包括使用到的小图标， 使用到的大图标， 应用图标：应用的主图标，放在启动界面使用的图标， 图标的尺寸不同使用场景的图标，尺寸是不同，前面的章节中我们已经讲述了系统图标 应用图标的标准尺寸。 根据屏幕像素密度的不同，需要设计对应大小的图标。这样一来，就能够确保在特定类型的密度屏幕上，图标能够显示的清晰。 像素密度类型 像素密度大小 与Baseline比值 mdpi 160 1 hdpi 240 1.5 xhdpi 320 2 xxhpi 480 3 xxxhpi 640 4 安卓使用dpi为160的数值作为一个基准－－baseline。 为了达到最优秀的显示效果，我们最理想的情况下是为每个不同的屏幕类型设计对应的图标。不过实际情况中却并不一定需要对应每个尺寸，因为 如果涉及的图标很多，各种类型的图标都做全部的配套设计一定会增加应用的体积； 假如缺少某个屏幕类型（例如mdpi）的图标a时，系统会去寻找a对应的高分辨率图标A，把A转化成合适的尺寸（a与A都是同一个图标的不同尺寸版本，a尺寸小，A尺寸大）。这里唯一的代价是：在使用图标时，系统需要自动做额外的尺寸转化； 系统图标系统图标的大小是24dp*24dp，对于mdpi的屏幕，我们就需要截取24px*24px大小的图标。 Sketch导出如果使用Sketch开发出了静态原型，那么从里面抓取系统图标就非常的方便了， 点击工具栏上的insert -&gt; S（或者按快捷键S）， 用小刀在要截取图标的位置切片，并将切出的片子，重新命名成ic_wind_level, 可以看到右上方的尺寸栏显示的是24/*24的大小，设置区域下方的截取效果图也呈现了出来。 接下来就是导出图片了， 选中ic_wind_level，点击Export旁的按钮，以此添加1x 2x 3x 1.5x 4x，给要导出的图片设置导出后的放大倍率。1x表示1:1导出，2x表示放大2倍导出， 导出的格式都设置成PNG格式的图片。这种图片是安卓系统标准支持的图片格式，能够携带透明的信息。 不要勾选背景颜色，让整个图片除了图案以外，都呈透明的状态；选择Export ic_wind_level， 导出结果如下， 像素密度类型 与Baseline比值 实际像素 mdpi 1 24px hdpi 1.5 36px xhdpi 2 48px xxhpi 3 72px xxxhpi 4 96px 其他图标的导出和产生这个图标的方式类似。 第三方工具导出如果不使用Sketch也可以通过其他工具生成图标。例如Android Studio Asset的Generic icons功能。 通过IMAGE方式，将事先准备好的风力.svg矢量图，加载到工具当中； Size选择20dp，Padding选择2dp，这样最后的图标就是24pd*24dp的了； Color选择成黑色，透明度为54%； 点击DOWNLOAD .ZIP; 下载解压后，得到了对应的图标资源， 其他图标的产生和产生这个图标的方式类似。 天气图标天气图标的导出与系统图标的导出几乎完全一样，只是尺寸和颜色稍有不同。 在导出的时候要注意天气图标有两种不同的大小，一种使用到Weather details上面，显示大的天气图标；另一种使用到forcast当中，显示小的天气图标。 图标类型 宽度 高度 大图标 120dp 100dp 小图标 30dp 30dp 两种图标都可以通过Sketch切图得到，也可以通过Android Asset Studio来生成。 应用图标应用图标也可以通过Sketch创建，不过我这里就简化了这方面的设计，直接使用Android Asset Studio的Launcher icons，创建应用图标， 通过IMAGE方式，将事先准备好的应用启动图标.svg矢量图，加载到工具当中； Padding选择45%，调整到合适的比例就行； Color选择成白色，透明度为100%； Shape选择成SQUARE正方形； Background选择成Primary Color-#3F51B5 点击DOWNLOAD .ZIP; 下载解压后，得到了对应的图标资源， 至此，图片资源的导出就完成了。","categories":[{"name":"第3章 产品原型","slug":"第3章-产品原型","permalink":"http://booktest.anddle.com/categories/第3章-产品原型/"}],"tags":[]},{"title":"4 动态原型设计","slug":"3_产品原型/4_动态原型设计","date":"2017-01-16T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"3_产品原型/4_动态原型设计/","link":"","permalink":"http://booktest.anddle.com/3_产品原型/4_动态原型设计/","excerpt":"","text":"动态原型设计动态的可交互原型产品，是产品经理和界面设计师向开发人员阐释自己设计的最高效工具。 开发者不需要猜测设计师要什么样的效果，照着原型产品做就好了。 很多创业团队也发现了产品人的这个刚需，做出了诸如Principle、Axure这类著名的原型设计产品。 Facebook似乎也深谙此道，专门为安卓和iOS系统开发很有针对性的交互原型设计工具-Origami Studio。 这是一个免费的工具，而且也能和Sketch互通，所以我选择了它来向大家讲解互动原型的设计。 界面介绍启动Origami Studio后，可以看到类似如下界面， 悬浮在外的区域是虚拟手机屏幕。用户可以通过点击、拖动来模拟各种屏幕操作; 底部的暗色区域是工作区域。用来设置用户操作屏幕后，界面元素的各种响应方式； 右边的亮色区域是界面组件区域。展示了组成界面的各个元素，里面的布局方式，通过虚拟屏幕实时展示了出来； 点击虚拟屏幕右上方的摄像机按钮，可以将屏幕上的内容录制下来， 创建屏幕界面对于新创建的项目，整个工程都是空的， 我们可以通过菜单栏的+，为界面添加各种组件， 也可以直接将Sketch中的图形，通过复制粘贴的方式，直接添加到组件区域。 通过Phone -&gt; Nexus 5将虚拟设备的屏幕，设置成Nexus 5- 安卓设备； 将组件区域中Color Fill的背景色修改成白色， 然后，打开上一章节中Sketch设计的静态高保真原型， 选中Weather页面的展开画板，使用cmd + c（复制）； 切换到Origami Studio，cmd + v（粘贴）； 整个界面就导入完成了， 所以我之前说，使用Sketch进行界面设计可以事半功倍，它与Origami Studio配合的非常好。 设置滑动区域当用户滑动Content区域的时候，该区域要能够跟随手指，向上滑动。这里就有2个要点， 滑动Content区域：要能够感知到这个区域被滑动； Content区域跟随滑动：滑动的位移能够作为输入，实时的影响Content区域的位置； 感知交互组件旁边有个touch按钮，点击后会出现该组件可能会接收到的各种触控方式。在本例中，我们是需要感知Content组件垂直方向上的滑动，所以选择ScrollY， 此时，工作区域和虚拟屏幕都发生了变化， Content区域的位置发生了变化，被“顶”到了整个屏幕的最上面。这是为什么呢？因为Content区域的Y坐标被修改成了0。 在紫色的Scroll框图中，Content Layer被指定成了Content，说明需要关注Content的滑动。Y坐标的变化将被输出到蓝色框图代表的Content区域，修改它的Y坐标。 因此，当框图被这样组合之后，我们没有触控Content区域，Content的Y轴就没有滑动，因此输出就为0。0作为Content区域的新位置，就将其顶到了屏幕的最上方。 因此，我这里可以给出一个小技巧来避免这种错误的置顶效果， 给Content添加一个壳-Group（+ -&gt; group），将Content包裹在里面(通过拖动Content到Group中实现)； Group的尺寸从屏幕的顶端开始计算，占据整个屏幕； 然后再给Group添加响应， 可以看到，现在虚拟屏幕上的界面就没有变形了。在屏幕上进行拖动，Content区域就可以随着Y轴的偏移，而实时的修改自己的Y坐标，达到互动的效果， Content滑动的过程中，Weather detail，也需要随着向上滑动，并隐藏起来。 有了上面处理Content的经验，我们就知道需要如何处理Weather detail的滑动了。 给Weather detail添加一个壳-Group，将Weather detail包裹在里面； Group的尺寸从屏幕的顶端开始计算，占据整个屏幕； 鼠标按住紫色框图Y字符的位置，拖住不放，连接到组件区域上方的Y坐标处， 工作区域就会自动添加紫色框图到新Group的连接， 注意：这种拖拽端点到属性值的方法贯穿了使用Origami Studio的各个地方，是非常核心的操作方式。 此时滑动界面的时候，Weather detail也会跟着滑动了， 这时可以看到，状态栏被挡住了。解决的办法很简单，只要在组件区域，把Statusbar拖动到最上面的位置就可以了， 标题的变化现在开始加入标题-成都的变化。 把成都从Weather detail中剥离出来，便于全局的控制，进行如下设置， 在界面滑动的过程中，字体的大小和X Y坐标都要发生变化，说明需要找到内容区域Y轴滑动时的比例，然后让成都元素的对应属性发生变化。 滑动变化有自己的百分比：（当前值-原始值／变化范围）* 100% = 变化的百分比 原始值：0 变化范围：-245（245是Weather detail的高度） 成都文字的属性变化范围是： 属性 属性起始值 X坐标 24 -&gt; 16 Y坐标 244 -&gt; 38 字体大小 34 -&gt; 20 在Origami Studio中确定变化范围，需要使用Progress patch（到底什么是patch，会在后面介绍）。 在工作区域双击，弹出patch选择框，找到Progress， 修改Progress patch的Start value为0，End value为-245， 开始修改成都文字的Y坐标。 在Progress path之后，添加一个Transition patch； Start为244，End为38； 将Transition patch的输出，通过拖拽的方式，连线到成都元素的Y坐标值的位置； 开始修改成都文字的X坐标。1. 在Progress path之后，添加一个Transition patch；2. Start为24，End为16；3. 将Transition patch的输出，通过拖拽的方式，连线到成都元素的X坐标值的位置； 开始修改成都文字的字体大小。 在Progress path之后，添加一个Transition patch； Start为34，End为20； 将Transition patch的输出，通过拖拽的方式，连线到成都元素字体大小的位置； 至此，我们可以看到滑动时，标题变化的雏形了， 滑动的范围上下滑动时，内容是收到了局限的，只能在一定区域内滑动。所以要给目前的设计增加一个滑动限制。 添加一个叫做Clip patch过滤器； 将它允许输出的最小值Min设置成-245（也就是Weather detail的高度）；将允许输出的最大值Max设置成0； 修改框图的连接方式如下， 滑动的保持现在滑动虚拟屏幕的时候会发现，当松手之后，原来滑动到的位置会自动还原，但实际上我们希望它能够保持当前的状态。 将Content所在的Group向下移，放到Weather detail所属的Group的下面； 修改该Group的大小为1000； 至此，动画的效果就基本完成了。 尾巴这里留下了一个小尾巴：滑动的过程中，状态栏的颜色也是需要变化的，从#3F51B5逐渐变化到#303F9F。 经过前面的实践，我想大家应该已经知道了实现的要点，那就开始自己尝试着做做吧。 提示：通过Color to HSL patch Transition patch与HSL Color patch的配合，来修改状态栏背景元素的颜色属性。 整个工程的源文件，我放到了这里，供大家参考。 回顾总结通过具体的案例，我们初步了解了Origami Studio的用法，对实现动画的方式也有了概念。 一切的动画效果都是通过下面几个步骤来实现的， 感知触发动画的事件，点击、滑动等等； 把触发事件后产生的数值，交给一个个串联起来的patch进行处理，获得新的数值； 利用新的数值来修改某个界面元素的属性，比如文字的大小，文字的位置，文字的透明度等等； 知道了这样的套路，以后遇到其他动画就可以依葫芦画瓢来操作了。 至于什么是patch，我相信一步步做到这里，也都可以心领神会了吧。 另外，处理虚拟屏幕，Origami Studio产生都可交互原型，也能在手机设备上运行，前提是在设备上按照对应的应用Origami live。希望进一步了解的同学，请移步这里，有更为详尽的信息提供给你。","categories":[{"name":"第3章 产品原型","slug":"第3章-产品原型","permalink":"http://booktest.anddle.com/categories/第3章-产品原型/"}],"tags":[]},{"title":"3 静态原型设计","slug":"3_产品原型/3_静态原型设计","date":"2017-01-15T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"3_产品原型/3_静态原型设计/","link":"","permalink":"http://booktest.anddle.com/3_产品原型/3_静态原型设计/","excerpt":"","text":"静态原型设计对于静态原型的设计，我们使用Sketch。 启动Sketch后，我们将看到类似如下的界面， 工具栏它的顶部是工具栏， 可以通过菜单栏View -&gt; Customize Toolbar...来自定义工具栏。在弹出的窗口中，将下方的图标拖拽到上方的工具栏中就可以了。 导航栏左边是导航栏，用来展示这个项目拥有的page和page中包含的详细内容。 page是一张张单独页面， 每个页面上可以放多个手机屏幕的画板：展开、折叠、图标等等； 每个page中的画板都进一步的在导航栏的下半区域展示出来：展开、折叠、图标等等； 多个page被归类到了pages的下面：Weather、 Symbols等等； 我们设计的程序界面，就是某个page， 工作区域工作区域显示的是page的详细内容。我们设计的程序界面具体样子，就是通过工作区域展现出来的。 属性设置区域属性设置区域用来设定某个选定图形的属性，例如它的大小、透明度、文字内容、字体颜色等等。 添加设备画板在新建的 Sketch项目中，双击导航栏的page1，把页面的名字改成一个有意义的名字-Weathear， 通过工具栏的Insert -&gt; Artboard，调出画板，选择Material Design下的Mobile Portrait， 通过右侧的属性设置区域，可以看到这个画板的大小为360px*640px，正好是一个mdpi的安卓设备屏幕尺寸。所以我们在这样的尺寸上做设计，能够很容易的顾及到其他像素密度的设备。 可以看到Sketch为多种界面提供了默认的尺寸，iphone的，安卓设备的，网页的，MacOS应用的，可以说是应有尽有。这也说明Sketch就是为了这些产品而设计出来的。 除了使用菜单栏调出画板，你也可以使用快捷方式：A。这也是操作Sketch必须记住的快捷方式之一。 添加状态栏状态栏Symbol状态栏似乎很复杂，有wifi信号、手机信号、时间、电量等信息，幸好Sketch原生就自带的现成组件，你可以直接拿过来就用了。当然，你也可以自己一个一个去画，不过既然有了现成的轮子，又何必重复劳动呢。 菜单栏中选择File -&gt; New From Template，在弹出的菜单中选择Material Design。此时会创建一个新的工程文件。 与之前空的工程文件不同的是，这里面已经有了两个现成的page，里面的内容就是Material Design会使用到的各种现成的组件。 选择Material Design Symbol -&gt; Material/Android/Status bar 360dp black，这就是一个现成的可用的状态栏。这样的组件叫做symbol，它是有多个图形组合后形成的一个通用符号。Symbol可以被不同的page、项目共享使用。 以后只要看到这个图案，就知道这是一个symbol了， 我们也可以创建自己的symbol，不过这个地方还不会用到。随着设计开发的深入，在这个章节的后半部分，我们会进行详细的介绍。 使用状态栏Symbol使用鼠标右键 + Copy（或者cmd + c）之后，将它粘贴（鼠标右键 + Paste Over或者cmd + v）到我们之前的weather page之中， 如果状态栏粘贴之后，并没有对齐画板的边缘，手动将它移动，对齐就可以了。 此时可以看到， Pages下面自动多出了一个叫做symbols的页面，它里面放的就是我们刚引进的symbol。 这时的statusbar还是一个独立的部分，并没有隶属于Mobile Portrait画板之下，两者还是平级的关系。 调整状态栏Symbol接下来我们就开始调整statusbar与Mobile Portrait之间的隶属关系。 将状态栏展开，选中里面的内容； 将各个组件拖入到Mobile Portrait之下； 删除没有内容的状态栏symbol； 将刚拖入的组件使用工具栏上的Group功能组合起来，并将组合后的组件更名为Statusbar； 选中状态栏，我们可以看到状态栏的尺寸是：24px*360px，刚好是前面讲过的状态栏应该的高度。 修改背景色将状态栏的背景颜色修改成之前设定的Primary Color：#3F51B5， 添加Appbar我们设计的Appbar包括了两个部分，一个是toolbar，另一个就是flexible space-显示当日天气的详细信息， Toolbar参数确定添加Toolbar很简单，首先找到Material Design中对Appbar的描述可以知道， 这是一个高度为56dp的矩形区域； 当Appbar收缩时，应用的名字会显示出来， 注意：这里显示的是中文-Dense类型的文字，所以文字的大小比英文要大1sp。 添加Toolbar先添加区域， 选择Insert -&gt; Shape -&gt; Rectangle(或者快捷按键R)； 在期望的位置，拖动出一个56px*360px的矩形框；拖动的过程中，矩形尺寸会动态的显示出来； 此时画板上已经多出了一个叫做Rectangle的形状。 假如尺寸有偏差也没有关系，可以通过修改属性区域的高宽数值，进行精确的修改 修改背景颜色为Primary Color：#3F51B5， 接下来添加应用名称：这里要显示的并不是应用的真实名称，而是天气预报的位置， 选择Insert -&gt; Text(或者快捷按键T)； 在Toolbar的大致位置进行点击，写下位置名称-成都；此时画板上多出了Text组件； 修改新组件的属性为， 选中Rectangle和成都组件，使用cmd + G，将其组合成Toolbar 再来进行标题位置的设置， 选择Toolbar下的所有组件，点击垂直对齐的按钮， 标题的左边距是16dp，选中成都，同时按下alt按键，可以看到成都上下左右的边距大小，使用方向键调整左边距的大小即可， 因为此时并不需要显示位置信息，所以要点击成都组件旁边的眼睛按钮，把内容隐藏起来。 使用alt查看组件的边距是一个常用的技巧，查看的同时，如果移动鼠标到不同的区域，就能看到组件相对于不同区域的边距数值，这让我们在排版的时候非常的方便。 至此，Toolbar的设置就完成了。 天气详情区域参数设定天气详情区域由三个部分组成， 天气图标； 当前温度，当日温度范围； 位置信息； 整体设计上讲，天气详情区域、Toolbar和状态栏都是整体的蓝色，占据整个屏幕空间的一半。因此这里将天气详情区域的高度，设计成245dp，它内部的元素都布局在360dp*245dp的区域范围内。 图标和温度的设计是比较自由的，只要设计师觉得美观就好了。我将它们放在两个150dp*100dp的矩形当中，让它们的左、右、上边距都成为24dp。 当前温度，采用Display 3的类型， 项目 数值 字体 Noto 字形 Regular 大小 56sp 颜色 #FFFFFF 透明度 70% 当日温度范围，采用Headline的类型， 项目 数值 字体 Noto 字形 Regular 大小 24sp 颜色 #FFFFFF 透明度 100% 位置信息，采用Display 1的类型， 项目 数值 字体 Noto 字形 Regular 大小 34sp 颜色 #FFFFFF 透明度 100% 左边距 24dp 下边距 24dp 注意：Noto字体和Roboto字体对于English-like是兼容的，所以当表示数字、英文字母的时候，两者都可以使用。 添加天气详情根据之前的规划，划出360px*245px的矩形区域，背景色修改成Primary Color：#3F51B5。默认情况下创建的矩形会有border，我们将它移出， 创建两个150dp*100dp的矩形，准备用它们分别装入天气图标和温度信息; 将新创建的矩形和bg进行组合； 调整两者顶部和左右的边距为24dp， 添加天气图标引入天气图标， 打开之前准备好的资源文件夹，把晴间多云的图标-阴晴拖入工作区域，尺寸设置成120dp*100dp； 将刚引入的阴晴与之前的weather icon bg组合成一个新的组件-Weather icon，并将阴晴水平居中放置， 展开阴晴，修改其颜色成Accent Color：#FFC107， 移除weather icon bg的背景颜色， 在对图标进行居中设置的时候，需要选中阴晴和weather icon bg，使用水平居中对齐功能。weather icon bg在这里充当了被对齐的参照物，在使用Sketch设计的时候，经常需要添加一个这样的辅助设计元素。 添加温度信息使用快捷按键T，在相应的位置，添加两个文字输入区域，写上对应的内容，并设置好对应的字体属性。 对组件结构进行调整， 对文字进行水平居中的排列，并移除背景的颜色， 添加位置在适当的位置，添加一个Text组件，写入成都，做好设置， 注意，它的左边距和下边距都是24dp。 至此，整个Appbar的内容就添加完毕了。 添加天气预报未来5天的天气预报，可以看成由5个类似的天气模块构成，只要完成一个，其他几个就可以通过复制+修改内容实现改变。 首先来明确一下各个组件的尺寸和参数， 整个区域的大小，我设定成360dp*100dp； 左右边距设置成16dp； 这样一来，每日的天气模块就是（360-16-16）/ 5 = 65.6dp，我将它们设定成65dp宽； 天气的图标的大小设定成30dp的正方形区域（注意，这些图标不算是系统图标，所以它的尺寸不需要参考设计成24dp的系统图标）； 日期的文字，参考Body 2的文字类型： 温度范围的文字，参考Caption的文字类型： 创建预报区域接下来，我们开始创建预报区域。划定一个360dp*100dp的区域， 添加一个预报模块添加一个65dp*100dp的背景限制区域-bound，以后每个预报模块的内容都要放到这个区域当中。这也是一个很有用的技巧。 从事先准备好的资源文件夹中，添加雪，并使用Primary Color-#3F51B5给它上色， 将预测温度和温度范围添加进去，并用Body 2和Caption分别设定它们的属性， 将雪``bound``明天``18℃～21℃组合起来，形成-明天；并调整它们的位置，使之居中， 添加第二个预报模块复制明天组件，产生第二个预报模块，修改第二个模块的名称和内容为星期六， 修改雪的图标成晴。 将资源晴从文件中拖到工作区域； 参考之前的方式调整图标的大小、位置和颜色； 将原来的图标雪，删除； 添加三个预报模块之后，重复之前的动作，完成星期日 星期一 星期二的内容创建， 位置排列将明天 星期六 星期日 星期一 星期二与forcast_bg组合到一起，形成Forcast， 因为要给左右两端留下16dp的内容，明天 星期六 星期日 星期一 星期二没有办法水平瓜分forcast_bg占据的空间。所以这里我就使用了一个小把戏：把forcast_bg的宽度缩短32dp，变成328dp，并将它水平居中， 再调整明天和星期二的水平位置，使之刚好位于forcast_bg区域之内， 再选中明天 星期六 星期日 星期一 星期二与forcast_bg，使用水平分配空间的功能，让预报模块平均占用空间， 最后，出去背景颜色，预报区域就全部完成了， 添加隔断为了界面分层，逻辑清楚，我在预报区域的下面，设计了一个360dp*10dp的隔离带，颜色为：#BDBDBD， 添加更多信息天气的更多信息，是通过列表的形式展现的。 参数设计 列表项的高度在Material Design中，被定义成了48dp；并且整个list的顶部还有8dp的边距。 列表项由3部分组成， 图标： 项目 数值 大小 24dp 左边距 16dp 位置 垂直居中 颜色 #000000 透明度 54% 项目名称： 项目 数值 字体 Noto 字形 Regular 大小 16sp 颜色 #000000 透明度 87% 左边距 72dp 位置 垂直居中 项目取值（参考）： 项目 数值 字体 Noto 字形 Regular 大小 14sp 颜色 #000000 透明度 54% 右边距 16dp 位置 垂直居中 注意：以上的数据都在Material Design的文档List当中有明确的定义。 添加列表项区域创建一个360dp*48dp的矩形区域-row bound，作为第一条数据项使用的空间， 注意：list的顶部8dp边距，这里还没有加上。因为我准备在添加完成所有的列表项后，再做整体的移动。 添加图标系统图标的尺寸是24dp的正方形，但是最外一圈还要有2dp的边距，所以真正的图标内容是局限在一个20dp*20dp的区域内的。 首先， 创建一个24dp*24dp的矩形-icon bound； 放到距row bound左边距16dp的位置； 让它垂直居中； 然后， 从事先准备好的资源文件中，找到风力.svg，拖入到Sketch的工作区域；调整图片大小为20dp*20dp; 颜色设置成#000000，透明度54%； 将其放置于icon bound的中心位置； 删除icon bound的背景色和边线； 添加项目名称在row bound的区域内， 添加风力文字； 设置左边距为72dp； 字体为Noto，大小为16sp，字形是Regular； 字体颜色设置成#000000，透明度为87%； 添加项目取值在row bound的区域内， 添加3级文字； 设置右边距为16dp； 字体为Noto，大小为14sp，字形是Regular； 字体颜色设置成#000000，透明度为54%； 列表项组合将风力文字、风力图标、3级、row bound、icon bound组合成一个新的组件风力， 最后把row bound的背景色和边线移除掉， 添加多个列表项复制粘贴第一个列表项，把剩余的项目以此添加到画板当中， 之后将它们组合成一个组件-More info， 最后再整体把More info向下移动8dp，使之符合List的设计规范， 这里有个技巧：在制作列表的时候，会发现数据已经超出了手机屏幕的高度，这时候，可以把Mobile Portrait的高度扩展到足以容纳的尺寸， 至此，整个主要界面的设计就完成了。 Appbar收缩后界面接下来，我们开始设计Appbar被滑动收缩以后的界面效果。 可以看到，这个效果图绝大部分和展开时的效果图时一样的。 所以我们可以将整个画板修改一个名字为-展开，并复制出一个新的画板命名为折叠，修改一下其中的元素就好了。 使用Symbol这样做完全没有问题，但是可能会给以后内容的修改留下一个隐患：假如我要把风力从3级修改为5级，除了要修改展开画板，还要修改折叠画板，要修改两个地方。 不过假如我将More info和Forcast做成了Symbol，那么只需要修改一处，两个画板中的内容就都可以变化了。 将More info Forcast和gap，组合成一个组件Content， 然后，使用转换Symbol的功能， 之后，在Symbols页面，就能看到Content的内容了， 之后，只要修改这个Symbol中的任何内容，都可以同步的反应到使用了它的界面之上。 创建折叠界面在Weather页面，复制展开，改名为折叠， 修改Appbar中的内容， 移除Weather detail，将Content的位置上挪，并调整画板的高度至合适位置， 显示Toolbar中的位置-成都， 修改状态栏的背景颜色为Primary Dark Color：#303F9F， 至此，使用Sketch进行界面设计的工作就全部完成了。 文中使用到的完整的Sketch项目工程文件，可以在这里下载到。","categories":[{"name":"第3章 产品原型","slug":"第3章-产品原型","permalink":"http://booktest.anddle.com/categories/第3章-产品原型/"}],"tags":[]},{"title":"2 前期准备","slug":"3_产品原型/2_前期准备","date":"2017-01-14T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"3_产品原型/2_前期准备/","link":"","permalink":"http://booktest.anddle.com/3_产品原型/2_前期准备/","excerpt":"","text":"前期准备设计师首先在头脑中、草稿中勾勒出静态效果图， 之后就需要收集制作时需要的各种素材、确定界面的配色方案。 收集素材界面中需要使用各种天气图标：晴天、雨天、大雾、下雪、下雨、多云等等；还有天气信息中的风力、风向等等。 我们可以使用Sketch工具进行完全的从无到有的自由创作，也可以适用现有的素材，减少设计的工作量。 这里并不打算讲如何画出一个完美的图形，我想作为一名设计师，这点基本的艺术功底应该还是有的。因此我决定去之前介绍过的资源池-iconfont网站寻找合适的图标。 输入各种图标的关键字，就能看到各种图标，例如多云， 点击希望的图标，准备下载， 可以选择图标的颜色、尺寸和下载的图标格式。这里我们选择SVG下载，也就是下载矢量图标（矢量图我们将在后一小节相信介绍）。至于颜色和尺寸就都无所谓了，因为后面我们使用的时候都会做出调整的。 以此方法，我们接着下载完成所有设计中需要使用到的图标，它们包括：风力、风向、湿度、空气质量、运动、紫外线、晴天、雨天、多云、多云间晴、雾、雪。 如果你的时间很宝贵不想把精力放到挨个下载上，那么我这里为你提供了打包好的所有可用素材，快去下载吧。 矢量图矢量图是设计当中经常使用到的图片类型。当设计师放大图片的时候，矢量图会跟着放大，但是图形的线条并不会变的模糊出现锯齿的形状。所以这是设计师的最爱。因此在前面下载矢量图标的时候，我说不用在意图标的尺寸，就是这个道理。 矢量图通常用在手动制图当中，占用的磁盘空间很小，它其实就是一个对笔划进行描述的文本文件，用文本编辑器打开的话，可以看到他的文本内容，例如， 123456789101112&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" t=\"1484009234652\" class=\"icon\" style=\"\" viewBox=\"0 0 1204 1024\" version=\"1.1\" p-id=\"2794\" width=\"18.8125\" height=\"16\"&gt; &lt;defs&gt; &lt;style type=\"text/css\"/&gt; &lt;/defs&gt; &lt;path d=\"M882.526316 286.796992q-17.323308 17.323308-42.345865 17.323308t-42.345865-17.323308q-18.285714-18.285714-18.285714-42.827068t18.285714-42.827068l42.345865-42.345865q17.323308-17.323308 42.345865-17.323308t42.345865 17.323308q18.285714 17.323308 18.285714 42.345865t-18.285714 43.308271zM250.225564 611.12782q-3.849624-16.360902-6.255639-33.684211t-2.406015-35.609023q0-61.593985 23.578947-116.451128t64.481203-95.278195 95.278195-64\"/&gt;&lt;/svg&gt; 这就是矢量图的描述语言。在安卓应用的设计当中，我们也有机会与矢量图进一步的打交道。 安卓应用的图形资源是支持开发者直接使用矢量图形的，安卓5.0开始的tint功能就经常需要和矢量图配合着使用。 配色方案天气预报的整体配色，我决定从Google提供的Material Design调色板中进行选择。 天气预报讲的是天空的故事，提到天空，第一感觉就是蓝色，因此我决定将配色方案定调成Indigo 500，金色代表太阳，作为与之配合的Accent Color。 打开配色方案的工具网站material palette，选择对应的颜色， 我们就得到了下面对应的颜色值， 颜色项目 颜色名称 颜色RGB值 Primary Color Indigo 500 #3F51B5 Primary Dark Color Indigo 700 #303F9F Accent Color Amber 500 #FFC107 图中的Light Primary Color和Divider Color我们这里暂时用不到。 图中的Primary Text和Secondary Text 就是我们前面提到的文字颜色。亮色背景下，这里看到的颜色分别是#212121和#757575。准确的讲，它们应该是： 使用的场景 透明度 颜色 Primary text 87% #000000 Secondary text 54% #000000 假如背景是白色，那么这个透明度的黑色在去除了alpha值以后，就分别对应#212121和#757575了。 图标的颜色应该是： 颜色透明度 颜色 54% #000000","categories":[{"name":"第3章 产品原型","slug":"第3章-产品原型","permalink":"http://booktest.anddle.com/categories/第3章-产品原型/"}],"tags":[]},{"title":"1 原型设计","slug":"3_产品原型/1_原型设计","date":"2017-01-13T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"3_产品原型/1_原型设计/","link":"","permalink":"http://booktest.anddle.com/3_产品原型/1_原型设计/","excerpt":"","text":"原型设计通过前面几个章节，我们已经掌握了安卓系统Material Design设计的大致原则。接下来，我们开始尝试将这些原则和方式运用到实际的项目当中。 效果图与交互原型产品原型的设计又可以分成两个阶段， 高保真效果图：这是产品的静态效果图，图纸上的设计效果与最后实际产品基本上是一模一样。产品中使用到的各种图标都可以从高保真效果图中截取出来使用（这里其实指的是使用sketch进行界面原型设计，它可以从效果图中提取图标素材）。 可以交互的原型产品：为了向产品的规划者（PM-产品经理）确认设计的正确性，同时向后继的开发人员展示正确的设计意图，设计师需要创建出一种能具有交互功能的原型产品。这种原型产品就像是一个已经开发完成了的最终产品，可以进行点击操作，具有互动性。 当然这毕竟只是一个“虚假”的产品，只是具备了展示的功能。 接着创意阶段的工作，需要我们将天气应用框线图的规划，变成一个像模像样的产品原型。设计师需要根据功能点，结合Material Design的设计里面，创造出一个让用户在视觉和交互上满意的产品。这种创造需要结合设计师的个人能力和经验。 我们的天气应用很简单，它简化了很多的功能，按照原型设计的两个阶段，可以将他们设计成下面这个样子， 高保真效果图： 可以交互的原型产品： 假如设计师设计的产品交互方式，很容易被开发者理解，那么动态交互原型也是可以不用设计的。不过，为了更加全面的展示设计的具体过程，我们这里会首先设计一套天气应用的高保真效果图。然后在此基础上，设计一套可以互动的产品原型。 这里我们的交互设计，参考了Material Design中Appbar可以上下滑动的效果， 设计工具设计高保真的效果图时，我们选择采用了MacOS上才能使用的Sketch。这是一款付费软件，大家可以在它的官网看到详细的信息。官网也提供了功能完善的试用版，作为初次的学习，大家可以通过它来练练手，实际的感受一下。 Sketch绝对是当今甚至未来几年应用程序界面设计行业中的主角，越来越多的设计师使用它来进行原型设计。 它的优点有， 体积小，运行时占用的资源少，性能高； 可以从设计的效果图中，直接导出开发时需要使用的图片； 导出的图片可以针对不同屏幕解析度的设备； 内置了安卓系统、iOS系统常用的公共组件（例如状态栏、常用控件、屏幕标准尺寸），可以拿来就用，不必全部重新设计； 设计可交互原型时，使用了FaceBook推出的Origami Studio，它可以把我们的静态效果图，转化成一个可以交互的原型。 使用它有两个原因， 这是一个免费的工具，有着强大的动画交互功能； Sketch制作的原型文件，可以直接导入到Origami Studio当中，减少设计的工作量； Sketch与Origami Studio一前一后互相配合，奠定了一个产品的牢固基石。","categories":[{"name":"第3章 产品原型","slug":"第3章-产品原型","permalink":"http://booktest.anddle.com/categories/第3章-产品原型/"}],"tags":[]},{"title":"9 界面模式","slug":"2_设计原理/9_界面模式","date":"2017-01-12T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/9_界面模式/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/9_界面模式/","excerpt":"","text":"界面模式Material Design的基础组件我们已经大体了解过了，现在我们看看Material Design在结合这些不同组件的过程中，有哪些套路，也就是有哪些常用的界面设计模式。了解了这些模式，可以帮助设计者们做出合乎开发者实现的方案。 设计的套路有很多，列表-list 分页-tab 网格-Grid 侧边栏 下拉刷新等等。这里只列出几个常见的，更多的方式请参考设计规范，以及其他各种优秀应用的精巧设计。 手机端屏幕大小是有限制的，好的设计会充分利用有限的空间，合理的向用户展示出更多的内容。 侧边栏侧边栏的设计最早是由国外的第三方开发者设计出来的，在用户中很受欢迎。于是后来被很多开发者采用。从安卓5.0开始，Google就推出了官方的实现方式，并作为一个典型的界面设计方案推荐给了大家。 带侧边栏布局， 更加具体的规范请参考这里。 底部导航栏通过类似底部导航栏的按钮，让界面切换显示更多的内容。 这中布局的方式也是苹果iOS的经典布局方式，不知道是Google的原创还是向苹果的致敬。 更加具体的规范请参考这里。 分页与底部导航栏类似，但是是放在界面上方。 更加具体的规范请参考这里。 动态变化我个人认为，界面元素和内容的动态变化，是整个Material Design的精髓。它带给了用户极好的视觉体验，是引导用户注意力的最好方法。 动态是通过过渡动画和滑动效果来实现的。 过渡动画在前面的章节已经介绍过了动画的内容，这里就不重复了。 这里就多看几个实际的例子吧。 滑动效果内容切换的时候，尽量的使用滑动的效果。 分页的滑动效果， AppBar的滑动效果，","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"8 设计的组件与常用模式","slug":"2_设计原理/8_设计的组件与常用模式","date":"2017-01-11T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/8_设计的组件与常用模式/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/8_设计的组件与常用模式/","excerpt":"","text":"组件与常用模式前面已经比较全面的介绍了Material Design相关的设计哲学、设计原理和方法论。这一章开始，我们将看看这些原理是如何在安卓系统当中得到实践的。 一个应用并不是完全从什么都没有来组建的，至少会有一匹一匹的砖嘛。而在界面设计当中，这些能够拿过来就使用的砖块就是控件。 例如，按钮 滑动条 列表等等，都是可以直接拿过来用的砖块。 Material Design最基础的体现，就是看看这些砖长成什么样，以及如何用Material Design的理念将这些砖组合起来，构建成应用的界面。 这样的砖块很多，Google在Material Design的规范中给出了详细的定义。 因此我不会一一列举，只是拿出其中一两个最为常见的、最为典型的砖块和大家讨论，看看规范该如何解读和使用。知道了这些典型砖块的实践方式以后，大家就能自己根据设计规范来查看资料了。 我这里选取了按钮 列表 应用栏 系统栏来详细的讨论。 按钮Material Design中有3类按钮： Floating action按钮：前面已经大致介绍过，它是一个圆形的按钮，悬浮在界面之上6dp的位置，当点击的时候，按钮会向上浮动（显示出更大的阴影），是界面中吸引用户的界面元素之一； Raised按钮：拥有背景颜色（Accent color）的按钮，点击时它在z轴的位置会向上变化； Flat按钮：按钮文字有颜色（Accent color）的按钮，点击时它在z轴的位置不会变化； Flat按钮Flat按钮常常用在toolbar、对话框以及需要与很多文字配合的地方。通常用来告诉用户“我能提供一些轻量级的功能，这些功能并不是我的特色，你知道我有就行”。 它的设计规范如下， 项目 数值 最小宽度 88dp 高度 36dp 边角弧度半径 2dp 左右margin 8dp 左右padding 8dp 字体大小 15sp 当使用亮色主题并按下按钮的时候，按钮的背景颜色是#999999，透明度为40%；当使用暗色主题并按下按钮的时候，按钮的背景颜色是#CCCCCC，透明度为25%； 当点击按钮的时候，会出现水波纹一样的动画， Raised按钮Raised按钮比Flat按钮能更加吸引用户的注意力。通常用来告诉用户“点击我以后，会启动我一个很重要的功能，你要特别注意”。 它的设计规范如下， 项目 数值 最小宽度 88dp 高度 36dp 默认z轴位置 2dp 按下时z轴位置 8dp 边角弧度半径 2dp 左右margin 0dp 左右padding 16dp 字体大小 15sp 当使用暗色主题时，背景的颜色如下， 按钮状态 数值 正常 调色板500类型的颜色 按下 调色板700类型的颜色 当点击按钮的时候，会出现水波纹一样的动画，之后按钮在Z轴的位置也会提升， FloatingAction按钮FloatAction按钮是界面当中最引人瞩目的按钮。它代表了这个界面能提供的最重要、最核心的功能。默认情况下它的尺寸是56dp，放在上方会小一点，是40dp。 按照中心位置会内嵌一个系统图标，系统图标的大小我们在图标的章节讲过，是24dp。 需要注意的是：并不是所有的界面一定要有个FloatAction按钮，它的存在完全是由应用的逻辑决定的。之所以我们看到那么多界面都有FloatAction按钮，是因为这是Material Design的典型特征，所以选择的很多例子都有它。如果某个界面确实需要FloatAction按钮，那么一个界面上也只能有一个，表明只有一个功能是最为重要的。 FloatAction按钮还有一些常用的使用模式： 当拥有FloatAction按钮的界面退出的时候，按钮要用动画的形式消失； 当拥有FloatAction按钮的界面显示的时候，按钮要用动画的形式出现； 当拥有FloatAction按钮的界面在内部进行切换的时候，按钮要有动态变化的效果； 按钮点击后可以，展示出更多菜单； 按钮变化成一个新的纸片，纸片上展现更多的内容； 它的设计规范如下， 项目 数值 标准尺寸 56dp 最小尺寸 40dp 内嵌图标尺寸 24dp 默认z轴位置 6dp 按下时z轴位置 12dp 背景颜色 Accent Color 列表接下来，我们看看另外一个会经常用到的组件列表。 列表用来显示展示类型相同的数据，比如都有头像、名字、职务等信息，不同的只是这些信息的具体内容。 列表项是列表的一个显示单元，列表项的布局不要超过三行，如果确实要超过三行，那么就不应该使用列表来展示内容了。 列表项的内容根据位置的不同，体现出的重要性也不同： 靠左边的内容是最重要的，右边的次之； 靠上边的内容是最重要的，下边的次之； 常见的列表布局有以下三种， 单行：有一行文字的显示 双行：有两行文字的显示 三行：有三行文字的显示 这些布局中各个元素的位置，都在规范中有明确的规定，经过按钮那一小节的讲述，我想大家一定具备看懂规范的能力，能够从中找到设置位置的关键点。 在查看上面的示例时，大家应该注意到了列表项的分割线。这些分割线将列表区域按照逻辑区分开来，都是1dp的宽度。 有的分割线贯穿了整个屏幕； 有的只是将文字的部分分开； 有的没有分隔； to 关于分割线，在Material Design的规范当中，也有专门的章节细致的讲述。 应用栏与工具栏工具栏的作用是把很多操作按钮集中起来，一起展现给用户。它可以放在应用界面的上部分、中间、底部， 在安卓的设计当中，有个ActionBar的概念，它的作用就是展示一个应用的图标、名字，以及菜单、导航栏等内容，从安卓3.0开始它就被提出，并推广了起来。 不过从安卓5.0开始，在ActionBar的基础上提出了AppBar。AppBar除了担当ActionBar的功能外，还增加了一些新的特性，例如滑动效果。新引入的具体的控件ToolBar接替了ActionBar的具体功能，成为AppBar最为核心的组件。 为了便于理解，我举一个例子。Google在2015年进行拆分，成立了多家公司，并将它们规整到Alphabet公司旗下。而以前的Google只保留搜索业务，成为了一个比较单纯的公司。 ActionBar就相当于以前的Google公司；AppBar相当于Alphabet；ToolBar就是Alphabet成立后的Google。AppBar除了ToolBar以外，还可能包含更多组件在其中。 应用栏的高度根据屏幕横竖状态的不同而不同， 屏幕状态 高度 竖屏 56dp 横屏 48dp 应用栏可以根据开发者的要求，变成透明的、半透明的、甚至不显示。 AppBar除了显示标题、菜单等功能外，还有令人炫目的滑动效果，这也是安卓系统使用Material Design的重要特色。 AppBar除了Toolbar以外，可以包含分页标签Tabs 图片等等内容。图片占用的空间叫做可变空间-Flexible space，不一定就是放图片，也可以放其他的元素，只不过就界面设计来讲，显示图片的效果要很多。 AppBar只有Toolbar：内容滚动的过程中，Toolbar可以被顶到消失；也可通过下拉再次出现。 AppBar有Toolbar和Tab： 内容滚动的过程中，Toolbar可以被顶到消失，只留下Tab；也可通过下拉再次出现。 内容滚动的过程中，Toolbar和Tab都被顶到消失；也可通过下拉再次出现。 AppBar有Toolbar和可变区域： 内容滚动的过程中，可变区域可以被顶到消失，只留下Toolbar；也可通过下拉再次出现。 内容滚动的过程中，Toolbar和可变区域都被顶到消失；也可通过下拉再次出现。 状态栏与导航栏用过智能手机的同学对状态栏和导航栏一定不会陌生， 状态栏贯穿了整个屏幕的宽度，高度是24dp。导航栏同样贯穿了整个屏幕的宽度，高度是48dp。不过在很多国内定制的系统当中，因为手机已经有了实体按键，就取消了导航栏。 状态栏和导航栏的背景颜色是可以各自改变的，透明、半透明、不透明。 为了配合不同应用的使用场景，状态栏和导航栏的显示也有不同的表现， 沙发模式（Lean back）：就像在瘫坐在沙发上看电影时一样，屏幕尽可能的呈现视频内容，把状态栏和导航栏都藏起来。这个过程中你几乎不会去接触到屏幕，当你碰触屏幕的时候，状态栏和导航栏才会出现。 沉浸模式（Immersive）：比如当你在使用阅读软件看书的时候，屏幕只显示书本的内容，把状态栏和导航栏隐藏起来，让你沉浸在阅读的快乐当中。但每次翻页的时候，你还是需要接触屏幕的。虽然翻页的过程中接触了屏幕，状态栏和导航栏也不会出现，除非你在屏幕的边缘做了一个滑动的动作，才能将它们再次唤出。 关灯模式（Light out）：当你不碰触屏幕超过一定的时间，状态栏会自动的隐退；导航栏虽然还在那里，但是那三个操作的按钮却变成了三个小点。这个过程就好像是关闭了照亮屏幕的灯，状态栏和导航栏似乎还在那里，只是没有了灯光，已经看的不真切了。","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"7 声音与触觉的利用","slug":"2_设计原理/7_声音与触觉的利用","date":"2017-01-10T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/7_声音与触觉的利用/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/7_声音与触觉的利用/","excerpt":"","text":"声音与触觉的利用之前我们对设计的讨论都是几种在视觉基础之上的。但除了视觉，我们人还拥有听觉、嗅觉、触觉、味觉等感知大自然的能力。 现在由于技术的限制，嗅觉和味觉在移动设备领域的使用还无法派上用场，但是听觉和触觉正在扩大对我们使用的影响。 声音的影响最经典的听觉案例有2个，和大家分享一下。 一个是当年诺基亚的开机铃声，我想使用过诺基亚手机的同学每当听到这个声音一定会想到它那经典的台词，科技与人为本，然后就是两只手紧握的图案。这个例子正是通过声音，将用户和手机联系在一起。 还有一个就是iPhone的手机铃声，走在大街上，如果听到这个铃声，很多iPhone用户都会不自觉的去摸一下自己的手机。这个声音改变了用户的行为模式，即使知道可能不是自己的手机在响，但总会下意识去摸一下自己的手机。 与手机铃声不同，短信声音就显得非常短小精干，让你知道短信的存在，也不会太打扰你正在做的事情。 照相的声音、屏幕锁定的声音、键盘打字时的声音…… 每个声音都有它想传达的意境。 触觉的作用触觉能带给用户更好的反馈体验。 当我们不方便开启铃声的时候，震动反馈就能告诉用户有电话来了、有消息需要查收。 苹果公司开发出的感知压力的屏幕，也给界面交互提供了更多的选择。手机通过感知用户按压屏幕时的不同力度，给用户提供不一样的操作响应。 我们可以设想一下这样一个将来会出现的使用场景：用户通过点击屏幕输入文字的时候，屏幕能感受到压力，并根据压力的不同，在被点击的区域产生响应的震动。这样就可以模拟用户打字的力反馈，给用户带来更好使用体验。 对于我们设计师或者开发者来讲，声音和触觉的设计就不属于我们讨论的内容了，它们涉及到另外一个专业的领域。我们还是把精力集中到视觉和功能上的旅程吧。","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"6 动画效果","slug":"2_设计原理/6_动画效果","date":"2017-01-09T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/6_动画效果/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/6_动画效果/","excerpt":"","text":"动画效果运动的物体总是能最有效的吸引住人类的注意力。在界面设计的领域，也是一样，当你希望用户的注意力从一个点转移到另一点，在这两点之间设计一个迁移的动画是在合适不过的了。 动画基本上可以分成以下几类： 平移动画： 渐变动画： 缩放动画： 旋转动画 其他所有的动画基本上都是这些单一的动画，或者多个动画的叠加。例如，一边平移一遍放大。 动画由两个要素：一个是上面各种动画体现出的空间变化；另一个就是动画相对于时间的变化。 Material Design从真实的世界当中借鉴了重力和摩擦力对事物的影响，用它们来设计动画在时间维度上的变化。 动画的时间要素一个动画持续的时间要控制在300左右，短了用户看不清，长了太拖沓。 动画变化的速度要平缓，主要有以下几种速度： 标准速度曲线：速度先快后慢 减速曲线：速度从快到慢 加速曲线：速度从慢到快 陡峭曲线：速度变化快速 这些速度是Material Design动画效果的基石。我们看到的那些自然的动画，都是依靠这些速度的配合而形成的。 使用动画的对象为了突出重点，吸引用户的注意力，动画的使用场景可以归纳成如下几点： 应用的界面切换：例如屏幕中进入或者退出一个对象物体。 元素属性的变化：例如屏幕中一个物体的形状发生变化。 内容的迁移：例如通过屏幕中的局部内容展现更多内容。 点击的反馈：当用户点击屏幕时，提供视觉上的动态效果。 界面切换界面切换的效果，根据切换的内容不同，速度也有一些变化： 整个屏幕的切换，动画效果控制在375ms； 小的元素进入屏幕，动画效果持续225ms； 小的元素离开屏幕，动画效果持续195ms； 当一组对象被移动的时候，使用标准曲线， 当一个对象进入屏幕的时候，使用减速曲线，当一个对象离开屏幕不再回来的时候，使用加速曲线， 当一个对象暂时离开屏幕、但随后还要回来的时候，使用陡峭曲线， 元素属性变化 矩形变化：矩形的长宽发生变化。长与宽不同时变化， 长与宽同时变化， 圆形展开：圆形逐渐扩大，展开成矩形， 圆形先做一个平移的动画，再展开成矩形， 合并与分割：多个矩形从分裂的状态聚合到一起形成整体；一个整体分裂开，成为独立的部分， 内容迁移简单的说，就是把显示出的部分内容，扩展成完整的内容， 将现有的内容，原封不动的扩展出更多内容， 视频中的圆形和矩形，在动画前后都保留了下来。只是通过平移和缩放的动画，把之前隐藏的内容显示了出来。 保留关键内容，扩展出更多内容， 视频中的圆形得到了保留，其他元素被隐藏起来。动画过程中显现了更多的界面元素。 点击的反馈为了增加用户点击屏幕时的视觉反馈，Material Design对按钮、列表等拥有点击交互的组件增加了水波纹效果-ripple，","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"5 图标的使用","slug":"2_设计原理/5_图标的使用","date":"2017-01-08T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/5_图标的使用/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/5_图标的使用/","excerpt":"","text":"图标的使用图标能给人带来最直观的印象，有的时候再多的解释也抵不过一个图标。 安卓应用的图标分成两类， 应用图标：在主界面上代表着整个应用的那个启动图标，是给用户第一印象的图标。一个应用开发成功后会不会被用户下载，也许就取决于用户看它的第一眼。 系统图标：在应用里面使用的各种具有特别意义的图标，引导用户进行更多的操作。 应用图标应用图标的设计也是对Material Design的一种体现：制作应用图标的过程，就是对一张纸进行裁剪、折叠、上色、增加阴影的过程。 虽然应用图标可以被设计得千奇百怪，但是它还是有很多的套路可以使用的，只要遵守这些套路，你设计出来的图标也不会难看到哪里去。 先来说说应用图标的一定要执行的规则： Google给出了图标设计的网格图。设计应用图标的时候，要参考这个网格对图案进行布局和排列。 安卓系统希望应用的图标框定在48dp尺寸方框以内，并且拥有1dp的边框（包含在48dp的尺寸以内）。为了作图的细致，建议我们将48dp的图标先放大4倍，也就是变成192dp（边框4dp），再进行设计。 图标可以根据设计线，做成圆角方形、圆形、竖长方形、横长方形。各个形状的区域尺寸分别是： 需要注意的是：虽然图标的形状不同，但是它们都是被限定在了192dp（缩放后）的正方形方框当中；标注出的尺寸都是放大了4倍以后的尺寸。 图标制作的时候，选择简单明了的几何图行。 之后就是和设计相关的要素了。一个图标由7个要素组成： 背景：图标的背景，这个背景的大小是由图标的形状决定的，例如圆角方形、圆形等等，并不占用图标的整个区域。 前景：图标的前景，通常就是表达应用含义的几何图形。 颜色：颜色的选择与应用界面颜色的选择一样，要选择能体现应用内容的色调。颜色不宜不多，最好不要超过3个。颜色可以只是放在前景当中，也可以只放在背景当中。 tint边沿：tint是一个遮罩，可以把它理解成给图层带上了一顶帽子。这顶帽子可以有自己的颜色和透明度，与它盖住的图层混合，显示出不同的效果。我们会在后面详细讲述tint。tint边沿出现在前景和背景的上边沿。它是有规定的： 阴影边沿：出现在前景和背景的下边沿。它是有规定的： 阴影：前景在背景上会留下投影，这个投影也是有规定的： 前景相对于背景的高度是1dp。 光照：图标拥有从左上方45度角照射过来的光源。要注意的是：这个光源仅仅局限在图标的内部。光源的属性如下： 最后我们讲讲前面提到的tint与shade的颜色。tint与shade都是在原来图层的上方添加一个遮罩，让遮罩与图层叠加，产生不同的颜色效果。 首先确定主色调的类型：冷色？暖色？ 根据下表，选择tint与shade的颜色。 例如主颜色是Yellow 500，它属于Warn暖色。因此， 它的tint颜色就是主颜色添加20%的白色。 它的shade颜色就是主颜色，添加20%的Deep Orange 900 系统图标下面这些常见的图标都是系统图标。 它们都是使用粗线条的几何图案，非常简约。设计系统图标也是很套路的事情。 先来说说应用图标的一定要执行的规则： Google为这个类型的图标设计了网格图， 安卓系统希望应用的图标框定在24dp尺寸方框以内。 图案在20*20以内，多余的4dp作为边框空着。 图标可以根据设计线，做成圆角方形、圆形、竖长方形、横长方形。各个形状的区域尺寸分别是： 需要注意的是：虽然图标的形状可能不同，但是它们都是被限定在了24dp的正方形的方框当中。 之后就是和设计相关的要素了： 图标的外部边缘都是2dp的弧形，而内部边缘都是方形； 做图的笔划粗细要一致，而且笔划是方形的。笔划掉粗细是2dp。 假如图形很复杂，2dp实在是显得拥挤，那可以适当用细一些的笔划，例如1.5dp。如果还很难画，那就的想想是不是你的图标太复杂，要考虑更简单的图案了。 图标在界面上布局的时候，要让它拥有额外的边距。加上边距，整个图标的尺寸要达到48dp。也就是说，它上下左右的边距要有24dp。为什么呢？因为系统图标大多是需要让用户点击的，经过测试，人的手指点击时接触屏幕的区域大小差不多就是48dp。 此外，在使用几何图形作为图标的时候，要选择平面的图形，有3D效果的就不需要了，因为Material Design是扁平化的设计。 系统图标的颜色设置也有需要遵循的规则，在亮暗不同的背景下，颜色不同， 在亮背景下，使用黑色： 在暗背景下，使用白色： 工具知道了制作图标的规则，一切就好办了。如果你是设计高手，可以用工具，从无到有，完全自己画一个图标。如果你时间有限、不善此道，那么可以从网上找到很多设计图标的素材。 Google在官网上放出了很多现成的图标素材，涵盖了很多门类，基本上够我们直接拿过来使用了。 阿里也提供了一个收集了很多图标的网站iconfont，我们需要某个类型的图标时，可以去上面搜索。这几乎一定能满足我们的需要。 制作图标的素材最好是矢量图，这样随便缩放素材的大小，图案的边缘都可以清晰可见。而且向我们要使用的图标素材都是很简单的几何图形，矢量图占用的存储空间会非常的小。 还有一个实用的图标制作工具网站Android Asset Studio。你可以选择制作应用图标或者系统图标，调整好参数以后，就能将图标下载到本地使用。","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"4 文字的使用","slug":"2_设计原理/4_文字的使用","date":"2017-01-07T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/4_文字的使用/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/4_文字的使用/","excerpt":"","text":"文字的使用文字是应用当中使用最多的要素。显示一段供用户阅读的文字，程序运行时的信息提示都离不开它。 文字是内容的实际体现者，因此设计师需要将用户的注意力尽可能的吸引到文字当中。 字体可以分成两种类型：有衬线的-serif；无衬线的-sans-serif，也简称sans。serif的笔划端部会多出来一截修饰；sans的笔划端部是平的。 在过去，serif通常用来做文章的内容，sans用来做标题；但是现在，内容也开始使用serif了，这是一种新的趋势。在安卓系统中，就采用了sans字体做文字的默认显示。 不同的文字内容，需要吸引用户不同程度的注意力。例如，按钮上的文字和内容都需要吸引用户的注意力，但是它们的重要程度是不一样的。这种吸引的程度可以通过字体的大小和字体的颜色来实现。 字体前面提到的serif与sans-serif是通过衬线将字体分成了2类。接下来我们开始认识认识字体。 从文字的形状出发，可以将文字分成三类， English-like：英文、拉丁文等字母组合型的文字； Tall：像阿拉伯文字、泰文这种像绘画片段组合成的文字； Dense：像中文、日文、韩文等具有高密度笔画等文字； 我们主要进行中文应用的开发，所以会遇到很多Dense类型的字体。 字体和某个具体的字体是两个不同的概念，前者是对具有相同间架结构文字的总称，是个很宽泛的概念；而具体的字体指的是使用时，为了显示某个文字而具体使用的文字形状。 例如Arial字体，它下面就拥有多个子项目-字体家族。 字体家族-font family是一个家族的名字，它的下面可以有多种字形-style。例如Arial字体家族，它就拥有多个字形：Regular-常规 Italic-斜体 Bold-粗体 Bold Italic-斜粗体，这几种字形也是其他字体家族中最经常具有的。 某个具体的字体，例如Arial Regular，就是由它所在的字体家族和字形来决定。所以每说到一个具体的字体，都可以找到它对应的字体家族和字形。 例如下面的Arial Arial Black Arial Hebrew，分别对应着3种不同的字体家族；而每个字体家族下面都有各自具体的字型。 可以看到，有的字体家族下面可以只存在一种字形，也可以存在多种字形。这就完全看字体设计师的实现了。 例子里面的字体都是Arial字体，它下面的子项名称中虽然都有Arial，但都属于不同的字体家族。 Noto对于Dense类型的文字，安卓系统使用Google提供的开源字体Noto。 Noto字体家族本身拥有了很多字体：Noto Sans，Noto Serif，Noto Momo……。 Noto拥有从英文字母到汉字的所有文字，对于我们开发中文应用，完全没有问题。显示简体中文的时候，使用的是Noto Sans CJK SC。 Noto有7种字形：Thin，Light，DemiLight，Regular，Medium，Bold，Black。它们对应的具体字体的粗细是各不相同。 关于Noto字体名字的由来，还有一个这样的小故事： 电脑中显示字符的时候，如果系统中没有安装对应的字体，那么就会在屏幕上显示一个空白的方框-口来代替。如果连续出现很多个不能显示的文字，显示的内容就像是口口口口口。外国人觉得这个方框像我们中国的豆腐，于是就叫它tofu。为了消灭这些豆腐，No tofu的口号就成为了Noto的名字。看来Noto为此发了大愿，消灭文字显示中的一切盲区。 大家可以在Google提供的官方网站获得Noto字体更为细节的信息。 Roboto对于English-like类型的文字，安卓系统使用Google提供的开源字体Roboto，它看上去要宽且圆润，现在在很多平台上得到了广泛的应用。 Roboto有6种字形：Thin，Light，Regular，Medium，Bold，Black。 Roboto与Noto是兼容的，当选定Roboto的一种粗细的笔划时，就能在Noto当中找到对应粗细的笔划。 大家可以在Google提供的官方网站获得Roboto字体更为细节的信息。 大小不同的位置，文字显示的大小也可能有所不同。Material Design对界面上各个显示元素中使用到的文字大小，作出了规定。 显示English-like内容的时候，在中文系统中显示英文： 显示的位置 字体类型 字体大小 Display 4 Light 112sp Display 3 Regular 56sp Display 2 Regular 45sp Display 1 Regular 34sp Headline Regular 24sp Title Medium 20sp Subheading Regular 16sp Body 2 Medium 14sp Body 1 Regular 14sp Caption Regular 12sp Button Meduim 14sp 显示Dense内容的时候，在中文系统中显示汉字： 显示的位置 字体类型 字体大小 Display 4 Light 112sp Display 3 Regular 56sp Display 2 Regular 45sp Display 1 Regular 34sp Headline Regular 24sp Title Medium 21sp Subheading Regular 17sp Body 2 Medium 15sp Body 1 Regular 15sp Caption Regular 13sp Button Meduim 15sp 规律就是，显示正文时（从title开始），中文比显示英文要大1sp。 Display对大家来说可能比较陌生：它的用法是将文字作为一个大区域的显示，例如手机待机时屏幕上显示的时间信息，就是将文字当作Display来运用的。 格式为了便于用户阅读，让用户有良好的阅读体验，我们还要考虑文字当中， 行之间的间距。 每一行占据的宽度。对于长段的内容，字符控制在60个每行；对于简短的内容，字符控制在30个每行。 颜色文字使用的颜色与背景的颜色相关，采用白色或者黑色，目的是提高文字的可读性，不要让文字的颜色和背景的颜色混在一起。 文字的颜色需要根据显示的位置体现出不同的深浅颜色。这种颜色的深浅是通过调整字体的透明度实现的，而不是将字体设置成一种灰色。 字体颜色安卓系统根据显示内容的重要性，将文字主要分成了好些类：textColorPrimary textColorSecondary textColorPrimaryActivated textColorSecondaryInverse 等等。不过最重要的就是： textColorPrimary：就是Primary text-主要文字内容使用的颜色。它使用在文字的title，headline，subhead，Body1～2，Button这些位置。 textColorSecondary：就是Secondary text-次要文字内容使用的颜色。它使用在Display 1～4，Caption这些位置。 浅色背景对于浅色背景，字体使用纯黑色-#000000，根据使用场景的不同，透明度不同， 使用的场景 透明度 Primary text 87% Secondary text 54% Disable text, Hint text 38% 假如文字需要与图标配合使用，那么文字的颜色也是使用纯黑色-#000000，但是会根据图片当前是否处于激活的状态而不同， 图标激活状态 图标对应文字的透明度 激活 54% 未激活 38% 深色背景对于深色背景，字体使用纯白色-#FFFFFF，根据使用场景的不同，透明度不同， 使用的场景 透明度 Primary text 100% Secondary text 70% Disable text, Hint text 50% 假如文字需要与图标配合使用，那么文字的颜色也是使用纯白色-#FFFFFF，但是会根据图片当前是否处于激活的状态而不同， 图标激活状态 图标对应文字的透明度 激活 100% 未激活 50% 字体的下载和使用前面提到的Noto字体和Roboto字体，可以分别在Noto的官网 和Robot的官网看到更为详细的介绍，并下载。 假如你的电脑上并没有安装这两种字体，请去官网下载。 下载以后(这里用安装Noto的简体中文字体来举例), 将得到的压缩包解压； 依次双击字体文件*.ttf或*.otf； 这样就可以将这些自己安装到电脑上了，在设计的过程中，就能够选择到对应的字体了。","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"3 颜色的运用","slug":"2_设计原理/3_颜色的运用","date":"2017-01-06T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/3_颜色的运用/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/3_颜色的运用/","excerpt":"","text":"颜色的运用Material Design采用的是扁平化的设计，可以看到一大块一大块区域的颜色。这些颜色大多亮丽引人，整个界面上搭配的颜色也不会太多，基本保持在三种颜色以内。 “没有错误的颜色的，只有错误的搭配”。颜色是没有对错的，我们要用经验和直觉来搭配它们，所以要先来认识认识颜色。 颜色理论颜色是有语言的，红色代表这热情奔放，蓝色代表的沉着安静，绿色代表着生机活力。搭配一组颜色，就是表达作品要传递的含义。 我们大部分人都知道RGB颜色，它的理论依据是：任何颜色都是通过不同强度的红色R、绿色G、蓝色B组合而成的，改变它们的组合就能得到任何颜色。在计算机领域，这三种颜色分别具有0～255个不同的数值。 对于设计师配色来讲，还会使用另外一个体系的颜色理论-HSB：色调H，饱和度S，亮度B。 我们人在谈论颜色的时候，总是说这个颜色很红、有点绿、偏蓝。 当我们说很红的时候，就是给颜色设定了一个基调-红色。这种基调称为色调。色调成圆环形状的分布，依次渐变的呈现出赤橙黄绿青蓝紫各种颜色。 色环具有360度，因此色调的数值就是0～359度。色调数值从0到359变化，也代表着颜色从暖色逐步过渡到冷色。你是不是看到红色就觉得温暖，而看到深蓝色就觉得冷飕飕的呢？ 很红的很字，就要通过饱和度和亮度来体现了， 饱和度：可以理解成把一种纯粹的颜色溶解到水里面，如果水很多，颜色就很淡；如果水很少，颜色就很纯。因此它具有0%～100%的数值。 亮度：我们能看到物体是因为光线照在物体上面的缘故。如果一点光没有，不管什么样的颜色，看起来都是黑的，只有充足的光线才能反映出物体本来的颜色。因此它具有0%～100%的数值。0%说明没有光照，那么就会是黑色。 如果你的本行并不是设计师或者刚入行不久，在给安卓应用配色的时候一定会犯迷糊，不知如何选择。幸好Google已经考虑到了这点。它从360度的色环当中，为大家选择出了非常适合做界面设计的色调，并通过调整这些色调的饱和度和亮度，得到了一系列可以与主色调搭配和谐的颜色（实际上，这些色调与主色调可能有细微的偏差，比如说3度）。这些颜色放在一起，被形象的叫做调色板。 例如， 这些颜色都给出了对应的RGB数值，也给出了它们自己的名字，例如500，100，200，……，A700，数值越高，颜色越深。其中带A的，表示这个颜色推荐用来作为Accent Color（Accent color接下来会马上介绍到。）。 通过数字给颜色编号，这是为了方便设计师与开发者之间的沟通，给这些颜色取的名字。当他们谈论某个颜色的时候，只需要说出颜色的名字，大家脑中就会产生一个直观的印象。如果他们讲RGB值，大家都会觉得很难想象。 选择颜色通常来讲，一个应用界面当中，不要超过三种不同的色调，否则色调的差异就会过多的吸引使用者的注意，把关注点从内容上分散到各个不同的颜色上去了。 为了简化设计师的工作，Google的Material Design只需要选择Primary Color Primary Dark Color Accent Color三种颜色，就能确定整个应用的整体配色方案。 当设计师要给一个应用选择颜色的时候， 可以会从色环当中选择一个设计师认为合适的颜色。 也可以从Google提供的调色板中选取。这些颜色都是Google千挑万选后的结果，如果大家没有特别的原因，就使用这种表现稳健的颜色吧。 Primary ColorPrimary Color是一个应用使用最为广泛的颜色，它决定了一个应用整体的基调。界面中很多的元素都会使用到这个颜色。 比如，主颜色选取Indigo 500。 Primary Dark Color选定主颜色之后，通常还会在主颜色的附近，选择一个暗色作为搭配，例如Indigo 600～900作为深色。这个颜色通常只是体现在状态栏的颜色上。 除了暗色，有时还需要使用与主颜色相配合的亮色，例如Indigo 500作为主色之后，Indigo 50～400，都是亮色可选的对象。 Accent ColorAccent Color是与Primary Color完全不同的一个色调，用来吸引用户的注意力，比如用在按钮、进度条等等需要用户关注的、有交互功能的组件上面。如果Primary Color与Accent Color是不同色调，设计师可以自由的选择；如果Primary Color与Accent Color都是同一种色调，那么确定Accent Color的时候，通常使用Google调色板中名字里带A的颜色，例如A100～A700. 常用工具使用Google提供的调色板进行配色的时候，如果能够快速的查看配色完成后的效果就好了。 Material Palette为我们提供了这样的方便。当选中期望的Primary Color和Accent Color以后，右边的预览界面就会立刻看到搭配的效果。确认搭配方案之后，还可以下载配色的方案到本地，便于将调色板导入界面设计的软件当中直接使用。","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"2 界面布局","slug":"2_设计原理/2_界面布局","date":"2017-01-05T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/2_界面布局/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/2_界面布局/","excerpt":"","text":"界面布局布局涉及到应用界面的整体。布局的层次感和逻辑，可以通过阴影来体现。 举个例子。在一张纸当中，增加一条折痕，一个区域就分成了关联性很强的两个区域， 将一张纸盖在另一张纸之上，就像是搭台阶一样，上层会在下层投下阴影，这两张纸代表了逻辑不同的两个区域， 纸张在z轴的位置，被称作Elevation，很形象的比喻了纸片相对于别的照片被提升了起来。 尺寸的度量张纸片之间的距离产生阴影，那么距离用什么来衡量呢？要解答这个问题，我们首先要知道像素-px，物理尺寸-inch，像素密度-dpi和密度无关像素-dip这几个概念和它们之间的关系。 安卓系统提供了几种度量屏幕的单位： px：以像素为单位进行设置，屏幕上每一个点，就是一个像素，例如一部安卓手机，屏幕像素是1920 x 1080，就是说屏幕高度有1920个像素点，宽度有1080个像素点，但是在安卓系统中，最好不要使用这个单位来设置尺寸，而是用dp； sp：用于字体大小的设置，它可以让字体大小根据用户在设置中的设置，进行缩放； dp：密度无关像素，这是在布局和控件中应该使用的单位； dp的引入如果用px为单位设定设备区域的大小，通常会有很大的问题。 假设有两个物理尺寸都为5寸大小的屏幕，它们的屏幕分辨率不同，一个是1080*1920，而另一个却是450*800. 如果指定一个按钮的大小为200px长，200px宽，那么它们的显示效果就如下图。很明显，两者的差别也太大了，界面就严重变形了。所以，想让一个区域的大小在不同屏幕的上显示的都差不多，就需要考虑像素密度。为了显示同样的长度，在密度大的屏幕上，使用到的像素就要多一些，在密度小的屏幕上，使用到的像素就要少一些。 所以为了解决这个问题，安卓引入了dip的概念－device independed pixel－简称dp。 dpi的定义在近一步介绍dp之前，要先讲讲dpi。dpi叫做屏幕像素密度，就是每英寸有多少个像素点。我们用简单的数学原理-勾股定理就能算出刚才两个屏幕的dpi，一个是440dpi，另一个是184dpi。 注意，dpi与dip(dp)写法很像，千万不要混淆了，前者和密度有关，后者与像素有关。 dpi的划分安卓使用dpi为160的数值作为一个基准－－baseline, 如果一个设备的dpi刚好等于这个基准，那么它就是mdpi设备； 如果一个设备的dpi是这个基准的1.5倍，那么它就是hdpi设备； 如果一个设备的dpi是这个基准的2倍，那么它就是xhdpi设备； 如果一个设备的dpi是这个基准的3倍，那么它就是xxhdpi设备； 这就是划分不同屏幕密度的依据。 像素密度类型 像素密度大小 与Baseline比值 mdpi 160 1 hdpi 240 1.5 xhdpi 320 2 xxhpi 480 3 按照这样的约定划分， 刚才1080*1920的屏幕应该属于xxhdpi类型； 450*800的屏幕应该属于mdpi类型； 现在的安卓手机几乎都在往高清屏幕发展，所以xhdpi和xxhdpi是最为常见的设备类型。 dp与px的关系安卓引入了dp(dip)的概念之后，实际显示的像素就可以通过下面这个公式计算出来 px = dp * dpi / 160。 相同dp的情况下，密度大的设备，实际像素就占的大，密度小点设备，实际像素就占用小了。因此使用dp这个单位后，按钮在两种不同的屏幕上的实际显示大小，几乎就是一样的了。 例如刚才两种屏幕。如果我指定按钮的大小为200dp*200dp，那么它们在各自的屏幕上占用的实际像素分别是230px*230px与550px*550px，真实设备上看上去的确差不多。 所以，我们以后在设计界面布局的时候，就可以在标准大小（mdpi类型，尺寸为360dp*640dp）的屏幕上，使用dp为单位进行设计就可以了。 了解了安卓系统使用的尺寸衡量标准以后，我们就可以开始研究布局的逻辑区域划分了。 布局的整体划分安卓系统的界面大致可以分成三个部分：状态栏、内容区域、导航栏。 状态栏显示电池电量、手机信号、通知等信息。 导航栏显示返回、主界面、最近打开等三个虚拟按钮。 不过很多设备通过硬件按钮实现了这三个功能，所以就没有虚拟按键了。 内容区域就是给程序使用，显示程序自身内容的地方。它里面的内容也是像纸张一样，一层一层的堆放着的。 正如前面提到的那样，这三个区域也是像纸片一样，是层叠起来的，在z轴上存在空间关系。 内容元素状态栏和导航栏的各个属性都是系统的，无法去进行z轴位置的控制，因此我们不必太过关注。各种不同的应用使用内容区域来显示各自的内容，这才是我们要讲的重点区域。 虽然这个区域的内容怎么显示都是由各个应用说了算，但是Material Design给出了推荐的设计。 在内容区域当中，可以通过折痕、阴影等方式将这些区域划分成不同的逻辑块。 下面是一个典型的Material Design布局（只是一个典型，并不是都这样，具体的布局方式还是要设计师来设计）。 AppBar每个应用都有一个标题栏，叫做AppBar，它不仅可以显示这个应用的名称，也可以把更多的操作-Action放在上面，比如搜索，分享，更多等动作。 它的位置处于z轴4dp处。 Float Button悬浮按钮是Material Design中一个很重要的特色。它是一个圆形的按钮，悬浮于内容区域的最上面。当我们按下这个按钮的时候，它就会进一步的浮动到更靠上的位置。 当它没有被按下单时候，位于界面布局的z轴上6dp处，当它被按下单时候，z轴位置被调整到12dp处 其他除了上面的提及的几种内容元素意外，安卓系统还提供了很多别的元素，比如Dialog Picker Menu Button等等，它们在z轴上都有自己的位置， 至于每个元素在Material Design中长什么样，我们会在后面的章节介绍。 除了前面介绍的这种典型布局，还有很多其他的布局，我们也是放到后面专门的章节来介绍。","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"1 设计原理","slug":"2_设计原理/1_设计原理","date":"2017-01-04T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"2_设计原理/1_设计原理/","link":"","permalink":"http://booktest.anddle.com/2_设计原理/1_设计原理/","excerpt":"","text":"设计原理设计是一门让人感觉很抽象的艺术。设计需要从两个方面来考虑问题： 实用：体现在功能上和交互性上； 美观：体现在界面的布局，色彩的搭配，字体的运用上； 对于我们的安卓应用来讲，设计的目的就是要体现需要显示给用户看的内容的价值，将用户所有的注意力都吸引到要呈现的内容之上。 对安卓应用来讲，这些内容无非就是：文字和多媒体（视频、图片等等）。 在这里游戏就不是我们讨论的范畴了。 围绕内容，Google为此提出了一套针对于此的设计原则。 Material Design简介Material Design是Google专门为安卓应用开发而规定的一套设计语言。 在Material Design提出以前，安卓系统当中存在过两种不同的设计风格，每种风格都有暗Dark 和亮Light两种表现形式。例如， 安卓系统最早问世的时候，界面风格是这样的， 后来在经历到安卓3.0点时候，设计了Holo主题， 需要注意的是，当时这两种风格只能被称作安卓应用的主题，还没有上升到设计语言的高度。因此当时的应用，交互界面被设计的千奇百怪，拿着安卓手机，打开不同的应用（除了Google原生的应用），感觉很不协调。例如应用A的新建按钮放在左上角，而应用B的新建按钮又放在右下角，虽然可以这样设计，但是用户的使用体验不一致。 为了减少这种设计分裂的问题，Google从安卓5.0起，就提出了名叫Material Design的设计语言，倡导各位App的设计者，根据Material Design规范中的建议来开发应用，不要都去自创门派。 这套规范就规定了应用的， 实用性-交互方式； 美观-布局、配色等等 为了与Material Design配合，从安卓5.0开始，Google中安卓系统当中增加了Material主题。因此系统当中形成了原始主题、Holo主题、Material主题三者并存的状态。 从安卓5.0开始，Google强烈建议大家按照Material Design进行开发了。 当然这个规范也只是个建议，开发者实在不去使用，Google也没有办法 为了让Material Design的设计规范能容易的被程序开发者实现，Google在开发工具上也给出了相应的支持，从界面布局的设计到控件的使用，都提供了全套的支持。我们讲在后面程序开发的部分，对这些技术支持进行详细的介绍。 Material Design的理念在Material Design存在以前，我们已经经历过了拟物设计。最早的iOS系统就是拟物设计典型的代表。 后来出现了扁平化设计，将以前立体的设计都拍扁，平摊在屏幕之上。 后来Google为了保持扁平化设计简洁，增加交互的立体感，提出了Material Design。 Material Design是基于印刷品的理念来设计的。真实世界中，我们依靠阅读获取大量知识，Google将我们的屏幕想象成印刷着各种内容的载体。书是一页一页的，对应着屏幕上呈现内容的每一个区域，每个内容区域就是一种材质。它们就像一张张纸片，通过纸片摆放的位置、纸片间的运动，展示应用中不同的功能。 例如，通过两张纸片通过阴影的效果，反应了它们在3D空间中的位置关系， 对位于不同层次的一张纸片来说，它的移动不会影响到另外层次的纸片。 因此可以想见，采用Material Design的应用，界面的层次感应该是呈堆叠状的， 因此我们说MaterialDesign将扁平化与位置关系结合了起来。 Google给Material-纸片定义了一些基本的特点： 每一张纸片的厚度都是1个单位（就是1dp，dp的概念我们将在后面详细介绍）； 纸片之间都有z轴方向上的位置关系，有阴影效果； 纸片上显示的内容是直接印在纸片上的，没有厚度，内容显示的区域限定在这张纸片之上； 纸片上下层关系一旦确定就不能变化了，不允许纸片上下移动时的穿透； 纸片的形状和大小是可以变化的； 纸片不能被折叠 设计的秘诀当设计师拿到框线图之后，就需要使用Material Design的设计语言来改造。所以，对于刚接触设计的我们来讲，要首先要学习的就是Material Design的种种套路。 不要被Material Design的概念吓唬到，将它分解成我们熟悉的内容，逐个掌握它的设计精髓。 内容的展示Material-纸片，是用来展示具体内容的。 这涉及到了， 字体的选择、字体大小的设置、文字内容的排列方式。 图片的大小区域、展示方式。 逻辑的体现配色以及纸片的位置关系，是用来体现内容与交互之间逻辑关系的。 这涉及到了， 给material纸片配色。 界面模块的布局方式。 系统图标的样式、放置规则。 动画效果的设定。 声音、震动等辅助效果的使用。","categories":[{"name":"第2章 设计原理","slug":"第2章-设计原理","permalink":"http://booktest.anddle.com/categories/第2章-设计原理/"}],"tags":[]},{"title":"2 功能","slug":"1_创意/2_功能","date":"2017-01-03T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"1_创意/2_功能/","link":"","permalink":"http://booktest.anddle.com/1_创意/2_功能/","excerpt":"","text":"功能的确定产品的功能并不是在确定了产品之后才开始考虑的，功能与创意选择其实是一个“你中有我，我中有你”的关系。为了体现产品设计的阶段性，我才将它单独提出来分析。 这里讨论的产品功能，是建立在选定了某个基础之上的。比如我们之前选定了天气预报，那么就将产品功能围绕天气预报讨论。 头脑风暴一开始，我们可以对产品进行一次头脑风暴，找出它的核心功能和可以拓展的外延。 什么是头脑风暴？ 简单来说，就是给定一个主题，让一群身份不同的人漫无边际的想一些点子。之后将这些点子归类整理，进一步讨论它们的可行性和重要性，最后形成一个提案。 在我们这里，可以简单的理解成：为了挖掘产品的潜在的功能，我们先不管能不能实现，不管实现了有多大的意义，不管要付出多大的代价，是把我们能想到的功能都找出来。 进行头脑风暴的人最好由不同行业、不同背景的人组成，这样考虑的问题就能多角度，更全面。不过即使只有你一个人也行，毕竟你要做一个能让自己满意的产品才会感觉到快乐，对吧。 方法1可以将我们风暴的内容，写到小纸条上，贴在黑板上， 风暴结束后，将这些小纸条按照内容进行分类整理出来， 最后按照功能的重要性、相关性，形成我们的功能列表， 方法2在电脑上用思导图软件，将风暴的内容写在上面，例如使用Mac平台上的MindNode， 然后通过拖动的方式将它们进行整理， 最后再形成功能列表。 除了头脑风暴，我还可以去软件市场下载同类型的产品，逐个研究它们具有哪些功能，对那些确实优秀的功能点加以优化，做出修改，进行微创新。 举例我们先来风暴一下天气预报要有些什么样的功能： 能够连接网络，从网络获取数据，用来显示； 能够将获取的数据，例如当日的温度、湿度、风向、是否晴天下雨、紫外线指数、穿衣指数、污染指数等等，显示出来； 可以显示当日之后多天的预报，采用曲线图的方式呈现； 可以显示当日之前任何日期的实际天气情况； 能够设定当前的位置，获取天气情况； 能够配合当前的天气，显示一张合适的背景，比如下雨的时候，背景就是一张雨景的照片； 能够配合当前的天气，显示动态的背景，比如下雨的时候，背景就是雨水滑落的动态效果； 能够接收提醒，比如下雨了，发出一个通知提醒用户带雨伞； 能够提供一个桌面小工具，在桌面就能查看到天气信息； 天气数据到的源可以选择，阿里提供的、雅虎提供的、腾讯提供的、百度提供的，都可以切换； 虽然我们还可以风暴出很多天气预报可以具有的功能，但是作为第一个例子，我们暂时就列出这么多吧。 接下来将功能分类，有的分类项也许有重叠，但是没有关系， 外观类： 配合天气显示的背景：动态图或者静态图； 显示温度、湿度、风向、天气、紫外线指数、穿衣指数、污染指数； 未来天气的预报，采用变化的曲线表示； 桌面小工具； 功能点： 通过网络获取天气数据； 多个天气数据源的选择； 多个地点的位置设定； 桌面小工具 提醒功能； 多天预报； 历史天气查询； 选定功能列出一堆的功能后，我们就要考虑给他们排列个重要程度了，确定哪些功能是必须的，哪些是可选的，他们实现起来复杂度有多大。 对于复杂度很高的功能，我们可能还要进行一次头脑风暴，理清楚它的重要性，看能不能把它分解成相对简单的功能来加入。如果不能，那么可能就得暂时放弃了。 有的功能可能还要依据现有的素材，看能不能提供，例如紫外线指数，如果网络端都没有这样的参数，那写在功能列表里面也是没有用的。由此我们也可以看出，头脑风暴之后，多种成员参与的重要性，如果有一位开发者，他可以很快的判断这个功能点从技术上讲实现起来是否可行。 技术验证坦白的讲，技术验证并不是在功能确定之后才开始进行的。它应该在确定功能的时候给予技术上的配合，告诉方案的提出者：“这样的功能从技术上讲是可以（不可以）办到的”。 能越早回答这样的问题，就能越早发现并减少项目的风险。 在天气预报当中，最需要验证的并不是设计出一个界面设计出来后能不能做出来，而是去哪里获取天气数据。 天气数据才是功能的核心。从哪里获取数据呢？ 我们没有自己的观测站，所以数据肯定是要从其他公开的渠道获取：通过网络蜘蛛爬取；通过第三方提供的标准API接口获取，例如阿里提供、雅虎提供、腾讯提供或者百度提供。 假如我能获取到第三方的数据，那么我是否需要自己建设一个提供天气信息的服务器呢？ 就我个人来讲，我希望使用自己的服务器提供天气数据，把收集到的数据都整理到自己的服务器上，一旦某一处的数据出现问题，还可以自动切换到别处的，拥有更好的健壮性。 此外，我也可以自己定义天气数据的查询方式和回传内容，可操控性更好，不会担心数据源的格式发生改变，造成应用获取数据出错的问题。 因此我决定搭建一个服务器，为大家提供这样的数据获取方式，就不麻烦大家将精力分散到与安卓入门开发关系不大的领域去了。 不过，我这里提供的数据都是构造出来的，并不能真实的天气数据，目的只是为了帮助大家学习开发一款应用。毕竟去抓取网络数据有要花费额外的心思，偏离了我的本意。 至此，我们不需要为数据展现的内容而担心了，只要能想到的数据，我都可以在服务器端通过构造产生。之后的界面设计，就需要根据这些能获取到的信息来设计， 数据项 描述 取值 实时温度 当前查询时的天气温度 整数数值 实时风力 当前查询时的风力大小 0-17级 实时风向 当前查询时的风向 东 西 南 北 东南 东北 西南 西北 实时天气 当前查询时的天气状况 晴天、雨天、多云、多云间晴、雾、雪 当日温度范围 当日温度范围 整数数值范围 实时空气质量 当前查询时的空气质量 优 良 轻度污染 重度污染 不利于生存 空气湿度 当前查询时的空气湿度 0-100% 运动指数 当前查询时的运动指数 非常适合 适合 不适合 紫外线指数 当前查询时的紫外线强度 强 中 弱 未来5天预报 未来5天天气状况、最高最低温度 功能筛选下面，我们就来分析一下这些功能，并为它们的重要性和难易程度作出评价。评价的原则很简单：我们只是为了展现开发的各个关节，所以尽量把功能做的简单，降低我们第一次的学习门槛 外观类： 项目 分析 难易程度 重要性 静态图背景 放一张静态图片即可 易 中 动态图背景 设置循环的动画效果 难 中 显示温度、湿度、风向等天气指数 具体显示哪些数据依赖于数据源 易 高 天气变化的曲线表示 这需要一个做曲线图的特殊组件 难 中 桌面小工具 安卓系统提供了桌面工具的框架机制 中 中 功能点： 项目 分析 难易程度 重要性 通过网络获取天气数据 这功能必须有，不然就没有显示的内容 易 高 多个天气数据源的选择 访问自己架设的服务器，不需要用户去选择 易 低 多个地点的位置设定 刚开始简化一点，只提供当地的天气预报，由服务器决定 易 低 桌面小工具 安卓系统提供了桌面工具的框架机制 中 中 提醒功能 需要网络端支持主动的推送数据 难 低 多天预报 天气类App的标配 易 高 历史天气查询 意义不大，用户更关心未来的天气 中 低 我们把重要性低的、开发难的功能暂时放一放，于是得到了下面的功能清单： 通过网络获取天气数据； 显示天气预报的位置； 显示当前时刻的：温度、温度变化范围、湿度、风向、风力、天气、紫外线指数、运动指数等信息； 未来5天天气预报，包括天气状况、温度变化范围； 此外，为了近一步简化开发，我们还可以假定：所有的数据都是从网络获取，如果没有网络，那么就不能获取到天气信息。也就是说获取到数据不需要存储到手机上，这一点又降低了开发的难度。 功能流程确定好功能后，就要根据这些功能，为应用设计一套使用的逻辑，比如需要几个界面，每个界面做些什么事情，这些界面都要覆盖到所有的功能点。 天气预报的流程也许就是这样： App启动之后，自动去网络获取信息； 当日天气信息和近日的预报信息需要展示到界面上，但是具体怎么展示就要看设计阶段的设计方案了； 流程的设定和设计阶段有一定的交集。前者只是一个原则上的草图，而后者将会从设计的角度打磨出一款精品。 这时候的草图叫做框线图，就是一个手稿，一个示意图。这张图还要交给设计师，和设计师一起讨论设计的方案，再由设计师重新操刀，进行大刀阔斧的修改，将草图蜕变成真正的产品形态，最后形成高保真图、产品原型和UI素材。 下一版功能对于那些我们没有被选定进来的功能，我们可以将它们放到该App下个版本当中。例如，位置的设定，桌面小工具，天气预报的曲线图等等。 未来版本的天气预报App不仅需要修复之前存在的设计缺陷，也要加入新的功能，让用户获得更好的使用体验。","categories":[{"name":"第1章 创意","slug":"第1章-创意","permalink":"http://booktest.anddle.com/categories/第1章-创意/"}],"tags":[]},{"title":"1 创意","slug":"1_创意/1_创意","date":"2017-01-02T01:00:00.000Z","updated":"2017-02-04T14:54:14.000Z","comments":false,"path":"1_创意/1_创意/","link":"","permalink":"http://booktest.anddle.com/1_创意/1_创意/","excerpt":"","text":"创意我们总会羡慕、崇拜那些创造出了伟大产品的人。提到乔布斯，大家一定会竖起大拇指，他创造出了革命性的ipod、macbook、iphone、ipad等等极具创意、使用方便、同时又设计优雅的产品。 对于从事软件行业的人来讲，最有成就感的事情莫过于开发出一款让人交口称赞的应用软件了。 来源好的产品要有好的创意，人对创造产品的创意来自于哪里呢？ 我觉得产品的创意来源于三个方面： 最直接的创意来源于自己的实际需要。比如，曾经有位程序员想写一部小说，他尝试了市面上很多文字编辑器，觉得都不能满足自己的需要，于是就自己开发了一款。最后，他原打算要写的书没有了下文，但是却创造出了Mac系统上非常经典的应用-Ulysses，成为了很多作家的创作利器。Ulysses将写作爱好者的写作体验带入了天堂。 更多的创意来源于对现有生活的归纳总结。用智能手机听音乐，几乎是每个使用者的刚性需求，所以开发一款音乐播放器的灵感就很容易跑进我们的大脑。 还有的创意来源于对现有产品的差异化。例如音乐播放器这样的刚需应用有很多，QQ音乐、阿里音乐，虾米音乐，酷狗音乐，安卓系统自带的音乐播放器等等。不过网易云音乐在众多的音乐播放器中脱引而出，依靠的正是它对其他类似应用差异化的挖掘–基于音乐的社交模式。 标准好的创意是什么？我的理解是： 实实在在的解决了一个问题，至少它能让我们觉得方便了我们的工作或者生活。 它的解决方法很简单，不需要复杂的操作，也许简单的让人意想不到。 产品的外观设计的深入人心，一看到它就有使用的欲望。 记录工具创意宝贵，可能我们一转眼就把它忘记了，所以我们要能随时将它们记录下来， 最传统的方式就是笔和纸，好记性比不过烂笔头，随时带着一个小本子和笔，一旦有了产品的灵感，就把它记录下来。 iPad和apple pencil也是一对极好的搭档，用电子的方式做记录能便于我们做后继的整理。iPad上有很多好用的笔记类App，例如我正在使用的Notablitiy。 手机是我们形影不离的帮手，你可以用手机中的记事本，记录下自己的想法。如果还觉得麻烦，可以通过录音，把它们保留下来。 有了创意，我们下一步就需要将它们整理起来，看看它们实现的可行性。 选择创意怎么来，我是不能帮助大家的，这只能靠大家各自的能力、经验、体验和运气了。我只能帮助大家如何从众多的创意中选择一个适合自己的。 并不是所有的创意都有让你去实现的价值。也许你有一个很好的创意，但是要花费很大的经济成本，那对你个人来说是有很大风险的，你不得不放弃。也许你有另外一个创意，但是也许别人已经在做了，只是你不知道而已，今后撞车的可能性很大。所以我们需要将它们筛选一遍，选择最适合的一个。 怎么选择呢？ 我想选择的标准很多，主要还是看你的目的是什么，你为了实现这个创意，愿意付出多大的代价： 为实现创意投入的资金是多少； 为实现创意投入的精力是多少； 实现创意的目的是为了自己的个人爱好，还是说为了靠它养家糊口； 当我们面对众多诱惑需要进行选择的时候，你可以把要选择的对象横向铺开，像我们网上购物时比较商品一样，列出它们各自具备的优点和缺点，比较它们各自的异同，找出你最偏向的那个。 举个例子这本书将把理论和实践结合在一起，所以我需要一个合适的创意做为我们后面讲解的例子。 首先明确我的目标。这个例子不能太复杂，门槛太高，会吓走很多人；但是也不能过于傻瓜，要涵盖一定的知识点，否则读完以后脑袋中还是空空如也。 计算器、视频播放器、记事本、音乐播放器、天气预报，都是一些经常可能用到的小应用。它们开发起来都不太困难，只是类型不同。 对于没有进行过安卓开发的你来说，也许根本就不知道是否困难，至少要亲自做一次之后才能知道。这里我就自己的经历来说，它们的实现还是很简单的，大家不必惊慌。 然后将这些项目在脑中进行横向对比后，给他们的各个项目点按照难易程度从1到5打分: 项目 计算器 音乐播放器 记事本 视频播放器 天气预报 体现安卓设计 1 3 5 2 4 技术简单 5 3 1 2 4 界面布局简单 5 2 1 3 4 合计得分 11 8 7 7 12 上面所列出的项目和得分都是非常主观的，项目是根据开发者的目标来制定，而得分完全根据开发者个人的偏好和经验。所以要做到评估准确，最好的办法就是多做项目，增加自己的经验值。 通过上面的评比，我决定选择天气预报来做为本书讲解的范例。","categories":[{"name":"第1章 创意","slug":"第1章-创意","permalink":"http://booktest.anddle.com/categories/第1章-创意/"}],"tags":[]}]}