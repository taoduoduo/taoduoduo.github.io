<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从设计到实现</title>
  <subtitle>手把手教你做android应用开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://booktest.anddle.com/"/>
  <updated>2017-02-17T03:11:28.000Z</updated>
  <id>http://booktest.anddle.com/</id>
  
  <author>
    <name>安豆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>18 调整列表显示</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/18_%E8%B0%83%E6%95%B4%E5%88%97%E8%A1%A8%E6%98%BE%E7%A4%BA/"/>
    <id>http://booktest.anddle.com/4_开发/18_调整列表显示/</id>
    <published>2017-02-12T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调整列表显示"><a href="#调整列表显示" class="headerlink" title="调整列表显示"></a>调整列表显示</h1><p>现在界面上列表的<code>异常显示</code>根本原因在于：将<code>ListView</code>放到了<code>NestedScrollView</code>之内。<code>NestedScrollView</code>内部要使用列表的话，必须使用<code>RecyclerView</code>。</p>
<p><code>RecyclerView</code>是我们之前提到的<code>Material Design</code>开发支持库中的一个。从它的名字可以看出，它的优点在于提高了数据项刷新、滚动的效率，减小了系统资源的占用。听起来有点抽象是吧，那就记住它的效率更高就行了，实现的原理我们就不去深究了。</p>
<p>使用<code>RecyclerView</code>之前我们要确定它是否已经被加载到了项目中。</p>
<p>由于之前我们已经添加了<code>设计支持库</code>-<code>compile &#39;com.android.support:design:24.2.1&#39;</code>，所以<code>RecyclerView</code>所使用的<code>com.android.support:recyclerview-v7:24.2.1</code>也已经被自动加载。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_load_recyclerview_support.png" width="250" alt=" weather_app_load_recyclerview_support"></div>

<h2 id="替换ListView"><a href="#替换ListView" class="headerlink" title="替换ListView"></a>替换ListView</h2><p>将<code>activity_main.xml</code>中原来的<code>ListView</code>，用<code>RecyclerView</code>替换，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">    <span class="attr">......</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">        </div><div class="line">        ......</div><div class="line">    </div><div class="line">        <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">            <span class="attr">......</span>/&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_list"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<p>修改<code>MainActivity.java</code>中关于原来<code>ListView</code>的部分，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mWeatherMoreInfoListView;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        ......</div><div class="line">        </div><div class="line">        mWeatherMoreInfoListView = (RecyclerView) findViewById(R.id.weather_more_info_list);</div><div class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(MainActivity.<span class="keyword">this</span>);</div><div class="line">        mWeatherMoreInfoListView.setLayoutManager(layoutManager);</div><div class="line">        </div><div class="line">        ......</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="重新设计Adapter"><a href="#重新设计Adapter" class="headerlink" title="重新设计Adapter"></a>重新设计Adapter</h2><p>我们将<code>ListView</code>替换成了<code>RecyclerView</code>，那么它们各自对应的<code>Adapter</code>也需要做些调整。<code>RecyclerView</code>需要与继承自<code>RecyclerView.Adapter</code>的<code>Adapter</code>配合使用。定义个<code>WeatherMoreInfoAdapter</code>，</p>
<ol>
<li><p>让<code>WeatherMoreInfoAdapter</code>继承自<code>RecyclerView.Adapter</code>，并重写3个必须实现的接口，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>增加<code>Adapter</code>的构造函数，让它能保持传入的要显示的数据项，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;WeatherMoreInfo&gt; mData;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfoAdapter</span><span class="params">(List&lt;WeatherMoreInfo&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mData = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>getItemCount()</code>要返回当前数据的项数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mData.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>RecyclerView</code>之所以能够提高运行效率，最主要的原因是它依靠一个<code>Holder</code>保存了对数据项界面中各个布局的引用，每次更新界面的时候，不需要再去<code>findViewById()</code>了。</p>
<p> 所以我们要：</p>
<ol>
<li><p>定义一个<code>ViewHolder</code>，让它继承自<code>RecyclerView.ViewHolder</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将数据项的布局在首次创建的时候保存起来，避免下次重复<code>findViewById()</code>，提高效率，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> ImageView icon;</div><div class="line">        <span class="keyword">public</span> TextView description;</div><div class="line">        <span class="keyword">public</span> TextView value;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(v);</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.icon = (ImageView) v.findViewById(R.id.weather_more_info_icon);</div><div class="line">            <span class="keyword">this</span>.description = (TextView) v.findViewById(R.id.weather_more_info_description);</div><div class="line">            <span class="keyword">this</span>.value = (TextView) v.findViewById(R.id.weather_more_info_value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>当<code>WeatherMoreInfoAdapter</code>需要创建数据项界面的时候就会自动触发<code>onCreateViewHolder()</code>的调用，获取一个<code>ViewHolder</code>。</p>
<p> 因此我们需要在这里创建布局界面，并把界面元素缓存到<code>ViewHolder里面</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View v = LayoutInflater.from(parent.getContext())</div><div class="line">            .inflate(R.layout.weather_more_info_item_layout, parent, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">        ViewHolder vh = <span class="keyword">new</span> ViewHolder(v);</div><div class="line">        <span class="keyword">return</span> vh;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>Adapter</code>更新数据是，会触发<code>onBindViewHolder()</code>，让我们更新界面，</p>
<ol>
<li>从<code>mData</code>取出要显示的数据；</li>
<li>将<code>RecyclerView.ViewHolder</code>转换成我们自定义的<code>ViewHolder</code>；</li>
<li><p>设置数据到界面元素上；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        WeatherMoreInfo info = mData.get(position);</div><div class="line">        ViewHolder viewHolder = (ViewHolder) holder;</div><div class="line">        viewHolder.icon.setImageResource(info.typeResId);</div><div class="line">        viewHolder.description.setText(info.description);</div><div class="line">        viewHolder.value.setText(info.value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<p>至此新的<code>Adapter</code>就设计完成了。</p>
<h2 id="使用WeatherMoreInfoAdapter"><a href="#使用WeatherMoreInfoAdapter" class="headerlink" title="使用WeatherMoreInfoAdapter"></a>使用WeatherMoreInfoAdapter</h2><p>根据新实现的<code>WeatherMoreInfoAdapter</code>，修改使用它的方法，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mWeatherMoreInfoListView;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        ......</div><div class="line">        </div><div class="line">        mWeatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        WeatherMoreInfoAdapter adapter = <span class="keyword">new</span> WeatherMoreInfoAdapter(mWeatherMoreInfoList);</div><div class="line">        mWeatherMoreInfoListView.setAdapter(adapter);</div><div class="line">        ......</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将程序运行看看，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase_2_complete.gif" width="250" alt=" weather_app_phase_2_complete"></div>

<p>我们的天气应用似乎已经开发完成了！！！</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>千万别忘记我在代码中留下的种种<code>bug</code>，我们将在后面的单元-关于测试章节将这些<code>bug</code>都找出来。让它成为真正可用的应用程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;调整列表显示&quot;&gt;&lt;a href=&quot;#调整列表显示&quot; class=&quot;headerlink&quot; title=&quot;调整列表显示&quot;&gt;&lt;/a&gt;调整列表显示&lt;/h1&gt;&lt;p&gt;现在界面上列表的&lt;code&gt;异常显示&lt;/code&gt;根本原因在于：将&lt;code&gt;ListView&lt;/code&gt;
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>17 Appbar动效</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/17_Appbar%E5%8A%A8%E6%95%88/"/>
    <id>http://booktest.anddle.com/4_开发/17_Appbar动效/</id>
    <published>2017-02-11T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Appbar动效"><a href="#Appbar动效" class="headerlink" title="Appbar动效"></a>Appbar动效</h1><p>之前的改造完成后，<code>Appbar</code>还不能具有滑动的效果。</p>
<p>要具备联动的滑动功能，还需要做3个地方的修改。</p>
<h2 id="使用CoordinatorLayout"><a href="#使用CoordinatorLayout" class="headerlink" title="使用CoordinatorLayout"></a>使用CoordinatorLayout</h2><p><code>CoordinatorLayout</code>是<code>Material Design</code>里面，所有滑动渐变效果必用的布局，它能根据内部某个元素滑动的百分比来控制内部另一个元素的属性变化。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/coordinatorlayout_explain.png" width="200" alt=" coordinatorlayout_explain"></div>

<p>要实现<code>Appbar</code>随着界面滑动而进行变化，</p>
<ol>
<li><p>必须引入<code>CoordinatorLayout</code>，使之替换<code>activity_main.xml</code>中，最外层的那个<code>LinearLayout</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.anddle.weatherapp.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">    <span class="attr">......</span>&gt;</div><div class="line">    </div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    ......</div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>给<code>CollapsingToolbarLayout</code>，增加<code>app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;</code>属性，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div></pre></td></tr></table></figure>
<p> 这两个属性说明要让<code>Appbar</code>可以滑动，并且<code>Appbar</code>完全折叠起来后，<code>Toolbar</code>要能够显示出来（假如没有设置<code>exitUntilCollapsed</code>，<code>Toolbar</code>是可以被完全折叠隐藏起来的）。</p>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_add_CoordinatorLayout.gif" width="250" alt=" weather_app_add_CoordinatorLayout"></div>

<h2 id="使用NestedScrollView"><a href="#使用NestedScrollView" class="headerlink" title="使用NestedScrollView"></a>使用NestedScrollView</h2><p>使用<code>CoordinatorLayout</code>之后可以看到，整个界面变形了，<code>天气预报区域</code>和<code>更多天气信息区域</code>整体向上移动到了顶部重叠起来。</p>
<p>这是因为<code>CoordinatorLayout</code>本质上是个<code>FrameLayout</code>，它内部的组件当然会堆叠起来。</p>
<p>要解决这个问题就要<code>NestedScrollView</code>出场了。它能向<code>LinearLayout</code>一样将组件按照顺序竖直排列。并且与<code>AppBarLayout</code>形成联动。</p>
<ol>
<li><p><code>NestedScrollView</code>的内部只能放一个子布局或者控件，所以必须把<code>天气预报区域</code>和<code>更多天气信息区域</code>做成一个整体，放进一个<code>LinearLayout</code>中，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">   <span class="comment">&lt;!--原有的布局--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"@dimen/forcast_height"</span></div><div class="line">       <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"@dimen/forcast_margin"</span></div><div class="line">       <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/forcast_margin"</span>&gt;</div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item1"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item2"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item3"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item4"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item5"</span> /&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"@dimen/gap_height"</span></div><div class="line">       <span class="attr">android:background</span>=<span class="string">"#1F000000"</span></div><div class="line">       /&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_list"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将刚创建的<code>LinearLayout</code>放到<code>NestedScrollView</code>中，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">        </div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">       </div><div class="line">       ......</div><div class="line">       </div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>为<code>NestedScrollView</code>添加属性<code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line">        </div><div class="line">    ......</div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<p> <code>appbar_scrolling_view_behavior</code>这个值是<code>Android SDK</code>提供的一个现成的取值。我们暂时只要知道这里必须这样使用就好了。要理解它深层次的含义，必须要系统的讲解<code>CoordinatorLayout</code>的设计思路。这个设计思路我会在将来的专题中去讲，现在大家就先记住使用它的结论吧。</p>
</li>
</ol>
<p>运行看看效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_add_NestedScrollView.gif" width="250" alt=" weather_app_add_NestedScrollView"></div>

<h2 id="更新地理位置"><a href="#更新地理位置" class="headerlink" title="更新地理位置"></a>更新地理位置</h2><p>使用了<code>设计支持库</code>后，<code>地理位置</code>信息不需要单独的布局文件了。它会作为应用的名称进行展示。</p>
<p>所以在更新地理位置的时候，我们只需要更新应用的名称就行。</p>
<ol>
<li><p>给<code>activity_main.xml</code>中的<code>CollapsingToolbarLayout</code>增加一个<code>id</code>-<code>collapsing_layout</code>，便于我们在<code>java</code>代码中获取到它；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_layout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>打开<code>MainActivity.java</code>源码文件，修改<code>updateWeatherDetail()</code>函数，使用<code>CollapsingToolbarLayout</code>的<code>setTitle()</code>方法修改应用的标题；</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">        ......</div><div class="line">        currentTemperatureView.setText(temperature);</div><div class="line">        temperatureRangeView.setText(temperatureRange);</div><div class="line">        </div><div class="line">        CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_layout);</div><div class="line">        collapsingToolbar.setTitle(location);</div><div class="line">        ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_add_loction_update.gif" width="250" alt=" weather_app_add_loction_update"></div>

<hr>
<p>至此，<code>Appbar</code>的滑动效果就完成了。不过大家也能看到，这里引入了一个新的问题：列表内容显示不正确，只有第一项的内容。</p>
<p>这个问题我们在下一节来解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Appbar动效&quot;&gt;&lt;a href=&quot;#Appbar动效&quot; class=&quot;headerlink&quot; title=&quot;Appbar动效&quot;&gt;&lt;/a&gt;Appbar动效&lt;/h1&gt;&lt;p&gt;之前的改造完成后，&lt;code&gt;Appbar&lt;/code&gt;还不能具有滑动的效果。&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>16 改造Appbar</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/16_%E6%94%B9%E9%80%A0Appbar/"/>
    <id>http://booktest.anddle.com/4_开发/16_改造Appbar/</id>
    <published>2017-02-10T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="改造Appbar"><a href="#改造Appbar" class="headerlink" title="改造Appbar"></a>改造Appbar</h1><p>现在我们开始改造<code>Appbar</code>，希望给它添加上滑动效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase_2_complete.gif" width="250" alt=" weather_app_phase_2_complete"></div>

<h2 id="Appbar改造方案"><a href="#Appbar改造方案" class="headerlink" title="Appbar改造方案"></a>Appbar改造方案</h2><p>根据<code>Material Design</code>规范，<code>Appbar</code>可以由3个区域组成，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_area.png" width="250" alt=" appbar_area"></div>

<p><code>天气预报</code>应用会使用到3个区域中的<code>Toolbar</code>和<code>Flexible space</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_bar_area.png" width="250" alt=" weather_app_bar_area"></div>

<p>它们的对应关系，可以使用<code>Android SDK</code>提供的<code>设计支持库</code>来实现，</p>
<table>
<thead>
<tr>
<th>区域</th>
<th>支持库控件</th>
<th>高度</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Appbar</td>
<td>android.support.design.widget.AppBarLayout</td>
<td>300dp</td>
<td>包含Toolbar和可变区域</td>
</tr>
<tr>
<td>Appbar</td>
<td>android.support.design.widget.CollapsingToolbarLayout</td>
<td>300dp</td>
<td>为了Toolbar和可变区域能配合滑动</td>
</tr>
<tr>
<td>Toolbar</td>
<td>android.support.v7.widget.Toolbar</td>
<td>56dp</td>
<td>显示位置信息</td>
</tr>
<tr>
<td>Flexible area</td>
<td>LinearLayout</td>
<td>300dp</td>
<td>放置天气详情</td>
</tr>
</tbody>
</table>
<p>其中，</p>
<ul>
<li><p>在<code>AppBarLayout</code>里面又放入了一个<code>CollapsingToolbarLayout</code>-可以折叠<code>Toolbar</code>的布局。<code>CollapsingToolbarLayout</code>能够让内部的<code>Toolbar</code>和<code>可变区域</code>能配合着滑动，出现设计中的滑动折叠效果。</p>
</li>
<li><p><code>Flexible area</code>可变区域中的内容，就是天气详情界面。</p>
</li>
</ul>
<h2 id="Appbar布局的调整"><a href="#Appbar布局的调整" class="headerlink" title="Appbar布局的调整"></a>Appbar布局的调整</h2><p>移除<code>地理位置</code>：</p>
<p>设计支持库提供的<code>CollapsingToolbarLayout</code>支持中，自动包含了我们之前设计的<code>地理位置</code>信息的展示区域-也就是显示应用的标题。所以我们，</p>
<ol>
<li>将它的布局从之前的布局文件中移除；</li>
<li>修改<code>MainActivity.java</code>的<code>updateWeatherDetail()</code>函数，将涉及到<code>weather_location</code>的代码移除；</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">        TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line">        TextView temperatureRangeView = (TextView) findViewById(R.id.temperature_range);</div><div class="line">        ImageView weatherIcon = (ImageView) findViewById(R.id.weather_icon);</div><div class="line"></div><div class="line">        currentTemperatureView.setText(temperature);</div><div class="line">        temperatureRangeView.setText(temperatureRange);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> iconId = R.mipmap.ic_sunny_cloudy_l;</div><div class="line">        ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加<code>Appbar</code>：</p>
<ol>
<li>将高度原本设置成<code>244dp</code>的<code>LinearLayout</code>修改成<code>AppBarLayout</code>，让它包裹整个<code>天气详情</code>布局；</li>
<li>高度调整为<code>300dp</code>，移除背景颜色和不需要的<code>orientation</code>属性；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--天气详情的布局--&gt;</span></div><div class="line">        ......</div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加<code>CollapsingToolbarLayout</code>：在<code>AppBarLayout</code>内，增加<code>CollapsingToolbarLayout</code>，让它包裹整个<code>天气详情</code>布局；</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">           </div><div class="line">           <span class="comment">&lt;!--天气详情的布局--&gt;</span></div><div class="line">           ......</div><div class="line">            </div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加<code>Toolbar</code>：</p>
<ol>
<li><p>在<code>CollapsingToolbarLayout</code>内，增加<code>Toolbar</code>，让它与整个<code>天气详情</code>布局处于平级；</p>
</li>
<li><p>给<code>Toolbar</code>设置<code>id</code>-<code>app_toolbar</code>;</p>
</li>
<li>高度设置成<code>&quot;?attr/actionBarSize&quot;</code>，这是<code>Android SDK</code>提供的一个值，表示的就是<code>Appbar</code>的高度-<code>56dp</code>；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">           </div><div class="line">           <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/app_toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span>/&gt;</div><div class="line">           </div><div class="line">           <span class="comment">&lt;!--天气详情的布局--&gt;</span></div><div class="line">           ......</div><div class="line">            </div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>?attr/actionBarSize&quot;</code>当中<code>?</code>的用法表示：这个属性的取值，与当前应用使用的到的<code>actionBarSize</code>属性的取值相同；但是<code>actionBarSize</code>取值到底是什么，我们并不需要知道，只要知道系统对这个值有设定就行了，我们的目的是让它与系统值保持一致即可。</p>
<p>修改<code>天气详情</code>布局的上边距：</p>
<p>将上边距从<code>24dp</code>调整为<code>80dp</code>，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">           </div><div class="line">           <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/app_toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span>/&gt;</div><div class="line">           </div><div class="line">           <span class="comment">&lt;!--天气详情的布局--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"80dp"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line">                </div><div class="line">                ......</div><div class="line">                </div><div class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">            </div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_design_appbar_layout.png" width="500" alt=" material_design_appbar_layout"></div>

<p>现在<code>Appbar</code>的布局就调整好了。</p>
<h2 id="启用Toolbar"><a href="#启用Toolbar" class="headerlink" title="启用Toolbar"></a>启用Toolbar</h2><p>我们在布局文件中，使用了<code>Toolbar</code>，希望借此代替程序原有的标题栏。</p>
<p>但代替的工作还没有完成。</p>
<p>还需要做两件配合的事情。</p>
<h3 id="代码设置"><a href="#代码设置" class="headerlink" title="代码设置"></a>代码设置</h3><p>在<code>MainActivity</code>创建的时候，我们需要，</p>
<ol>
<li>通过<code>findViewById()</code>找到布局文件中的<code>Toolbar</code>；</li>
<li>使用<code>setSupportActionBar()</code>替换系统默认的标题栏；</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"Weather app launched"</span>);</div><div class="line">        </div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.app_toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时运行程序看看吧。啊哦！！！程序运行崩溃了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_run_crash.png" width="200" alt=" app_run_crash"></div>

<p>当程序运行出错的时候，设备通常会弹出这样的对话框，提示用户。不过这个提示对开发者没有太大的用处，没法知道哪里出错了。</p>
<p>再看看<code>Android Studio</code>的调试窗口(<code>Android Monitor -&gt; logcat</code>)，打出了一堆的信息，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_run_crash_log.png" width="500" alt=" app_run_crash_log"></div>

<p>通过打出的信息，我们可以看到，系统提示我们要使用<code>Toolbar</code>的话，必须将主题的<code>windowActionBar</code>设置成<code>false</code>。</p>
<p>这是啥意思？主题又是啥？</p>
<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>主题是一个应用或者<code>Activity</code>的显示风格，它的定义和前面提到的<code>style</code>很类似。<br>先跟着我做一遍，之后你一定会对主题有个具体的认识，</p>
<ol>
<li>打开<code>res\valuse\styles.xml</code>文件，里面已经默认定义好了一个主题<code>AppTheme</code>;</li>
<li><p>自定义一个主题-<code>AppTheme.NoActionBar</code>；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    </div><div class="line">    ......</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><code>AppTheme.NoActionBar</code>的这种写法，说明它继承了主题<code>AppTheme</code>的所有属性。</p>
<p>这个新主题，新增了<code>windowActionBar</code>为<code>false</code>，和<code>windowNoTitle</code>为<code>true</code>两个属性。</p>
<p><em>通过<code>.</code>分割主题名称的命名方式，是主题的隐性继承，还有一种使用<code>parent=</code>的显性继承方式，例如<code>AppTheme</code>的定义。</em></p>
<p>使用这个主题的时候，需要，</p>
<ol>
<li><p>打开<code>AndroidManifest.xml</code>文件，</p>
</li>
<li><p>修改<code>Activity</code>的属性，给它加上<code>android:theme=&quot;@style/AppTheme.NoActionBar&quot;</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    <span class="attr">......</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">    </div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.NoActionBar"</span>&gt;</div><div class="line">            ......</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样一来，<code>MainActivity</code>就使用了我们刚定义的<code>AppTheme.NoActionBar</code>主题。</p>
<p>同时也可以看到整个程序-<code>application</code>，在默认情况下使用的是<code>AppTheme</code>主题。</p>
<p>再次运行程序看看，成了，程序没有报错了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_change_activity_theme_for_material_design.png" width="250" alt=" weather_app_change_activity_theme_for_material_design"></div>

<p>不过这里会发现2个问题：</p>
<ol>
<li><code>天气预报</code>几个字是黑色，与我们预想的不符；</li>
<li>滑动整个界面，还是没有<code>Appbar</code>动态变化的效果；</li>
</ol>
<p>我们先来解决第1个问题。</p>
<p><code>天气预报</code>这几个字，默认情况下是程序的名称，是<code>AppBarLayout</code>自身就有的一部分。</p>
<p>因此可以给<code>AppBarLayout</code>设置一个显示白色文字的主题。</p>
<p><code>Android SDK</code>提供了很多现成的主题，这里可以使用一个叫做<code>ThemeOverlay.AppCompat.Dark.ActionBar</code>的主题。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></div><div class="line">   <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div></pre></td></tr></table></figure>
<p>为什么是选择的这个主题？</p>
<ol>
<li>这个主题能让文字从黑色变成白色，其他文字的属性都不会被影响；</li>
<li>用多了就习惯了；</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_add_appbar_theme_for_material_design.png" width="250" alt=" weather_app_add_appbar_theme_for_material_design"></div>

<hr>
<p>要解决第2个问题，我们还的继续调整整个界面的布局。</p>
<p>咱们下一节继续。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;改造Appbar&quot;&gt;&lt;a href=&quot;#改造Appbar&quot; class=&quot;headerlink&quot; title=&quot;改造Appbar&quot;&gt;&lt;/a&gt;改造Appbar&lt;/h1&gt;&lt;p&gt;现在我们开始改造&lt;code&gt;Appbar&lt;/code&gt;，希望给它添加上滑动效果，&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>15 MaterialDesign开发</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/15_MaterialDesign%E5%BC%80%E5%8F%91/"/>
    <id>http://booktest.anddle.com/4_开发/15_MaterialDesign开发/</id>
    <published>2017-02-09T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Material-Design开发"><a href="#Material-Design开发" class="headerlink" title="Material Design开发"></a>Material Design开发</h1><p>从这一章节开始，我们将开始把现有的设计改造成<code>Material Design</code>。</p>
<p>前面我们已经详细的介绍过了<code>Material Design</code>设计相关的内容，但是具体落实到实际的开发，又需要考验程序开发者了。</p>
<p><code>Google</code>深知实现<code>Material Design</code>对于初级开发者的难度。为了让开发者们能尽可能的使用<code>Material Design</code>规范开发应用，它提供了一系列的开发支持库，</p>
<table>
<thead>
<tr>
<th>支持库名称</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>设计支持库</td>
<td>com.android.support:design:24.2.1</td>
</tr>
<tr>
<td>v7 appcompat 库</td>
<td>com.android.support:appcompat-v7:24.2.0</td>
</tr>
<tr>
<td>v7 cardview 库</td>
<td>com.android.support:cardview-v7:24.2.0</td>
</tr>
<tr>
<td>v7 gridlayout 库</td>
<td>com.android.support:gridlayout-v7:24.2.0</td>
</tr>
<tr>
<td>v7 palette 库</td>
<td>com.android.support:palette-v7:24.2.0</td>
</tr>
<tr>
<td>v7 recyclerview 库</td>
<td>com.android.support:recyclerview-v7:24.2.0</td>
</tr>
</tbody>
</table>
<p>这些支持库是对<code>Android SDK</code>的拓展，实现了很多复杂的<code>Material Design</code>动态效果。开发者不需要去为如何实现一个动效而抓耳挠腮，只需要把精力放倒程序逻辑当中。</p>
<p>这些开发包具体支持了哪些<code>Material Design</code>的设计呢？下面举几个例子，</p>
<p>悬浮按钮（Floating Action bar）</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_classic_float_button.png" width="50" alt=" material_classic_float_button"></div>

<p><code>Appbar</code>可滑动的界面特效（CoordinatorLayout）</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_scroll_toolbar_image.gif" width="250" alt=" appbar_scroll_toolbar_image"></div>

<p>侧边栏滑动</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/slider_drawer_example.png" width="250" alt=" slider_drawer_example"></div>

<h2 id="支持包的用法"><a href="#支持包的用法" class="headerlink" title="支持包的用法"></a>支持包的用法</h2><p>看到这么多支持库，是不是有点犯晕，不知道该用哪个，具体怎么使用了？</p>
<p>现在开始改造<code>天气预报</code>，给工程添加<code>Material Design</code>的支持库。</p>
<p><code>Android Studio</code>给我们提供了一个非常简便的方法，</p>
<ol>
<li><p>打开项目工程下的<code>app\build.grandle</code>目录（注意是<strong><code>app目录</code></strong>下的<code>build.grandle</code>文件），</p>
</li>
<li><p>给<code>dependencies</code>添加支持库的引用，<code>compile &#39;com.android.support:design:24.2.1&#39;</code></p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class="line">    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', &#123;</div><div class="line">        exclude group: 'com.android.support', module: 'support-annotations'</div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:24.2.1'</div><div class="line">    compile 'com.android.support:design:24.2.1'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 其中的<code>compile &#39;com.android.support:appcompat-v7:24.2.1&#39;</code>是原本就有的，假如没有，只是添加<code>compile &#39;com.android.support:design:24.2.1&#39;</code>也行，<code>Android Studio</code>会自动加上<code>设计支持库</code>需要的库文件。</p>
</li>
<li><p>保存修改后，点击右上角出现的<code>Sync Now</code>就可以了，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/add_design_lib_support.png" width="400" alt=" add_design_lib_support"></div>

</li>
</ol>
<p>可以看到，整个项目多出了如下的<code>java包</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/add_design_lib_support_result.png" width="500" alt=" add_design_lib_support_result"></div>

<p>引入<code>设计支持库</code>的时候，<code>Android Studio</code>还会检查是否已经引入了其他相关支持库，如果没有会自动引入，例如很多<code>v4</code>和<code>v7</code>的支持包。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/add_design_lib_support_auto_load.png" width="250" alt=" add_design_lib_support_auto_load"></div>

<p>假如要使用没有自动引入的开发库，我们需要使用上面的方法，手动引入支持库。例如<code>v7 palette 库</code>，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">   ......</div><div class="line">   compile 'com.android.support:appcompat-v7:24.2.1'</div><div class="line">   compile 'com.android.support:design:24.2.1'</div><div class="line">   compile 'com.android.support:palette-v7:24.2.0'</div><div class="line">   testCompile 'junit:junit:4.12'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em><code>Google</code>提供的官方支持库，包含了很多种类，开发者需要根据自己的需要自己选择。最重要的就是<code>v4支持库</code>（由多个支持库组成） <code>v7支持库</code>由多个支持库组成）和<code>设计支持库</code>。通常来讲只要引入<code>设计支持库</code>，就能自动引入很多常用的相关开发库了。</em></p>
<p><em>支持库就是<code>aar</code>格式的文件，把它解压后可以发现，里面包含了开发需要使用到的<code>jar包</code>、资源文件等等。不过你并不需要自己去找这样的<code>aar</code>文件，<code>Android Studio</code>会自动为你完成匹配。</em></p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/aar_file_content.png" width="200" alt=" aar_file_content"></div>

<h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2><p>在前面的设计原理章节，我们讲到了<code>Material Design</code>有一个色彩搭配的规则：一个应用要设定它的调色板，<code>Primary Color</code> <code>Primary Dark Color</code> <code>Accent Color</code>。</p>
<p>这个规则在代码实现中是如何得以体现的呢？</p>
<p>我们打开项目工程的<code>app\src\main\res\values\colors.xml</code>，可以看到这样的颜色定义，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这三个颜色正是对应着调色板的三个主要颜色，</p>
<table>
<thead>
<tr>
<th>调色板块</th>
<th>颜色属性名称</th>
<th>调色板颜色名</th>
<th>颜色值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Primary Color</td>
<td>colorPrimary</td>
<td>Indigo 500</td>
<td>#3F51B5</td>
</tr>
<tr>
<td>Primary Dark Color</td>
<td>colorPrimaryDark</td>
<td>Indigo 700</td>
<td>#303F9F</td>
</tr>
<tr>
<td>Accent Color</td>
<td>colorAccent</td>
<td>Pink A200</td>
<td>#FF4081</td>
</tr>
</tbody>
</table>
<p>在打开项目工程的<code>app\src\main\res\values\styles.xml</code>，可以看到这样的颜色定义，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    ......</div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到，这里定义了一个主题<code>AppTheme</code>。</p>
<p>主题<code>theme</code>是一个应用或者<code>Activity</code>的显示风格，它的定义和前面提到的<code>style</code>很类似。</p>
<p>这个主题当中，重新定义了主题的<code>colorPrimary</code> <code>colorPrimaryDark</code> <code>colorAccent</code>属性，把调色板的颜色赋予给了它们。</p>
<p>又在<code>AndroidManifest.xml</code>当中把这个主题赋予了整个应用，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.anddle.weatherapp"</span>&gt;</div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">......</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        </div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面整个这套配色体系在工程创建的时候，就自动为我们创建好了。所以在进入这一章节之前，将应用运行起来的时候，已经可以看到<code>天气预报</code>界面这样的颜色搭配了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase1_complete.png" width="250" alt=" weather_app_phase1_complete"></div>

<p>假如你对<code>主题theme</code>还是感觉很抽象没有明白，也没有关系，后面我们会自定一个<code>主题</code>，我想等你做过一遍后，会对它有一个具体的认识与理解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Material-Design开发&quot;&gt;&lt;a href=&quot;#Material-Design开发&quot; class=&quot;headerlink&quot; title=&quot;Material Design开发&quot;&gt;&lt;/a&gt;Material Design开发&lt;/h1&gt;&lt;p&gt;从这一章节开始，我们
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>14 界面优化</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/14_%E7%95%8C%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://booktest.anddle.com/4_开发/14_界面优化/</id>
    <published>2017-02-08T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面优化"><a href="#界面优化" class="headerlink" title="界面优化"></a>界面优化</h1><p><code>天气预报</code>的功能都实现了，但代码当中还有一些需要优化的地方。比如对资源的使用方式。</p>
<h2 id="style的用法"><a href="#style的用法" class="headerlink" title="style的用法"></a>style的用法</h2><p>假如我们想要修改当日温度的字体属性，那就需要修改<code>activity_main.xml</code>中<code>current_temperature</code>所对应的字体颜色、大小等参数。</p>
<p>修改的方案有2个：</p>
<ol>
<li>直接修改<code>TextView</code>对应的<code>android:textColor</code> <code>android:textSize</code>等属性；</li>
<li>给<code>TextView</code>设置一个<code>style</code>，将希望的属性都放到这个<code>Style</code>当中；</li>
</ol>
<p>作为优化的方式，我们当然选择第2种方案：使用<code>Style</code>。可以将使用这种类型的字体都统一起来，如果需要修改这些文字的样式，只要修改这种<code>Style</code>就可以了，大大减小了编码的工作量，便于后期维护。</p>
<p>首先来改造一下<code>天气详情</code>当中的当前温度，</p>
<ol>
<li>打开<code>res\values\styles.xml</code>文件；</li>
<li><p>将<code>android:textColor</code> <code>android:textSize</code>等特性定义成一个<code>style</code>－－－`WeatherDetailCurrentTemperatureStyle。</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"WeatherDetailCurrentTemperatureStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#b3ffffff<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>56sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p> <code>android:textColor</code> <code>android:textSize</code>的取值，完全与<code>current_temperature</code>中的设置完全相同；</p>
</li>
<li><p>为<code>TextView</code>设置<code>android:textAppearance</code>属性，添加<code>WeatherDetailCurrentTemperatureStyle</code>风格；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/current_temperature"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:text</span>=<span class="string">"23°"</span></div><div class="line">     <span class="attr">android:textAppearance</span>=<span class="string">"@style/WeatherDetailCurrentTemperatureStyle"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用类似的方法，我们可以添加更多的<code>style</code>，将它们应用到对应的<code>TextView</code>中，</p>
<table>
<thead>
<tr>
<th>style名称</th>
<th>应用的对象</th>
<th>所在文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>WeatherDetailCurrentTemperatureStyle</td>
<td>current_temperature</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>WeatherDetailTemperatureRangeStyle</td>
<td>temperature_range</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>WeatherDetailLocationStyle</td>
<td>weather_location</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>WeatherForcastDateStyle</td>
<td>forcast_date</td>
<td>forcast_item.xml</td>
</tr>
<tr>
<td>WeatherForcastTemperatureRangeStyle</td>
<td>forcast_temperature</td>
<td>forcast_item.xml</td>
</tr>
<tr>
<td>WeatherMoreInfoDescriptionStyle</td>
<td>weather_more_info_description</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
<tr>
<td>WeatherMoreInfoValueStyle</td>
<td>weather_more_info_value</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
</tbody>
</table>
<h2 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h2><p>字符串、颜色以及各种尺寸相关的值都属于程序的资源。<br>我们前面都是直接使用的这些资源，例如,</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"WeatherForcastTemperatureRangeStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#8a000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其实这些资源可以分门别类的放到单独的位置定义，然后通过<code>@</code>引用的方式进行使用。</p>
<h3 id="优化颜色"><a href="#优化颜色" class="headerlink" title="优化颜色"></a>优化颜色</h3><p>颜色的定义和使用，</p>
<ol>
<li><p>颜色应该定义到<code>res\values\colors.xml</code>当中，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorBlackDarkText"</span>&gt;</span>#DE000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在需要使用它的地方采用引用的方式，<code>@color/</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"WeatherMoreInfoDescriptionStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorBlackDarkText<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用类似的方法，我们可以添加更多的<code>color</code>，将它们应用到对应的地方，</p>
<table>
<thead>
<tr>
<th>颜色值</th>
<th>颜色名称</th>
<th>所在文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>#DE000000</td>
<td>colorBlackDarkText</td>
<td>凡事使用了该颜色的位置</td>
</tr>
<tr>
<td>#8A000000</td>
<td>colorBlackLightText</td>
<td>凡事使用了该颜色的位置</td>
</tr>
<tr>
<td>#FFFFFFFF</td>
<td>colorWhiteLightText</td>
<td>凡事使用了该颜色的位置</td>
</tr>
<tr>
<td>#b3FFFFFF</td>
<td>colorWhiteDarkText</td>
<td>凡事使用了该颜色的位置</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorBlackDarkText"</span>&gt;</span>#DE000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorBlackLightText"</span>&gt;</span>#8A000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorWhiteLightText"</span>&gt;</span>#FFFFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorWhiteDarkText"</span>&gt;</span>#b3FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="优化尺寸"><a href="#优化尺寸" class="headerlink" title="优化尺寸"></a>优化尺寸</h3><p>之前给控件或者布局设置边距的时候，都是直接写的<code>xxdp</code>。这个数值最好也统一放倒资源文件当中进行统一管理，</p>
<ol>
<li><p>尺寸应该定义到<code>res\values\dimens.xml</code>当中，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"forcast_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在需要使用它的地方采用引用的方式，<code>@dimen/</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"@dimen/forcast_margin"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/forcast_margin"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item3"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item4"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item5"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用类似的方法，我们可以添加更多的<code>color</code>，将它们应用到对应的地方，</p>
<table>
<thead>
<tr>
<th>数值</th>
<th>数值名称</th>
<th>所在文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>16dp</td>
<td>forcast_margin</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>10dp</td>
<td>gap_height</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>100dp</td>
<td>forcast_height</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>16dp</td>
<td>list_icon_left_margin</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
<tr>
<td>72dp</td>
<td>list_text_left_margin</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
<tr>
<td>16dp</td>
<td>list_text_right_margin</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Default screen margins, per the Android Design guidelines. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"activity_horizontal_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"activity_vertical_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"forcast_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"forcast_height"</span>&gt;</span>100dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"gap_height"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"list_icon_left_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"list_text_left_margin"</span>&gt;</span>72dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"list_text_right_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="优化字符串"><a href="#优化字符串" class="headerlink" title="优化字符串"></a>优化字符串</h3><p>当应用启动后，还没有获取到网络数据的时候，界面上应该显示<code>空数据</code>才行，不然很容易误导用户。</p>
<p>在之前的开发中，我为了在布局的时候能够看到界面效果，所以写入了很多假的信息。这里需要一一挪除了。对于文字的部分，如果没有显示我们就统一使用<code>-</code>来代替，</p>
<table>
<thead>
<tr>
<th>原始文字</th>
<th>空数据文字</th>
</tr>
</thead>
<tbody>
<tr>
<td>23°</td>
<td>–°</td>
</tr>
<tr>
<td>17℃～25℃</td>
<td>-℃～-℃</td>
</tr>
<tr>
<td>成都</td>
<td>–</td>
</tr>
<tr>
<td>星期X</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>字符串应该统一定义到<code>res\values\strings.xml</code>当中，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"current_temperature_none"</span>&gt;</span>--°<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在使用它的地方用<code>@string/</code>来引用，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/current_temperature"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:text</span>=<span class="string">"@string/current_temperature_none"</span></div><div class="line">     <span class="attr">android:textAppearance</span>=<span class="string">"@style/WeatherDetailCurrentTemperatureStyle"</span>/&gt;</div></pre></td></tr></table></figure>
<p>使用类似的方法，我们可以添加更多的<code>string</code>，将它们应用到对应的地方，</p>
<table>
<thead>
<tr>
<th>字符串</th>
<th>字符串名称</th>
<th>所在文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>–°</td>
<td>current_temperature_none</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>-℃～-℃</td>
<td>temperature_range_none</td>
<td>activity_main.xml forcast_item.xml</td>
</tr>
<tr>
<td>–</td>
<td>location_none</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>—</td>
<td>date_none</td>
<td>forcast_item.xml</td>
</tr>
</tbody>
</table>
<p>对于在代码中使用字符串，应该采用如下方式，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = context.getString(R.string.current_temperature_none);</div></pre></td></tr></table></figure>
<p>其中<code>context</code>是一个应用到上下文环境。对一个Activity来说，就是Activity自身<code>MainActivity.this</code>。</p>
<p>设置字符串的时候，也可以直接使用字符串对应的资源id，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line">currentTemperatureView.setText(R.string.current_temperature_none);</div></pre></td></tr></table></figure>
<p>项目工程中<code>WeatherMoreInfo.java</code>中使用了字符串，所以需要将这里的字符串进行改造，</p>
<ol>
<li><p><code>strings.xml</code>中增加对应的文字：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"wind_direction"</span>&gt;</span>Wind Direction<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"wind_level"</span>&gt;</span>Wind Level<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"humidity_level"</span>&gt;</span>Humidity<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"air_quality"</span>&gt;</span>Air Quality<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"sport"</span>&gt;</span>Sport<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"ultraviolet_level"</span>&gt;</span>Ultraviolet<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>WeatherMoreInfo.java</code>中的<code>description</code>类型从<code>String</code>改变成<code>int</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> description;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfo</span><span class="params">(String keyword, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (keyword) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"wind_direction"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_wind_direction;</div><div class="line">                <span class="keyword">this</span>.description = R.string.wind_direction;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"wind_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_wind_level;</div><div class="line">                <span class="keyword">this</span>.description = R.string.wind_level;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"humidity_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_humidity_level;</div><div class="line">                <span class="keyword">this</span>.description = R.string.humidity_level;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"air_quality"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_air_quality;</div><div class="line">                <span class="keyword">this</span>.description = R.string.air_quality;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"sport_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_sport_level;</div><div class="line">                <span class="keyword">this</span>.description = R.string.sport;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"ultraviolet_ray"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_ultraviolet_level;</div><div class="line">                <span class="keyword">this</span>.description = R.string.ultraviolet_level;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>将代码中所有使用资源的地方，都按照前面介绍的方式进行改造。以后在修改代码的时候，就不会牵一发而动全身了，只需要修改一处，就能够把所有需要修改的地方都修改到了。</p>
<p>重新运行程序，可以看到这样的界面了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/add_default_string_support.png" width="250" alt=" add_default_string_support"></div>

<p>现在资源使用方式的优化就完成了。</p>
<h2 id="多国语言支持"><a href="#多国语言支持" class="headerlink" title="多国语言支持"></a>多国语言支持</h2><p>安卓系统，支持多国语言。它的本质是使用<code>资源的命名法</code>在<code>res\</code>目录下，增加一个<code>value-xx</code>目录，然后在里面添加<code>string.xml</code>文件，该文件当中定义的字符串就是当地的语言。</p>
<p>例如增加中文支持，就增加一个名字叫做<code>value-zh</code>的目录。添加<code>string.xml</code>文件后，就该文件当中定义的中文字符串。</p>
<p>现在我们将添加对中文支持。</p>
<ol>
<li><p>在<code>res</code>目录下，点击右键，启动创建android resource的向导；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_zh_support1.png" width="400" alt=" create_zh_support1"></div>
</li>
<li><p>在<code>File name</code>栏，输入<code>strings</code>，再选中下方的<code>locale</code>，添加到右边；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_zh_support2.png" width="400" alt=" create_zh_support2"></div>
</li>
<li><p>选中<code>zh</code>，代表中文；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_zh_support3.png" width="400" alt=" create_zh_support3"></div>
</li>
<li><p>在创建出来的中文的<code>res\values-zh\strings.xml</code>文件中，仿照<code>res\values\strings.xml</code>的内容，添加中文语言；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    &lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>天气预报<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"wind_direction"</span>&gt;</span>风向<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"wind_level"</span>&gt;</span>风力<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"humidity_level"</span>&gt;</span>湿度<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"air_quality"</span>&gt;</span>空气质量<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"sport"</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"ultraviolet_level"</span>&gt;</span>紫外线<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里的<code>app_name</code>，在<code>AndroidManifest.xml</code>文件中被使用，里面使用了<code>android:label</code>属性，指定这个应用的名称。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase1_complete.png" width="250" alt=" weather_app_phase1_complete"></div>

<p>现在<code>天气预报</code>就支持了中文和英文显示了。</p>
<hr>
<p>至此我们也完成了整个第一阶段的任务：开发完成了<code>天气预报</code>的所有功能。我们将在下一个阶段开始，加入<code>Material Design</code>的设计。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面优化&quot;&gt;&lt;a href=&quot;#界面优化&quot; class=&quot;headerlink&quot; title=&quot;界面优化&quot;&gt;&lt;/a&gt;界面优化&lt;/h1&gt;&lt;p&gt;&lt;code&gt;天气预报&lt;/code&gt;的功能都实现了，但代码当中还有一些需要优化的地方。比如对资源的使用方式。&lt;/p&gt;
&lt;h2 
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>13 获取网络数据</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/13_%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE/"/>
    <id>http://booktest.anddle.com/4_开发/13_获取网络数据/</id>
    <published>2017-02-07T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取网络数据"><a href="#获取网络数据" class="headerlink" title="获取网络数据"></a>获取网络数据</h1><p>之前对数据的解析都是建立在假数据之上的，当网络端的开发者把真实数据上线以后，我们就可以通过网络获取真实的数据了。</p>
<p>正如我们最早的假设前提那样，网络数据是由我构造好了放到自己的服务器上的，里面的内容并不是真实的当日天气，只是便于大家学习如何使用网络访问获取数据。</p>
<p>我们这个示例的网络地址是：<a href="http://book.anddle.com/api/query_weather" target="_blank" rel="external">http://book.anddle.com/api/query_weather</a>。</p>
<p>大家通过浏览器打开，可以看到它包含的内容与我们之前写死在代码中的内容完全一致。</p>
<p>很多时候访问网络数据还需要传入访问的参数，就像我们使用<code>java语言</code>中的函数调用一样，同一个接口需要很多的参数。比如，我们这个天气信息的请求，可以携带地理位置的参数，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://book.anddle.com/api/query_weather?location=北京&amp;date=2017-01-01</div></pre></td></tr></table></figure>
<p>尾部的<code>?</code>表示后面携带的都是参数，<code>location=北京&amp;date=2017-01-01</code>就是携带的参数。</p>
<ol>
<li>这些参数成键值对的形式出现，用<code>=</code>分割-<code>location=北京</code> <code>date=2017-01-01</code>；</li>
<li>参数之间用<code>&amp;</code>分割；</li>
</ol>
<p>我们这里很简单，没有提供参数，只需要使用<code>http://book.anddle.com/api/query_weather</code>发出查询请求就可以了。</p>
<p><em>准确的来讲，我们这里使用的都是<code>http</code>的<code>GET</code>方法获取数据，还有一种<code>POST</code>方法。<code>POST</code>方法不会在链接地址中明确的指出调用的参数是什么，而是会在<code>http</code>协议的报文中携带参数。将调用参数放在报文里会更加的安全，避免别人看到敏感的信息，比如用户名和密码。</em></p>
<h2 id="获取网络数据的通用方法"><a href="#获取网络数据的通用方法" class="headerlink" title="获取网络数据的通用方法"></a>获取网络数据的通用方法</h2><p>现在的应用几乎都离不开网络访问，<code>Android SDK</code>已经继承了对网络访问的全面支持。</p>
<p>使用<code>HttpURLConnection</code>，就能获取该链接下的内容，</p>
<ol>
<li><p>通过访问地址创建<code>URL</code>，</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">URL url = null;</div><div class="line">try &#123;</div><div class="line">    url = new URL(&quot;http://booktest.anddle.com/api/query_weather&quot;);</div><div class="line">    </div><div class="line">&#125; catch (MalformedURLException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>利用<code>HttpURLConnection</code>的<code>openConnection()</code>连接网络，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</div><div class="line">    </div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过打开的连接获取流接口，并通过流接口读取数据，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">InputStream in = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    in = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream());</div><div class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">    <span class="keyword">int</span> readBytes = <span class="number">0</span>;</div><div class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">while</span>((readBytes = in.read(buffer)) &gt; <span class="number">0</span>)&#123;</div><div class="line">        stringBuilder.append(<span class="keyword">new</span> String(buffer, <span class="number">0</span>, readBytes));</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>关闭连接，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">urlConnection.disconnect();</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="获取天气预报数据"><a href="#获取天气预报数据" class="headerlink" title="获取天气预报数据"></a>获取天气预报数据</h2><p>使用<code>HttpURLConnection</code>获取天气数据的过程是个需要在工作线程中进行的工作。因此，需要将它放到<code>UpdateTask</code>的<code>doInBackground()</code>方法当中。</p>
<p>将原有的写死的假数据移除，代替以真实的网络获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">    Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask doInBackground - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line">    </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    </div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://booktest.anddle.com/api/query_weather"</span>);</div><div class="line">        </div><div class="line">        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</div><div class="line">        </div><div class="line">        InputStream in = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream());</div><div class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">        <span class="keyword">int</span> readBytes = <span class="number">0</span>;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>((readBytes = in.read(buffer)) &gt; <span class="number">0</span>)&#123;</div><div class="line">        stringBuilder.append(<span class="keyword">new</span> String(buffer, <span class="number">0</span>, readBytes));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        urlConnection.disconnect();</div><div class="line">        </div><div class="line">        String weatherRes = stringBuilder.toString();</div><div class="line">        </div><div class="line">        ......</div><div class="line">        </div><div class="line">   &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"fail to parse JSON content"</span>);</div><div class="line">   &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="增加权限"><a href="#增加权限" class="headerlink" title="增加权限"></a>增加权限</h2><p>安卓系统对每个应用程序都有严格的权限控制，如果程序要访问网络，必须明确的告诉用户。</p>
<p>这是对用户利益的保护，谁也不愿意一个程序在自己不知情的情况下做一些可能会侵犯自己隐私的事情吧。</p>
<p>如果不添加，那么程序在运行的时候会报这样的错误，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/no_internet_access_permission.png" width="500" alt=" no_internet_access_permission"></div>


<p>添加<code>网络访问权限</code>很简单，打开项目工程的<code>AndroidManifest.xml</code>文件，在<code>application</code>标签之前，添加上<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/androidmanifest_file.png" width="200" alt=" androidmanifest_file"></div>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.anddle.weatherapp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这时运行程序就不会有问题了。</p>
<hr>
<p>至此，<code>天气预报</code>应用的功能就全部实现了。</p>
<h2 id="其他访问网络数据的方式"><a href="#其他访问网络数据的方式" class="headerlink" title="其他访问网络数据的方式"></a>其他访问网络数据的方式</h2><p>在使用<code>AsyncTask</code>的过程中，我们可以体会到它的好处：将耗时不确定的操作与界面刷新整合在了一起，我们开发者不需要使用原始的<code>Thread</code>，不需要去考虑工作线程与主线程如何配合工作这个细节了。</p>
<p>那么也许<code>Android SDK</code>还可以提供一个针对网络访问的异步解决方案：</p>
<ol>
<li>网络访问在工作线程中（不像<code>AsyncTask</code>提供的是一个通用的耗时操作）；</li>
<li>界面刷新在主线程中；</li>
</ol>
<p>针对上面的需求，出现了一些不错的第三方解决方案，例如<br><code>OKHttp</code> <code>volley</code>等等。它们就像是一个个轮子，我们不需要重新开放这些功能了，直接拿过来用就可以了。</p>
<p>在这系列的文章中，我们暂时不适用第三方库做开发，先充分的认识下<code>纯正的安卓开发</code>。</p>
<h2 id="天气API"><a href="#天气API" class="headerlink" title="天气API"></a>天气API</h2><p>为了开发的方便、降低入门的难度，我自己写了一个简单的网络服务提供天气信息。但这并不是真实有效的信息，大家只能用来学习开发使用。</p>
<p>但是互联网上有很多第三方机构提供了真实可用的天气预报。例如<a href="http://www.thinkpage.cn/" target="_blank" rel="external"><code>心知天气</code></a>。</p>
<p>它提供了很多天气信息相关的调用接口。</p>
<p>这些接口和我之前介绍的都很类似，例如查询当前天气的接口：<code>https://api.thinkpage.cn/v3/weather/now.json?key=your_api_key&amp;location=beijing&amp;language=zh-Hans&amp;unit=c</code></p>
<p>返回的结果如下，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "results": [&#123;</div><div class="line">  "location": &#123;</div><div class="line">      "id": "C23NB62W20TF",</div><div class="line">      "name": "西雅图",</div><div class="line">      "country": "US",</div><div class="line">      "timezone": "America/Los_Angeles",</div><div class="line">      "timezone_offset": "-07:00"</div><div class="line">  &#125;,</div><div class="line">  "now": &#123;</div><div class="line">      "text": "多云", //天气现象文字</div><div class="line">      "code": "4", //天气现象代码</div><div class="line">      "temperature": "14", //温度，单位为c摄氏度或f华氏度</div><div class="line">      "feels_like": "14", //体感温度，单位为c摄氏度或f华氏度</div><div class="line">      "pressure": "1018", //气压，单位为mb百帕或in英寸</div><div class="line">      "humidity": "76", //相对湿度，0~100，单位为百分比</div><div class="line">      "visibility": "16.09", //能见度，单位为km公里或mi英里</div><div class="line">      "wind_direction": "西北", //风向文字</div><div class="line">      "wind_direction_degree": "340", //风向角度，范围0~360，0为正北，90为正东，180为正南，270为正西</div><div class="line">      "wind_speed": "8.05", //风速，单位为km/h公里每小时或mph英里每小时</div><div class="line">      "wind_scale": "2", //风力等级，请参考：http://baike.baidu.com/view/465076.htm</div><div class="line">      "clouds": "90", //云量，范围0~100，天空被云覆盖的百分比 #目前不支持中国城市#</div><div class="line">      "dew_point": "-12" //露点温度，请参考：http://baike.baidu.com/view/118348.htm #目前不支持中国城市#</div><div class="line">  &#125;,</div><div class="line">  "last_update": "2015-09-25T22:45:00-07:00" //数据更新时间（该城市的本地时间）</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于这一段更为详细的描述请看它的<a href="http://www.thinkpage.cn/doc#now" target="_blank" rel="external">官方文档</a>，对每个参数和返回值都有解释。</p>
<p>这是一个需要注册或者付费的服务，也是我没有选择使用它来做例子的原因。</p>
<p>如果大家学习了本文很有兴趣，可以将查询天气信息的接口改成这里真实的服务地址，做成一个实用的应用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;获取网络数据&quot;&gt;&lt;a href=&quot;#获取网络数据&quot; class=&quot;headerlink&quot; title=&quot;获取网络数据&quot;&gt;&lt;/a&gt;获取网络数据&lt;/h1&gt;&lt;p&gt;之前对数据的解析都是建立在假数据之上的，当网络端的开发者把真实数据上线以后，我们就可以通过网络获取真实的数据
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>12 数据的异步更新</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/12_%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0/"/>
    <id>http://booktest.anddle.com/4_开发/12_数据的异步更新/</id>
    <published>2017-02-06T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面的异步更新"><a href="#界面的异步更新" class="headerlink" title="界面的异步更新"></a>界面的异步更新</h1><p>前面我们获取的数据是假数据，只要需要，马上就能得到。但是实际的情况下，我们将从网络获取数据。</p>
<p>从网络获取数据有很大的不确定性，主要体现在消耗的时间不确定。假如当时的网络情况非常很好，瞬间就能得到期望的数据，就像是使用在代码中写死的假数据一样；假如网络情况很糟糕，发起数据请求后几十秒钟才能获得结果。</p>
<p>由此可见，通过网络获取数据，花费的时间是说不清楚的。</p>
<p>安卓应用只有一个主线程－各个组件都是在这个线程中运行。作为组件的之一的Activity就是在这个线程中更新应用界面的，例如，用户点击界面上的一个按钮，按钮得到响应，整个过程就是在这个主线程里。所以这个主线程<strong>绝对不可以做耗时的操作</strong>。假如在按钮中做了耗时的操作，那么当它进行耗时操作的时候，你去点击界面上的其它按钮是不会有反应的，就好像程序冻在了那里。</p>
<p>比如说，我们看到的这个<code>onCreate()</code>函数，就是在主线程中执行的。如果在这个主线程中进行网络访问，等着在不确定的时间内收到结果，那么主线程在等待的过程中啥也不能做，整个程序就好像是僵死在那里。</p>
<p>我们的代码一旦连续占用这个线程超过一定的时间，系统甚至就会弹出“程序无响应的”提示，这个提示叫做<code>ANR</code>-Applicatin No Response。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/ANR.png" width="200" alt=" ANR"></div>

<p>所以每当需要进行与界面操作不相关的耗时操作时，比如访问网络获取数据，就需要开辟另一个线程-叫做工作线程。在工作线程中进行耗时工作，然后再将处理的结果告诉主线程，让主线程进行界面更新的工作。</p>
<p>这就好比你在正在做一件事情A，突然另一件事情B来打扰你，你不得不停下手头的工作来完成，做完了才能继续之前的工作；这时如果有另外一个人（另一个线程）来帮助你，把事情B全部包揽了，那你就不用分心了。当另一个人把事情B做完后，告诉你一声就可以了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/main_thread_and_work_thread.png" width="300" alt=" main_thread_and_work_thread"></div>

<p>因此，在从网络获取真实的数据之前，我们要首先解决在工作线程中如何异步刷新界面的问题。</p>
<h2 id="工作线程"><a href="#工作线程" class="headerlink" title="工作线程"></a>工作线程</h2><p>启动一个新的线程，分担耗时工作的方法是一种异步操作：我让你帮我做一件事情，布置任务后，我就去做其他的事情了，等你做完了再告诉我结果；</p>
<p>与它对应的是同步操作：我让你帮我做一件事情，布置任务后，我啥也不做，就等着你做完了告诉我结果；</p>
<p>获取网络信息是个异步操作，启动一个新线程－工作线程thread－查询网络数据，查询完成后，工作线程再将结果通知到主线程，让主线程将查询到结果的结果显示到界面上。界面的更新一定要在主线程中进行，不能在别的线程修改，否则系统后提示运行错误，这一点相当重要。因此我们一定要将查询的结果发送给主线程，让主线程处理界面的更新。</p>
<p>安卓系统提供的异步操作方案有：</p>
<ol>
<li><p>创建工作线程<code>thread</code>和<code>Handler</code>，利用Handler在工作线程和主线程之间传递数据；</p>
</li>
<li><p>使用<code>AsyncTask</code>帮助类，</p>
<p> 考虑到2个因素，</p>
<ol>
<li>耗时的工作要开辟一个工作线程，在其中进行工作；</li>
<li><p>耗时工作的结果要返回给主线程，由主线程更新界面；</p>
<p><code>Android SDK</code>提供了<code>AsyncTask</code>实现耗时操作的使用场景。</p>
</li>
</ol>
</li>
</ol>
<p>虽然将AsyncTask看成是一个单独的方案，但实际上它也是通过<code>方案1</code>实现的，只不过对于使用者来讲更加方便而已。</p>
<p>它们的本质都是创建一个<code>Thread</code>对象，然后让它运行起来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Thread thread = <span class="keyword">new</span> Thread();</div><div class="line">thread.start();</div></pre></td></tr></table></figure>
<p>这里我们选择<code>方案2</code>。因为，</p>
<ol>
<li>使用场景简单，只是单个任务的异步操作，没有多个线程之间的数据同步考虑；</li>
<li>使用方便，不用考虑太多的新线程创建的细节；</li>
</ol>
<h2 id="AsyncTask的用法"><a href="#AsyncTask的用法" class="headerlink" title="AsyncTask的用法"></a>AsyncTask的用法</h2><p>AsyncTask需要被继承成为一个新的子类来使用，在被继承时，要指定三种参数的类型－<code>Param</code> <code>Progress</code> <code>Result</code>，还需要实现<code>doInBackground(Param...)</code>函数，此外通常还要实现<code>onProgressUpdate(Progress...)</code> <code>onPostExecute(Result)</code> 两个回调函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span>  <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Param</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... progresses)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><code>doInBackground(Param... params)</code>函数：传入参数的<code>Param</code>类型就是<code>AsyncTask&lt;Param, Progress, Result&gt;</code>中指定的<code>Param</code>类型。它运行在新创建的工作线程当中。</p>
<p> 使用<code>MyTask</code>时，要在主线程中使用<code>excute()</code>方法传入不定长参数，让<code>Task</code>运行起来，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyTask task = <span class="keyword">new</span> MyTask();</div><div class="line">task.excute(param0, param1, ..., paramN);</div></pre></td></tr></table></figure>
<p> 不定长参数会以数组的形式传递到<code>doInBackground()</code>函数当中，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">    Param param0 = params[<span class="number">0</span>];</div><div class="line">    Param param1 = params[<span class="number">1</span>];</div><div class="line">    ......</div><div class="line">    Param paramN = params[N];</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>onProgressUpdate(Progress... progresses)</code>函数：传入参数的<code>Progress</code>类型就是<code>AsyncTask&lt;Param, Progress, Result&gt;</code>中指定的<code>Progress</code>类型。</p>
<p> 在<code>doInBackground()</code>中执行的是一个很耗时的工作，有时需要向主线程报告当前的运行状况，这就要使用到<code>publishProgress()</code>函数，<code>publishProgress()</code>也是使用的不定长参数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    publishProgress(progress1, progress2, ..., progressN)</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 不定长参数会以数组的形式传递到<code>onProgressUpdate()</code>函数当中，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... progresses)</span> </span>&#123;</div><div class="line">    Progress progress0 = progresses[<span class="number">0</span>];</div><div class="line">    Progress progress1 = progresses[<span class="number">1</span>];</div><div class="line">    ......</div><div class="line">    Progress progressN = progresses[N];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>onPostExecute(Result result)</code>函数：传入参数的<code>Result</code>类型就是<code>AsyncTask&lt;Param, Progress, Result&gt;</code>中指定的<code>Result</code>类型。</p>
<p> <code>doInBackground()</code>函数返回的类型也是<code>Result</code></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">    ......</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 返回的结果作为参数传递给<code>onPostExecute()</code>函数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>onCancel()</code>函数会在调用者取消<code>AsyncTask</code>的工作的时候被触发。</p>
<p> 要取消<code>AsyncTask</code>的工作，首先要在主线程中调用<code>cancel()</code>方法，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">task.cancel(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p> 因为在<code>doInBackground()</code>中执行的是一个很耗时的工作，需要时不时的检查自己是否被取消执行了，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">if</span>(isCancelled())</div><div class="line">    &#123;</div><div class="line">        ......</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    ......</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 最后，<code>onCancelled()</code>函数会被触发，这个函数会在主线程中被执行，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>综合上面的分析，自定义一个<code>AsyncTask</code>的方法如下，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Param</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">        Param param0 = params[<span class="number">0</span>];</div><div class="line">        Param param1 = params[<span class="number">1</span>];</div><div class="line">        ......</div><div class="line">        Param paramN = params[N];</div><div class="line">     </div><div class="line">        <span class="keyword">while</span>(!isCancelled())</div><div class="line">        &#123;</div><div class="line">            ......</div><div class="line">            publishProgress(progress1, progress2, ..., progressN);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... progresses)</span> </span>&#123;</div><div class="line">        Progress progress0 = progresses[<span class="number">0</span>];</div><div class="line">        Progress progress1 = progresses[<span class="number">1</span>];</div><div class="line">        ......</div><div class="line">        Progress progressN = progresses[N];</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用一个<code>AsyncTask</code>的方法如下，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyTask task = <span class="keyword">new</span> MyTask();</div><div class="line">task.excute(param0, param1, ..., paramN);</div><div class="line">......    </div><div class="line">task.cancel(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<h2 id="AsyncTask中解析天气数据"><a href="#AsyncTask中解析天气数据" class="headerlink" title="AsyncTask中解析天气数据"></a>AsyncTask中解析天气数据</h2><p>根据我们的需要，自己定义个<code>AsyncTask</code>－<code>UpdateTask</code>，</p>
<ol>
<li>不需要为新创建的线程传入参数；所以<code>Param</code>设置成<code>Object</code>；</li>
<li>获取网络数据以及解析数据的是一个耗时不确定的过程。为了减小我们开发的难度，可以假设在完成整个过程之前，不需要通知主线程当前查询的状态；所以<code>Progress</code>设置成<code>Void</code>；</li>
<li><p>解析出来的结果有3类，天气详情信息，天气预报信息和天气更多信息。 但是<code>AsyncTask</code>发送给主线程的内容只能包含在一个<code>Result</code>参数当中。</p>
<p> 为此可以有两种办法，</p>
<ol>
<li>在定义一个结构体，把这3类数据放里面，让它们整体作为一个<code>Result</code>；</li>
<li><p>把这3类数据作为<code>UpdateTask</code>的成员变量直接使用，作为结果的保存对象；</p>
<p>同样为了简化问题，我决定使用第2个方法。因此<code>Result</code>设置成<code>Void</code>；再分别设置3类数据的成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mLocation;</div><div class="line">    <span class="keyword">private</span> String mTemperature;</div><div class="line">    <span class="keyword">private</span> String mTemperatureRange;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWeatherCode;</div><div class="line">    <span class="keyword">private</span> List&lt;ForcastInfo&gt; mForcastList;</div><div class="line">    <span class="keyword">private</span> List&lt;WeatherMoreInfo&gt; mWeatherMoreInfoList;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">    </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>将获取网络数据和解析数据的工作放到<code>doInBackground()</code>中进行，这是在一个新创建的工作线程中执行的；并且将解析的结果保存到<code>UpdateTask</code>的成员变量当中，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"start to parse JSON content"</span>);</div><div class="line">        </div><div class="line">        JSONObject weatherResult = <span class="keyword">new</span> JSONObject(FAKE_DATA);</div><div class="line">        <span class="keyword">int</span> errorCode = weatherResult.getInt(<span class="string">"error_code"</span>);</div><div class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"error_code = "</span> + errorCode);</div><div class="line">        <span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">            JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">            mLocation = data.getString(<span class="string">"location"</span>);</div><div class="line">            mTemperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">            mTemperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">            mWeatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line">            </div><div class="line">            Log.d(<span class="string">"TEST"</span>,<span class="string">"weather detail info:"</span>+</div><div class="line">                    <span class="string">" location = "</span> + mLocation +</div><div class="line">                    <span class="string">" temperature = "</span> + mTemperature +</div><div class="line">                    <span class="string">" temperatureRange = "</span> + mTemperatureRange +</div><div class="line">                    <span class="string">" weatherCode = "</span> + mWeatherCode);</div><div class="line">            </div><div class="line">            JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">            mForcastList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">                JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">                String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">                String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">                <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line">            </div><div class="line">                Log.d(<span class="string">"TEST"</span>,<span class="string">"weather forcast info:"</span>+</div><div class="line">                        <span class="string">" date = "</span> + date +</div><div class="line">                        <span class="string">" forcastTemperatureRange = "</span> + forcastTemperatureRange +</div><div class="line">                        <span class="string">" forcastWeatherCode = "</span> + forcastWeatherCode);</div><div class="line">            </div><div class="line">                ForcastInfo forcastInfo = <span class="keyword">new</span> ForcastInfo(date, forcastTemperatureRange, forcastWeatherCode);</div><div class="line">                mForcastList.add(forcastInfo);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">            String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">            String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">            String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">            String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">            String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line">            </div><div class="line">            Log.d(<span class="string">"TEST"</span>,<span class="string">"more weather info:"</span>+</div><div class="line">                    <span class="string">" windDirection = "</span> + windDirection +</div><div class="line">                    <span class="string">" windLevel = "</span> + windLevel +</div><div class="line">                    <span class="string">" humidityLevel = "</span> + humidityLevel +</div><div class="line">                    <span class="string">" airQuality = "</span> + airQuality +</div><div class="line">                    <span class="string">" sportLevel = "</span> + sportLevel +</div><div class="line">                    <span class="string">" ultravioletRay = "</span> + ultravioletRay );</div><div class="line">            </div><div class="line">            mWeatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            WeatherMoreInfo info1 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_direction"</span>, windDirection);</div><div class="line">            WeatherMoreInfo info2 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_level"</span>, windLevel);</div><div class="line">            WeatherMoreInfo info3 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"humidity_level"</span>, humidityLevel);</div><div class="line">            WeatherMoreInfo info4 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"air_quality"</span>, airQuality);</div><div class="line">            WeatherMoreInfo info5 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"sport_level"</span>, sportLevel);</div><div class="line">            WeatherMoreInfo info6 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"ultraviolet_ray"</span>, ultravioletRay);</div><div class="line">            mWeatherMoreInfoList.add(info1);</div><div class="line">            mWeatherMoreInfoList.add(info2);</div><div class="line">            mWeatherMoreInfoList.add(info3);</div><div class="line">            mWeatherMoreInfoList.add(info4);</div><div class="line">            mWeatherMoreInfoList.add(info5);</div><div class="line">            mWeatherMoreInfoList.add(info6);</div><div class="line">            </div><div class="line">            Log.d(<span class="string">"TEST"</span>,<span class="string">"finish to parse JSON content"</span>);</div><div class="line">             </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"fail to parse JSON content"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将解析完成，刷新界面的工作放到<code>onPostExecute()</code>中进行，这是运行在主线程上的，所以可以用来更新界面，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line"></div><div class="line">    updateWeatherDetail(mLocation, mTemperature, mTemperatureRange, mWeatherCode);</div><div class="line">    updateWeatherForcast(mForcastList);</div><div class="line">    updateWeatherMoreInfo(mWeatherMoreInfoList);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="AsyncTask的使用"><a href="#AsyncTask的使用" class="headerlink" title="AsyncTask的使用"></a>AsyncTask的使用</h2><p>在<code>天气应用</code>的<code>MainActivity</code>创建的时候，我们就启动<code>UpdateTask</code>，开始更新界面的工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> AsyncTask mUpdateTask;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    ......</div><div class="line">    </div><div class="line">    mUpdateTask = <span class="keyword">new</span> UpdateTask();</div><div class="line">    mUpdateTask.execute();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>MainActivity</code>退出的时候，判断<code>mUpdateTask</code>是否还在运行，如果还在运行，就让它停止，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((mUpdateTask != <span class="keyword">null</span>) &amp;&amp; (mUpdateTask.getStatus() == AsyncTask.Status.RUNNING)) &#123;</div><div class="line">        mUpdateTask.cancel(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mUpdateTask = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>onCreate()</code>与<code>onDestroy()</code>是Activity生命周期的一部分，当一个<code>Activity</code>被创建的时候会调用到<code>onCreate()</code>，当Activity被退出销毁的时候会调用到<code>onDestroy()</code>。所以在这两个地方使用<code>UpdateTask</code>是一个合适的选择。</p>
<h2 id="验证主线程与工作线程"><a href="#验证主线程与工作线程" class="headerlink" title="验证主线程与工作线程"></a>验证主线程与工作线程</h2><p>代码写完了，我们来验证一下<code>AsyncTask</code>是否如我之前介绍的那样，将不同的工作自动的放到了主线程与工作线程之中进行。</p>
<p>系统运行时，会未每一个程序分配一个<code>进程ID-PID</code>，每个进程可以有多个线程，而每个线程又会根据线程的数量给它们分配对于的<code>线程ID-TID</code>。</p>
<p><code>Android SDK</code>提供了一个叫做<code>Thread.currentThread()</code>的函数，能获取执行当前函数所用线程<code>TID</code>值。</p>
<p>使用<code>Log.d()</code>将这两个信息打印出来看看，</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line"></div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask doInBackground - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line">     </div><div class="line">        ......   </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line"></div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask onPostExecute - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>从<code>log</code>中可以看到，工作线程的<code>线程id</code>是<code>1008</code>；而主线程的<code>线程id</code>是<code>1</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/asynctask_threadid.png" width="600" alt=" asynctask_threadid"></div>

<p>这和我们之前的介绍一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面的异步更新&quot;&gt;&lt;a href=&quot;#界面的异步更新&quot; class=&quot;headerlink&quot; title=&quot;界面的异步更新&quot;&gt;&lt;/a&gt;界面的异步更新&lt;/h1&gt;&lt;p&gt;前面我们获取的数据是假数据，只要需要，马上就能得到。但是实际的情况下，我们将从网络获取数据。&lt;/p&gt;
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>11 界面的更新</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/11_%E7%95%8C%E9%9D%A2%E7%9A%84%E6%9B%B4%E6%96%B0/"/>
    <id>http://booktest.anddle.com/4_开发/11_界面的更新/</id>
    <published>2017-02-05T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面的更新"><a href="#界面的更新" class="headerlink" title="界面的更新"></a>界面的更新</h1><p>解析出天气预报的各种数据之后，就需要将它们反映到界面上了。</p>
<p>更新的原理很简单，通过<code>findViewById()</code>获取要更新的各种控件，然后将要更新的数据设置给这些控件就可以了。<br>例如，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取控件</span></div><div class="line">TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line"></div><div class="line"><span class="comment">//使用控件</span></div><div class="line">currentTemperatureView.setText(temperature);</div></pre></td></tr></table></figure>
<h2 id="天气详情界面"><a href="#天气详情界面" class="headerlink" title="天气详情界面"></a>天气详情界面</h2><ol>
<li><p>添加一个更新天气详情界面的函数，把这个界面更新的操作放在一起，便于维护；<br> 传人位置、温度、温度范围、天气状态等几个更新界面需要用到的信息，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过<code>findViewById()</code>找到需要更新的控件-天气图标、当前温度、温度范围，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">    TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line">    TextView temperatureRangeView = (TextView) findViewById(R.id.temperature_range);</div><div class="line">    ImageView weatherIcon = (ImageView) findViewById(R.id.weather_icon);</div><div class="line">    TextView weatherLocation = (TextView) findViewById(R.id.weather_location);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将当前温度、温度范围和位置设置到界面上，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">   TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line">   TextView temperatureRangeView = (TextView) findViewById(R.id.temperature_range);</div><div class="line">   ImageView weatherIcon = (ImageView) findViewById(R.id.weather_icon);</div><div class="line">   TextView weatherLocation = (TextView) findViewById(R.id.weather_location);</div><div class="line">   </div><div class="line">   currentTemperatureView.setText(temperature);</div><div class="line">   temperatureRangeView.setText(temperatureRange);</div><div class="line">   weatherLocation.setText(location);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里<code>TextView</code>的<code>setText()</code>方法，就是设置控件显示内容的，它与<code>xml</code>布局文件中的<code>android:text</code>属性的功能一样。</p>
</li>
<li><p>根据<code>协议</code>约定的含义，将<code>weather code</code>代码转换成对应的图标，并设置给界面，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iconId = R.mipmap.ic_sunny_cloudy_l;</div><div class="line">    <span class="keyword">switch</span> (weatherCode) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            iconId = R.mipmap.ic_sunny_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            iconId = R.mipmap.ic_rainy_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            iconId = R.mipmap.ic_cloudy_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            iconId = R.mipmap.ic_fog_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            iconId = R.mipmap.ic_snow_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">            iconId = R.mipmap.ic_sunny_cloudy_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    weatherIcon.setImageResource(iconId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里<code>ImageView</code>的<code>setImageResource()</code>方法，就是设置控件显示图片的，它与<code>xml</code>布局文件中的<code>android:src</code>属性的功能一样。</p>
</li>
<li><p>当解析出<code>JSON</code>数据以后，就可以使用<code>updateWeatherDetail()</code>来更新界面，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">    String location = data.getString(<span class="string">"location"</span>);</div><div class="line">    String temperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">    String temperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">    <span class="keyword">int</span> weatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line">    </div><div class="line">    </div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="comment">//更新数据</span></div><div class="line">    updateWeatherDetail(location, temperature, temperatureRange, weatherCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_update_detail.png" width="250" alt=" weather_app_update_detail"></div>

<h2 id="天气预报界面"><a href="#天气预报界面" class="headerlink" title="天气预报界面"></a>天气预报界面</h2><p>每个天气预报由3个信息组成：日期、温度范围、天气状态。其中天气状态决定了需要显示的图标。</p>
<ol>
<li><p>新建一个<code>java源文件</code>-<code>ForcastInfo.java</code>，创建一个新类-<code>ForcastInfo</code>，使用3个变量保存天气预报项中的数据。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String date;</div><div class="line">    <span class="keyword">public</span> String temperatureRage;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> iconResId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 用<code>iconResId</code>保存天气状态对应的图标资源<code>id</code>。</p>
</li>
<li><p>因为<code>iconResId</code>保存的是天气状态对应的图标资源<code>id</code>，所以给<code>iconResId</code>赋值的时候得转化一番，因此我想到了给<code>ForcastInfo</code>设计一个构造函数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForcastInfo</span><span class="params">(String date, String temperatureRage, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.date = date;</div><div class="line">        <span class="keyword">this</span>.temperatureRage = temperatureRage;</div><div class="line">        </div><div class="line">        <span class="keyword">this</span>.iconResId = R.mipmap.ic_sunny_cloudy_s;</div><div class="line">        <span class="keyword">switch</span> (weatherCode) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId = R.mipmap.ic_sunny_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_rainy_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_cloudy_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_fog_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_snow_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_sunny_cloudy_s;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 构造函数中，将3个数据转换成了显示使用的数据。</p>
</li>
<li><p>添加一个更新天气预报区域的函数，把界面更新的操作放在一起，便于维护；<br>传人<code>ForcastInfo</code>的列表，作为更新界面需要用到的信息， </p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherForcast</span><span class="params">(List&lt;ForcastInfo&gt; list)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>需要获取<code>天气预报区域</code>中，5个完全一样的布局，逐个更新这5个一样的布局，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherForcast</span><span class="params">(List&lt;ForcastInfo&gt; list)</span> </span>&#123;</div><div class="line">        </div><div class="line">        LinearLayout forcastItem1 = (LinearLayout) findViewById(R.id.forcast_item1);</div><div class="line">        LinearLayout forcastItem2 = (LinearLayout) findViewById(R.id.forcast_item2);</div><div class="line">        LinearLayout forcastItem3 = (LinearLayout) findViewById(R.id.forcast_item3);</div><div class="line">        LinearLayout forcastItem4 = (LinearLayout) findViewById(R.id.forcast_item4);</div><div class="line">        LinearLayout forcastItem5 = (LinearLayout) findViewById(R.id.forcast_item5);</div><div class="line">        </div><div class="line">        updateWeatherForcastItem(forcastItem1, list.get(<span class="number">0</span>));</div><div class="line">        updateWeatherForcastItem(forcastItem2, list.get(<span class="number">1</span>));</div><div class="line">        updateWeatherForcastItem(forcastItem3, list.get(<span class="number">2</span>));</div><div class="line">        updateWeatherForcastItem(forcastItem4, list.get(<span class="number">3</span>));</div><div class="line">        updateWeatherForcastItem(forcastItem5, list.get(<span class="number">4</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherForcastItem</span><span class="params">(LinearLayout layout, ForcastInfo info)</span> </span>&#123;</div><div class="line"></div><div class="line">        TextView date = (TextView) layout.findViewById(R.id.forcast_date);</div><div class="line">        ImageView icon = (ImageView) layout.findViewById(R.id.forcast_icon);</div><div class="line">        TextView temperatureRage = (TextView) layout.findViewById(R.id.forcast_temperature);</div><div class="line"></div><div class="line">        date.setText(info.date);</div><div class="line">        icon.setImageResource(info.iconResId);</div><div class="line">        temperatureRage.setText(info.temperatureRage);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里看似代码有很多雷同的地方，其实是可以通过循环来实现的（获取<code>天气预报区域</code>，然后遍历它的所有子布局）。不过这里只是为了介绍更新的方法，就不去那样写了。</p>
</li>
<li><p>当解析出<code>JSON</code>数据以后，将它封装成<code>ForcastInfo</code>对象，然后就可以使用<code>updateWeatherForcast()</code>来更新界面了，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    ......</div><div class="line">    JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//创建列表，准备保存数据</span></div><div class="line">    List&lt;ForcastInfo&gt; forcastInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">       JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">       String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">       String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">       <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line">       </div><div class="line">       ......</div><div class="line">       </div><div class="line">       ForcastInfo forcastInfo = <span class="keyword">new</span> ForcastInfo(date, forcastTemperatureRange, forcastWeatherCode);</div><div class="line">       forcastInfoList.add(forcastInfo);</div><div class="line">    &#125;        </div><div class="line">    </div><div class="line">    <span class="comment">//更新数据</span></div><div class="line">    updateWeatherForcast(forcastInfoList);</div><div class="line">    </div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_update_forcast.png" width="250" alt=" weather_app_update_forcast"></div>

<h2 id="更多天气信息界面"><a href="#更多天气信息界面" class="headerlink" title="更多天气信息界面"></a>更多天气信息界面</h2><p>每条更多信息都由3个信息组成：图标、描述、取值。其中<code>描述</code>与<code>图标</code>是一一对应的关系，它们都是根据<code>JSON</code>字段的名称来确定的，</p>
<table>
<thead>
<tr>
<th>JSON字段名称</th>
<th>描述</th>
<th>图片id</th>
</tr>
</thead>
<tbody>
<tr>
<td>wind_direction</td>
<td>风向</td>
<td>R.mipmap.ic_wind_direction</td>
</tr>
<tr>
<td>wind_level</td>
<td>风力</td>
<td>R.mipmap.ic_wind_level</td>
</tr>
<tr>
<td>humidity_level</td>
<td>湿度</td>
<td>R.mipmap.ic_humidity_level</td>
</tr>
<tr>
<td>air_quality</td>
<td>空气质量</td>
<td>R.mipmap.ic_air_quality</td>
</tr>
<tr>
<td>sport_level</td>
<td>运动</td>
<td>R.mipmap.ic_sport_level</td>
</tr>
<tr>
<td>ultraviolet_ray</td>
<td>紫外线</td>
<td>R.mipmap.ic_ultraviolet_level</td>
</tr>
</tbody>
</table>
<ol>
<li><p>改造原有的<code>WeatherMoreInfo</code>类，让它也拥有一个<code>构造函数</code>，可以自动的根据<code>JSON</code>字段名称翻译描述文字和对应的图片，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfo</span> </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfo</span><span class="params">(String keyword, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (keyword) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"wind_direction"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_wind_direction;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"风向"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"wind_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_wind_level;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"风力"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"humidity_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_humidity_level;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"湿度"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"air_quality"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_air_quality;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"空气质量"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"sport_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_sport_level;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"运动"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"ultraviolet_ray"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_ultraviolet_level;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"紫外线"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加更新更多天气信息列表的函数<code>updateWeatherMoreInfo()</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherMoreInfo</span><span class="params">(List&lt;WeatherMoreInfo&gt; list)</span> </span>&#123;</div><div class="line"></div><div class="line">    mWeatherMoreInfoList.clear();</div><div class="line">    mWeatherMoreInfoList.addAll(list);</div><div class="line"></div><div class="line">    WeatherMoreInfoAdapter adapter = (WeatherMoreInfoAdapter) mWeatherMoreInfoListView.getAdapter();</div><div class="line">    adapter.notifyDataSetChanged();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里面对<code>Adapter</code>中数据的修改要在主线程中进行，修改完成后，使用<code>notifyDataSetChanged()</code>刷新界面。</p>
</li>
<li><p>当解析出<code>JSON</code>数据以后，将它封装成<code>WeatherMoreInfo</code>对象，然后就可以使用<code>updateWeatherMoreInfo()</code>来更新界面了，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    ......</div><div class="line">    String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">    String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">    String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">    String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">    String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">    String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line">   </div><div class="line">    <span class="comment">//创建一个列表存储更多天气信息的数据        </span></div><div class="line">    List&lt;WeatherMoreInfo&gt; weatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    WeatherMoreInfo info1 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_direction"</span>, windDirection);</div><div class="line">    WeatherMoreInfo info2 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_level"</span>, windLevel);</div><div class="line">    WeatherMoreInfo info3 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"humidity_level"</span>, humidityLevel);</div><div class="line">    WeatherMoreInfo info4 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"air_quality"</span>, airQuality);</div><div class="line">    WeatherMoreInfo info5 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"sport_level"</span>, sportLevel);</div><div class="line">    WeatherMoreInfo info6 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"ultraviolet_ray"</span>, ultravioletRay);</div><div class="line">    weatherMoreInfoList.add(info1);</div><div class="line">    weatherMoreInfoList.add(info2);</div><div class="line">    weatherMoreInfoList.add(info3);</div><div class="line">    weatherMoreInfoList.add(info4);</div><div class="line">    weatherMoreInfoList.add(info5);</div><div class="line">    weatherMoreInfoList.add(info6);</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="comment">//更新数据</span></div><div class="line">    updateWeatherMoreInfo(weatherMoreInfoList);</div><div class="line">  </div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_more_info_list_complete.png" width="250" alt=" weather_more_info_list_complete"></div>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>有编码基础的高手们在看完前面的代码之后，一定发现了不少代码潜在的问题：我没有去考虑数据解析失败、联网失败的情况。一旦发生这样的情况，程序就会崩溃。</p>
<p>是的，你看的很仔细，很善于思考。这些缺陷我是故意留下的。这些缺陷用专业的叫法就是<code>bug</code>。我留下了这些伏笔，准备再后面的<code>测试</code>章节单独来进行处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面的更新&quot;&gt;&lt;a href=&quot;#界面的更新&quot; class=&quot;headerlink&quot; title=&quot;界面的更新&quot;&gt;&lt;/a&gt;界面的更新&lt;/h1&gt;&lt;p&gt;解析出天气预报的各种数据之后，就需要将它们反映到界面上了。&lt;/p&gt;
&lt;p&gt;更新的原理很简单，通过&lt;code&gt;find
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>10 解析天气预报数据</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/10_%E8%A7%A3%E6%9E%90%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E6%95%B0%E6%8D%AE/"/>
    <id>http://booktest.anddle.com/4_开发/10_解析天气预报数据/</id>
    <published>2017-02-04T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析天气预报数据"><a href="#解析天气预报数据" class="headerlink" title="解析天气预报数据"></a>解析天气预报数据</h1><p>界面布局完成以后，就需要设计代码来控制界面上各个元素的逻辑了。</p>
<ol>
<li>从网络获取天气预报数据；</li>
<li>解析获取的数据；</li>
<li>根据解析的结果更新<code>天气预报</code>界面；</li>
</ol>
<p>天气预报数据依赖于网络端的服务器，不是我们应用开发者自己能决定的。假如应用和网络服务器是两拨人同时在开发，极有可能出现应用端需要获取数据的时候，服务器端还没有准备好数据的情况。</p>
<p>这种情况怎么办呢？</p>
<p>我们应用开发者可以自己<code>构造</code>一个假数据，模拟已经获取到真实数据的情形。当然，这样的假数据从格式到内容要尽量和网络端提供的真实数据一致。两者越是相同，后面使用真实数据时所作的修改就越是容易。</p>
<p>所以在实际的开发项目中，应用开发者和网络端开发者会拟定一个<code>数据协议</code>，应用开发者看这个<code>协议</code>就知道假数据如何构造了，而不用总是打断网络端开发者的工作。网络端开发者的开发也会严格按照这个<code>协议</code>来执行，不然将来的配合就是鸡同鸭讲。</p>
<p>这里我们先假设已经获取道了网络上的天气预报数据，看看如何来解析数据，并更新<code>天气预报界面</code>。</p>
<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>现在应用端（客户端）与网络端（服务器端）之间的数据交换，通常会使用两种格式的文本内容：<code>XML</code>与<code>JSON</code>。</p>
<p>比如通过网络获取一个班级学生的信息（假设包含学生的姓名、年龄、性别等3个内容）。</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>年龄</th>
<th>性别</th>
</tr>
</thead>
<tbody>
<tr>
<td>赵一</td>
<td>15</td>
<td>男</td>
</tr>
<tr>
<td>钱二</td>
<td>14</td>
<td>女</td>
</tr>
<tr>
<td>孙三</td>
<td>16</td>
<td>女</td>
</tr>
<tr>
<td>李四</td>
<td>12</td>
<td>男</td>
</tr>
</tbody>
</table>
<ul>
<li><p>使用<code>XML</code>来传递信息，可能的内容就是：</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>赵一<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>15<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>钱二<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>14<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>孙三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>16<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>12<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  每个节点<code>&lt;&gt;</code>代表一个数据。</p>
</li>
<li><p>使用<code>JSON</code>来传递信息，可能的内容就是：</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"students"</span>:</div><div class="line">	[</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>:<span class="string">"赵一"</span>, </div><div class="line">			<span class="attr">"age"</span>:<span class="string">"15"</span>, </div><div class="line">			<span class="attr">"sex"</span>:<span class="string">"男"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>:<span class="string">"钱二"</span>, </div><div class="line">			<span class="attr">"age"</span>:<span class="string">"14"</span>, </div><div class="line">			<span class="attr">"sex"</span>:<span class="string">"女"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>:<span class="string">"孙三"</span>, </div><div class="line">			<span class="attr">"age"</span>:<span class="string">"16"</span>, </div><div class="line">			<span class="attr">"sex"</span>:<span class="string">"女"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>:<span class="string">"李四"</span>, </div><div class="line">			<span class="attr">"age"</span>:<span class="string">"12"</span>, </div><div class="line">			<span class="attr">"sex"</span>:<span class="string">"男"</span></div><div class="line">		&#125;</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>XML</code>与<code>JSON</code>相比，<code>JSON</code>格式的数据占用的空间更小，表达方式更简洁一些。所以<code>JSON</code>似乎更受开发者的欢迎。</p>
<p>我们这里采用的就是<code>JSON</code>格式的数据。</p>
<h3 id="JSON初步"><a href="#JSON初步" class="headerlink" title="JSON初步"></a>JSON初步</h3><p><code>JSON</code>格式的理解也很简单。</p>
<ul>
<li><p>数据由<code>名称</code>和<code>取值</code>构成，例如<code>&quot;name&quot;:&quot;李四&quot;</code>，</p>
<ol>
<li>它们由<code>:</code>分隔开，并且用<code>&quot;</code>括了起来（对于数值型的取值可以不用引号扩起来，但为了简化大家记忆的规则，都还是扩起来吧）；</li>
<li><p><code>:</code>后面可以跟<code>[]</code>，也可以跟<code>{}</code>；不同的括号，代表数据的不同类型；</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"name":"李四"</div><div class="line">"age":"12"</div><div class="line">"sex":"男"</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>使用<code>{}</code>，表现的是同一个事物的不同项，</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"李四"</span></div><div class="line">    <span class="string">"age"</span>:<span class="string">"12"</span></div><div class="line">    <span class="string">"sex"</span>:<span class="string">"男"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用<code>[]</code>，表现的是同一类事物，内部会有多个平级的数据项；</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">"data":</div><div class="line">	[</div><div class="line">		&#123;</div><div class="line">			"item":"1", </div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			"item":"2", </div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			"item":"3", </div><div class="line">		&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="天气数据"><a href="#天气数据" class="headerlink" title="天气数据"></a>天气数据</h3><p>根据之前的功能规划，我们确定了网络数据的格式，拿出一个实实在在的例子感受一下吧：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"error_code"</span>: <span class="string">"0"</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"location"</span>: <span class="string">"成都"</span>,</div><div class="line">        <span class="attr">"temperature"</span>: <span class="string">"23°"</span>,</div><div class="line">        <span class="attr">"temperature_range"</span>: <span class="string">"18℃~23℃"</span>,</div><div class="line">        <span class="attr">"weather_code"</span>: <span class="string">"5"</span>,</div><div class="line">        <span class="attr">"wind_direction"</span>: <span class="string">"东南"</span>,</div><div class="line">        <span class="attr">"wind_level"</span>: <span class="string">"1级"</span>,</div><div class="line">        <span class="attr">"humidity_level"</span>: <span class="string">"30%"</span>,</div><div class="line">        <span class="attr">"air_quality"</span>: <span class="string">"良"</span>,</div><div class="line">        <span class="attr">"sport_level"</span>: <span class="string">"适宜"</span>,</div><div class="line">        <span class="attr">"ultraviolet_ray"</span>: <span class="string">"弱"</span>,</div><div class="line">        <span class="attr">"forcast"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"明天"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"18℃~23℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"0"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"星期六"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"17℃~21℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"1"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"星期日"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"19℃~24℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"3"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"星期一"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"16℃~22℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"4"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"星期二"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"20℃~26℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"2"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到整个数据分成了两个大的部分，</p>
<ul>
<li><p><code>error_code</code>：网络端服务器返回的错误代码，假如服务器发现自身有问题，可以通过这个字段的数值告诉客户端。客户端收到返回值以后，首先要检查这个字段是否为<code>0</code>。对于<code>非0</code>值，我们就要警惕了，说明<code>data</code>字段的取值也许就是无效的了。</p>
<p>  不过你也要记住，这个返回的<code>JSON</code>内容，都是应用开发者和网络开发者协商好的，你们也可以不设计<code>error_code</code>这个字段。但是目前大家已经形成了一个不成文的规定，都将这个字段作为<code>JSON</code>数据的标配。</p>
</li>
<li><p><code>data</code>：携带我们真正关心的实际数据，所有天气相关的数据都放在这个字段当中。</p>
</li>
</ul>
<p>接下来的分析，我们将集中于<code>data</code>字段。</p>
<h4 id="天气详情数据"><a href="#天气详情数据" class="headerlink" title="天气详情数据"></a>天气详情数据</h4><p>天气详情数据需要使用到如下内容，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"location": "成都",</div><div class="line">"temperature": "23°",</div><div class="line">"temperature_range": "18℃~23℃",</div><div class="line">"weather_code": "5",</div></pre></td></tr></table></figure>
<p>大部分数据的取值就是我们要显示到界面上的内容，这很简单。例如，</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>取值</th>
<th>显示</th>
</tr>
</thead>
<tbody>
<tr>
<td>location</td>
<td>成都</td>
<td>成都</td>
</tr>
<tr>
<td>temperature</td>
<td>23°</td>
<td>23°</td>
</tr>
<tr>
<td>temperature_range</td>
<td>18℃~23℃</td>
<td>18℃~23℃</td>
</tr>
</tbody>
</table>
<p><code>weather_code</code>字段，取值是数值，不同的数值，代表了不同的天气状态，</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>天气状态</th>
<th>应用显示对应的图标</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>晴</td>
<td>R.mipmap.ic_sunny_l</td>
</tr>
<tr>
<td>1</td>
<td>雨</td>
<td>R.mipmap.ic_rainy_l</td>
</tr>
<tr>
<td>2</td>
<td>多云</td>
<td>R.mipmap.ic_cloudy_l</td>
</tr>
<tr>
<td>3</td>
<td>雾</td>
<td>R.mipmap.ic_fog_l</td>
</tr>
<tr>
<td>4</td>
<td>雪</td>
<td>R.mipmap.ic_snow_l</td>
</tr>
<tr>
<td>5</td>
<td>晴间多云</td>
<td>R.mipmap.ic_sunny_cloudy_l</td>
</tr>
</tbody>
</table>
<h4 id="天气预报数据"><a href="#天气预报数据" class="headerlink" title="天气预报数据"></a>天气预报数据</h4><p>天气预报数据包含5个子项，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">"forcast": [</div><div class="line">      &#123;</div><div class="line">          "date": "明天",</div><div class="line">          "temperature_range": "18℃~23℃",</div><div class="line">          "weather_code": "0"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          "date": "星期六",</div><div class="line">          "temperature_range": "17℃~21℃",</div><div class="line">          "weather_code": "1"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          "date": "星期日",</div><div class="line">          "temperature_range": "19℃~24℃",</div><div class="line">          "weather_code": "3"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          "date": "星期一",</div><div class="line">          "temperature_range": "16℃~22℃",</div><div class="line">          "weather_code": "4"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          "date": "星期二",</div><div class="line">          "temperature_range": "20℃~26℃",</div><div class="line">          "weather_code": "2"</div><div class="line">      &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>大部分数据的取值就是我们要显示到界面上的内容，这很简单。例如，</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>取值</th>
<th>显示</th>
</tr>
</thead>
<tbody>
<tr>
<td>date</td>
<td>星期一</td>
<td>星期一</td>
</tr>
<tr>
<td>temperature_range</td>
<td>16℃~22℃</td>
<td>16℃~22℃</td>
</tr>
</tbody>
</table>
<p><code>weather_code</code>字段，取值是数值，不同的数值，代表了不同的天气状态，对它的理解与天气预报数据中的<code>weather_code</code>一样，只是图标变小了，</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>天气状态</th>
<th>应用显示对应的图标</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>晴</td>
<td>R.mipmap.ic_sunny_s</td>
</tr>
<tr>
<td>1</td>
<td>雨</td>
<td>R.mipmap.ic_rainy_s</td>
</tr>
<tr>
<td>2</td>
<td>多云</td>
<td>R.mipmap.ic_cloudy_s</td>
</tr>
<tr>
<td>3</td>
<td>雾</td>
<td>R.mipmap.ic_fog_s</td>
</tr>
<tr>
<td>4</td>
<td>雪</td>
<td>R.mipmap.ic_snow_s</td>
</tr>
<tr>
<td>5</td>
<td>晴间多云</td>
<td>R.mipmap.ic_sunny_cloudy_s</td>
</tr>
</tbody>
</table>
<h4 id="更多天气信息"><a href="#更多天气信息" class="headerlink" title="更多天气信息"></a>更多天气信息</h4><p>更多天气信息需要使用到如下内容，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"wind_direction": "东南",</div><div class="line">"wind_level": "1级",</div><div class="line">"humidity_level": "30%",</div><div class="line">"air_quality": "良",</div><div class="line">"sport_level": "适宜",</div><div class="line">"ultraviolet_ray": "弱"</div></pre></td></tr></table></figure>
<p>大部分数据的取值就是我们要显示到界面上的内容，这很简单。例如，</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>取值</th>
<th>显示</th>
<th>使用的图标</th>
</tr>
</thead>
<tbody>
<tr>
<td>wind_direction</td>
<td>东南</td>
<td>东南</td>
<td>R.mipmap.ic_wind_direction</td>
</tr>
<tr>
<td>wind_level</td>
<td>1级</td>
<td>1级</td>
<td>R.mipmap.ic_wind_level</td>
</tr>
<tr>
<td>humidity_level</td>
<td>30%</td>
<td>30%</td>
<td>R.mipmap.ic_humidity_level</td>
</tr>
<tr>
<td>air_quality</td>
<td>良</td>
<td>良</td>
<td>R.mipmap.ic_air_quality</td>
</tr>
<tr>
<td>sport_level</td>
<td>适宜</td>
<td>适宜</td>
<td>R.mipmap.ic_sport_level</td>
</tr>
<tr>
<td>ultraviolet_ray</td>
<td>弱</td>
<td>弱</td>
<td>R.mipmap.ic_ultraviolet_level</td>
</tr>
</tbody>
</table>
<h2 id="解析JSON数据"><a href="#解析JSON数据" class="headerlink" title="解析JSON数据"></a>解析JSON数据</h2><p><code>Android SDK</code>给我们提供了非常好的<code>JSON</code>解析支持，我们不需要冲头去写一个解析器，直接拿过来用就好了。</p>
<ol>
<li><p>添加<code>JSON</code>假数据，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String FAKE_DATA= <span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"error_code\": \"0\",\n"</span> +</div><div class="line">            <span class="string">"    \"data\": &#123;\n"</span> +</div><div class="line">            <span class="string">"        \"location\": \"成都\",\n"</span> +</div><div class="line">            <span class="string">"        \"temperature\": \"23°\",\n"</span> +</div><div class="line">            <span class="string">"        \"temperature_range\": \"18℃~23℃\",\n"</span> +</div><div class="line">            <span class="string">"        \"weather_code\": \"5\",\n"</span> +</div><div class="line">            <span class="string">"        \"wind_direction\": \"东南\",\n"</span> +</div><div class="line">            <span class="string">"        \"wind_level\": \"1级\",\n"</span> +</div><div class="line">            <span class="string">"        \"humidity_level\": \"30%\",\n"</span> +</div><div class="line">            <span class="string">"        \"air_quality\": \"良\",\n"</span> +</div><div class="line">            <span class="string">"        \"sport_level\": \"适宜\",\n"</span> +</div><div class="line">            <span class="string">"        \"ultraviolet_ray\": \"弱\",\n"</span> +</div><div class="line">            <span class="string">"        \"forcast\": [\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"明天\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"18℃~23℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"0\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;,\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"星期六\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"17℃~21℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"1\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;,\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"星期日\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"19℃~24℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"3\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;,\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"星期一\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"16℃~22℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"4\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;,\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"星期二\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"20℃~26℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"2\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;\n"</span> +</div><div class="line">            <span class="string">"        ]\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"&#125;"</span>;</div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>删除之前为<code>更多天气信息</code>而创建的假数据，同时在<code>onCreate()</code>中创建一个<code>JSON</code>解析器，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        JSONObject weatherResult = <span class="keyword">new</span> JSONObject(FAKE_DATA);</div><div class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>Android Studio</code>会提示你处理<code>try catch</code>异常。假如程序运行时解析<code>JSON</code>字符串遇到了问题，会通过异常报错，让我们做进一步的处理。</p>
</li>
<li><p>解析<code>error_code</code>，判断数据是否可用，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">         JSONObject weatherResult = <span class="keyword">new</span> JSONObject(FAKE_DATA);</div><div class="line">         <span class="keyword">int</span> errorCode = weatherResult.getInt(<span class="string">"error_code"</span>);</div><div class="line">         <span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">         </div><div class="line">         &#125;</div><div class="line">         <span class="keyword">else</span> &#123;</div><div class="line">         </div><div class="line">         &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里使用了<code>getInt(&quot;error_code&quot;)</code>来获取<code>error</code>字段对应的值，并且把这个值解析成数值<code>int</code>类型。</p>
</li>
</ol>
<h3 id="解析天气详情数据"><a href="#解析天气详情数据" class="headerlink" title="解析天气详情数据"></a>解析天气详情数据</h3><ol>
<li>通过<code>getJSONObject(&quot;data&quot;)</code> 获取<code>data</code>字段的数据结构；</li>
<li>通过<code>getString(xxx)</code>、<code>getInt(xxx)</code>获取<code>location</code> <code>temperature</code> <code>temperature_range</code> <code>weather_code</code>等字段的具体内容；</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">    String location = data.getString(<span class="string">"location"</span>);</div><div class="line">    String temperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">    String temperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">    <span class="keyword">int</span> weatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解析天气预报数据-1"><a href="#解析天气预报数据-1" class="headerlink" title="解析天气预报数据"></a>解析天气预报数据</h3><ol>
<li><p>通过<code>getJSONArray(&quot;forcast&quot;)</code>获取<code>forcast</code>字段下所有的天气预报子项，一共有5个子项；</p>
</li>
<li><p>通过<code>getString(xxx)</code>和<code>getInt(xxx)</code>，获取<code>date</code> <code>temperature_range</code> <code>weather_code</code>等字段的内容；</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">        JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">        String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">        String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">        <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解析更多天气数据"><a href="#解析更多天气数据" class="headerlink" title="解析更多天气数据"></a>解析更多天气数据</h3><p>通过<code>getString(xxx)</code>获取<code>wind_direction</code> <code>wind_level</code> <code>humidity_level</code> <code>air_quality</code> <code>sport_level</code> <code>ultraviolet_ray</code>等字段的具体内容；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">    String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">    String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">    String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">    String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">    String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>完整的代码如下，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   ......</div><div class="line">   </div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">        JSONObject weatherResult = <span class="keyword">new</span> JSONObject(FAKE_DATA);</div><div class="line">        <span class="keyword">int</span> errorCode = weatherResult.getInt(<span class="string">"error_code"</span>);</div><div class="line">        <span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">            JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">            String location = data.getString(<span class="string">"location"</span>);</div><div class="line">            String temperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">            String temperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">            <span class="keyword">int</span> weatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line">            </div><div class="line">            JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">                JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">                String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">                String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">                <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">            String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">            String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">            String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">            String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">            String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">    </div><div class="line">        &#125;</div><div class="line">   &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h2><p>解析的数据需要更新到界面上。但是在解析的过程中，我们希望能尽早看到解析的结果是否正确。</p>
<p><code>Android Studio</code>为我们提供了两种调试代码、看到代码运行到中间状态的方法：<code>断点调试</code>和<code>Log调试</code>。</p>
<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>断点调试让程序在运行到某一个状态的时候，冻结应用运行的状态，仿佛时间停止了一般。然后让我们有时间逐一观察此时程序的各个参数是否符合我们的预期。</p>
<p>这种调试方法适用于对时间不敏感的程序。也就是说被调试的程序线程不需要依赖别的线程，即使暂时停止工作也不会影响别的工作线程或者受别的工作线程影响。</p>
<ol>
<li><p>在希望代码暂停运行的地方打断点——在代码前点击一下，出现一个红色的圆点，如果想取消，再点击一次即可。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_set_break_point.png" width="500" alt=" debug_set_break_point"></div></li>
<li><p>用<code>debug run</code>的方式(ctrl+D)部署程序。当程序运行到设置了端点的位置时，程序将停止下来，切换到<code>Debug</code>窗口。这时，我们就可以观察各个参数了。</p>
<p> 例如下图右半区域就列出了停止时，各个变量的值；左边区域展示了当时函数到调用栈（谁调用的这个函数）情况。我们可以逐一分析，详细观察，看这些值是否符合我们的预期。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_watch_break_point_values.png" width="500" alt=" debug_watch_break_point_values"></div></li>
<li><p>使用菜单栏中的<code>Run -&gt; Step Over</code>(或者快捷键F8)，能让程序往下执行一步。多按几次，就会依次往下执行几次。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_watch_break_point_values_more.png" width="600" alt=" debug_watch_break_point_values_more"></div>

<p> 这里可以看到我们解析的天气预报数据都没有问题。</p>
</li>
</ol>
<p>端点调试有很多的快捷按键，都是值得我们记住的，可以大大加快我们的开发效率。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_break_point_shortcut.png" width="250" alt=" debug_break_point_shortcut"></div>


<h3 id="Log调试"><a href="#Log调试" class="headerlink" title="Log调试"></a>Log调试</h3><p>对于那些和时间相关的程序（不能让程序暂停，等你慢慢观察），我们就不能使用静态的设置断点的调试方法了，得采用动态调试，添加log的方式。</p>
<p>Log的中文名字叫做日志，在编程界表示程序运行过程中打印出的信息。根据log我们就知道现在程序运行到什么地方了，log还可以携带程序中某些变量的信息输出，让我们更精准的知道程序当前运行的状态。</p>
<h4 id="代码中添加Log"><a href="#代码中添加Log" class="headerlink" title="代码中添加Log"></a>代码中添加Log</h4><p>在代码中添加一段函数，就能通过特别的工具输出这些log。我们在创建工程的时候就用过了，</p>
<p>在Android代码中添加log的方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Log.d(<span class="string">"TEST"</span>, <span class="string">"Weather app launched"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里面使用了Android提供的Log库，<code>Log.d</code>代表信息属于<code>Debug</code>类型。</p>
<p>我们给解析出的天气预报数据，都一一加上Log信息。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    Log.d("TEST","start to parse JSON content");</div><div class="line">    </div><div class="line">    JSONObject weatherResult = new JSONObject(FAKE_DATA);</div><div class="line">    int errorCode = weatherResult.getInt("error_code");</div><div class="line">    Log.d("TEST", "error_code = " + errorCode);</div><div class="line">    if(errorCode == 0) &#123;</div><div class="line">        JSONObject data = weatherResult.getJSONObject("data");</div><div class="line">        String location = data.getString("location");</div><div class="line">        String temperature = data.getString("temperature");</div><div class="line">        String temperatureRange = data.getString("temperature_range");</div><div class="line">        int weatherCode = data.getInt("weather_code");</div><div class="line">        </div><div class="line">        Log.d("TEST","weather detail info: "+</div><div class="line">            "location=" + location +</div><div class="line">            "temperature=" + temperature +</div><div class="line">            "temperatureRange=" + temperatureRange +</div><div class="line">            "weatherCode=" + weatherCode);</div><div class="line">        </div><div class="line">        JSONArray forcast = data.getJSONArray("forcast");</div><div class="line">        for(int i = 0; i &lt; forcast.length(); i++) &#123;</div><div class="line">            JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">            String date = forcastItem.getString("date");</div><div class="line">            String forcastTemperatureRange = forcastItem.getString("temperature_range");</div><div class="line">            int forcastWeatherCode = forcastItem.getInt("weather_code");</div><div class="line">            </div><div class="line">            Log.d("TEST","weather forcast info: "+</div><div class="line">                    "date=" + date +</div><div class="line">                    "forcastTemperatureRange=" + forcastTemperatureRange +</div><div class="line">                    "forcastWeatherCode=" + forcastWeatherCode);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        String windDirection = data.getString("wind_direction");</div><div class="line">        String windLevel = data.getString("wind_level");</div><div class="line">        String humidityLevel = data.getString("humidity_level");</div><div class="line">        String airQuality = data.getString("air_quality");</div><div class="line">        String sportLevel = data.getString("sport_level");</div><div class="line">        String ultravioletRay = data.getString("ultraviolet_ray");</div><div class="line">        </div><div class="line">        Log.d("TEST","more weather info: "+</div><div class="line">            "windDirection=" + windDirection +</div><div class="line">            "windLevel=" + windLevel +</div><div class="line">            "humidityLevel=" + humidityLevel +</div><div class="line">            "airQuality=" + airQuality +</div><div class="line">            "sportLevel=" + sportLevel +</div><div class="line">            "ultravioletRay=" + ultravioletRay );</div><div class="line">        </div><div class="line">        Log.d("TEST","finish to parse JSON content");</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125; catch (JSONException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    Log.d("TEST","fail to parse JSON content");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Log的查看"><a href="#Log的查看" class="headerlink" title="Log的查看"></a>Log的查看</h4><p>添加了log信息后，将程序通过<code>debug app</code>部署到设备上，就能在<code>Android Monitor</code>工具的<code>logcat</code>窗口中看到对应的信息了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_log_information.png" width="700" alt=" debug_log_information"></div>

<p>可以看出，我们对<code>JSON</code>的解析完全正确。</p>
<p>输出的调试信息，单条如下：</p>
<p><code>02-10 13:49:29.608 7948-7948/com.anddle.weatherapp D/TEST: error_code = 0</code></p>
<p>是不是可以猜出它所代表的含义呢？</p>
<p>Android应用开发的Log库提供了几种不同等级的log：<code>Verbose</code> <code>Debug</code> <code>Info</code> <code>Warning</code> <code>Error</code>，我们可以根据自己log的需要加不同等级的log，使用的形式为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Log.v(“TAG”,”content is verbose”);</div><div class="line">Log.d(“TAG”,”content is debug”);</div><div class="line">Log.i(“TAG”,”content is info”);</div><div class="line">Log.w(“TAG”,”content is waring”);</div><div class="line">Log.e(“TAG”,”content is error”);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解析天气预报数据&quot;&gt;&lt;a href=&quot;#解析天气预报数据&quot; class=&quot;headerlink&quot; title=&quot;解析天气预报数据&quot;&gt;&lt;/a&gt;解析天气预报数据&lt;/h1&gt;&lt;p&gt;界面布局完成以后，就需要设计代码来控制界面上各个元素的逻辑了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>9 天气更多信息的布局</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/9_%E5%A4%A9%E6%B0%94%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF%E7%9A%84%E5%B8%83%E5%B1%80/"/>
    <id>http://booktest.anddle.com/4_开发/9_天气更多信息的布局/</id>
    <published>2017-02-03T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天气更多信息的布局"><a href="#天气更多信息的布局" class="headerlink" title="天气更多信息的布局"></a>天气更多信息的布局</h1><p>天气相关信息是通过列表方式呈现的。<code>Android SDK</code>提供的<code>ListView</code>控件就能实现这样功能。</p>
<p><code>ListView</code>需要和<code>Adapter</code>配合使用，<code>ListView</code>负责内容的显示，<code>Adapter</code>负责为<code>ListView</code>提供要展示的数据。</p>
<p>要实现我们希望的展示效果，需要开发者自定义一个<code>Adapter</code>。那我们先把问题简化一下，看看<code>ListView</code>是怎么使用的。</p>
<h2 id="ListView的基本方法"><a href="#ListView的基本方法" class="headerlink" title="ListView的基本方法"></a>ListView的基本方法</h2><p>先在我们的工程项目中，使用<code>ListView</code>展示点简单的内容，大家熟悉熟悉使用<code>ListView</code>的套路，</p>
<ol>
<li><p>在<code>activity_main.xml</code>布局文件中，给<code>ListView</code>布局增加一个<code>id</code>叫做<code>weather_more_info_list</code>(在现有的代码中，我们之前已经增加过了)；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_list"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在<code>MainActivity.java</code>的源码文件里，在界面创建的时候（onCreate()当中），通过代码获取<code>ListView</code>；</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Log.d(<span class="string">"TEST"</span>, <span class="string">"Weather app launched"</span>);</div><div class="line"></div><div class="line">    ListView lv = (ListView) findViewById(R.id.weather_more_info_list);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>java</code>源码通过<code>R.id.weather_more_info_list</code>，将布局文件中的<code>ListView</code>找了出来，转换成了可以通过<code>java</code>代码操作的对象。</p>
</li>
<li><p>创建一个<code>Adapter</code>负责为<code>ListView</code>提供数据。Android SDK提供了很多类型的<code>Adapter</code>，<code>ArrayAdapter</code> <code>CursorAdapter</code> <code>SimpleAdapter</code>等等，它们都是<code>BaseAdapter</code>的子类，简化了<code>Adapter</code>的使用。</p>
<p> 要显示的数据和显示这项数据项的布局要设置给<code>Adapter</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="comment">//每一项要显示的数据是一个字符串，这里设置显示3项</span></div><div class="line">    String data[] = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</div><div class="line">    <span class="comment">//指定显示的数据内容，以及显示每项内容的布局文件</span></div><div class="line">    ArrayAdapter adapter ＝ <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1 , data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> Android SDK提供了一些常用的数据项布局方式<code>android.R.layout.simple_list_item_1</code> <code>android.R.layout.simple_list_item_2</code>等等。我们也可以自己设计每一项的布局方式。</p>
</li>
<li><p>将<code>Adapter</code>设置给<code>ListView</code>，数据将以列表的形式被展示，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    lv.setAdapter(adapter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>为显示的每个item添加，点击时代响应处理函数；</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    lv.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">            <span class="comment">//添加需要响应的操作</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>综合以上的代码，就是，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    ListView lv = (ListView) findViewById(R.id.list_view);</div><div class="line">    String data[] = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</div><div class="line">    ArrayAdapter adapter ＝ <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1 , data);</div><div class="line">    lv.setAdapter(adapter);</div><div class="line">    lv.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() &#123;</div><div class="line">            </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">            <span class="comment">//添加需要响应的操作</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后的界面效果就是这样，</p>
<p>运行以后，就能看到<code>a b c</code>以列表的形式，在界面上展现出来了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_list_view_demo.png" width="250" alt=" weather_app_list_view_demo"></div>

<p>如果需要展示的数据有变化，就需要更新<code>ListView</code>。</p>
<p><code>ListView</code>的更新需要在主线程进行（UI线程）。如果在其他线程更新，系统有可能报错，并提示你“不能在非UI线程更新界面元素”。</p>
<p>所以修改了<code>Adapter</code>中要展示的数据后，需要使用<code>Adapter</code>的<code>notifyDataSetChanged()</code>通知主线程自动刷新界面;</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要显示的数据用链表的形式保存；</span></div><div class="line">List data ＝ <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">data.add(<span class="string">"a"</span>);</div><div class="line">data.add(<span class="string">"b"</span>);</div><div class="line">data.add(<span class="string">"c"</span>);</div><div class="line"><span class="comment">//指定显示的数据内容，以及显示每项内容的布局文件</span></div><div class="line">ArrayAdapter adapter ＝ <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1 , data);</div><div class="line">    </div><div class="line">......</div><div class="line"><span class="comment">//修改显示的数据项</span></div><div class="line">data.add(<span class="string">"d"</span>);</div><div class="line"></div><div class="line"><span class="comment">//使用notifyDataSetChanged()通知主线程刷新界面</span></div><div class="line">ArrayAdapter.notifyDataSetChanged();</div></pre></td></tr></table></figure>
<h2 id="自定义Adapter"><a href="#自定义Adapter" class="headerlink" title="自定义Adapter"></a>自定义Adapter</h2><p>虽然<code>Android SDK</code>为我们提供了好几种现成的Adapter使用，但有时它们也并不能完全符合我们的要求，比如满足我们希望的天气信息项界面。</p>
<p>因此，我们准备自定义一个Adapter。</p>
<p><em>其实<code>SimpleAdapter</code>是可以满足要求的，但是为了下一阶段能容易的使用<code>Material Design</code>推荐的列表控件，我就先讲一讲如何自定义Adapter，降低后面的学习难度。</em></p>
<h3 id="定义数据项的布局"><a href="#定义数据项的布局" class="headerlink" title="定义数据项的布局"></a>定义数据项的布局</h3><p>为了让列表的数据项按照我们设计的模样显示，我们需要为它设计一个布局，把天气相关的更多信息展示上去。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weahter_more_info_item_layout.png" width="250" alt=" weahter_more_info_item_layout"></div>

<p>数据项的布局定义在<code>res\layout\weather_more_info_item_layout.xml</code>文件中（如何创建这种布局文件，前面已经介绍过了）。</p>
<p>数据项布局的方案如下，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weahter_more_info_item_layout_solution.png" width="400" alt=" weahter_more_info_item_layout_solution"></div>

<table>
<thead>
<tr>
<th>元素</th>
<th>控件</th>
<th>属性</th>
<th>id名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>图标</td>
<td>ImageView</td>
<td>左边距 16dp 内容居中</td>
<td>weather_more_info_icon</td>
</tr>
<tr>
<td>内容描述</td>
<td>TextView</td>
<td>左边距 72dp 内容垂直居中</td>
<td>weather_more_info_description</td>
</tr>
<tr>
<td>取值</td>
<td>TextView</td>
<td>有边距 16dp 内容垂直居中</td>
<td>weather_more_info_value</td>
</tr>
<tr>
<td>数据项的整体布局</td>
<td>FrameLayout</td>
<td>高度48dp</td>
<td>无</td>
</tr>
</tbody>
</table>
<ul>
<li><p>数据项是一个<code>FrameLayout</code>，放到这个布局中的所有元素就像千层饼一样，都是一层一层堆叠起来的；</p>
<p>  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/framelayout_principle.png" width="300" alt=" framelayout_principle"></div><br>  高度是设计规范中定义的<code>48dp</code>，</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>图标使用<code>ImageView</code>控件，给它的<code>android:scaleType</code>属性设置<code>center</code>，让缩略图垂直居中放置，图片预设成<code>ic_air_quality</code>；左边距是<code>16dp</code>；</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_icon"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_air_quality"</span></div><div class="line">    <span class="attr">android:scaleType</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>内容描述使用<code>TextView</code>控件，它的左边距是<code>72dp</code>，垂直居中放置，字体的大小和颜色按照设计的规范来指定，</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_description"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"湿度"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"72dp"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">    <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></div><div class="line">    <span class="attr">android:textColor</span>= <span class="string">"#DE000000"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>取值使用<code>TextView</code>控件，它的右边距是<code>16dp</code>，垂直居中、整体靠右放置-<code>center_vertical|right</code>，字体的大小和颜色按照设计的规范来指定，</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_value"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"30%"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"16dp"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical|right"</span></div><div class="line">    <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">    <span class="attr">android:textColor</span>= <span class="string">"#8A000000"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>综合起来，如下面的布局源码，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_icon"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_air_quality"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_description"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"湿度"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"72dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></div><div class="line">        <span class="attr">android:textColor</span>= <span class="string">"#DE000000"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_value"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"30%"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical|right"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">        <span class="attr">android:textColor</span>= <span class="string">"#8A000000"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最后效果图：</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weahter_more_info_item_layout_complete.png" width="300" alt=" weahter_more_info_item_layout_complete"></div>

<p><em>实现同一个布局效果的方案可以有很多种。有的方案在代码上很容易实现，有的方案可能还会考虑到布局刷新的效率。随着开发经验的增多，对各种布局实现原理的深入理解，大家会进一步的加深对布局的认识。</em></p>
<h3 id="定义数据项的数据结构"><a href="#定义数据项的数据结构" class="headerlink" title="定义数据项的数据结构"></a>定义数据项的数据结构</h3><p>为了提供显示的数据内容，要先定义一个存放数据的数据结构-<code>WeatherMoreInfo</code>。</p>
<p>首先要重新创建一个<code>java源文件</code>，定义数据结构的类，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_java_class_file.png" width="500" alt=" create_java_class_file"></div>

<p>给类命名<code>WeatherMoreInfo</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_java_class_file2.png" width="400" alt=" create_java_class_file2"></div>

<p>在<code>java</code>目录对应的包目录下，就生成了<code>WeatherMoreInfo.java</code>文件。</p>
<p>我们要在这个类里面存放3个数据：图标、名称、数值。</p>
<table>
<thead>
<tr>
<th>组件名称</th>
<th>存储类型</th>
<th>说明</th>
<th>字段名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>图标</td>
<td>int</td>
<td>存储图标对应的<code>资源id</code></td>
<td>typeResId</td>
</tr>
<tr>
<td>内容描述</td>
<td>String</td>
<td>数据项的名称，描述含义</td>
<td>description</td>
</tr>
<tr>
<td>数值</td>
<td>String</td>
<td>显示名称对应的数据取值</td>
<td>value</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> typeResId = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> description;</div><div class="line">    <span class="keyword">public</span> String value = <span class="string">""</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>数据结构的定义我们暂时就到这里，这个结构在后面还会做出调整，需要和网络端的数据进行配合。我们先到此处，只要能显示列表就可以了。</em></p>
<h3 id="定义Adapter"><a href="#定义Adapter" class="headerlink" title="定义Adapter"></a>定义Adapter</h3><p>现在开始自定义<code>Adapter</code>-<code>WeatherMoreInfoAdapter</code>。</p>
<p><code>Adapter</code>都是继承自<code>BaseAdapter</code>的，我们这里的<code>Adapter</code>准备继承自它的一个子类<code>ArrayAdapter</code>。因为<code>ArrayAdapter</code>在最原始的基础上作出了改进，我们再在它的基础上做一些小的调整就可以用了，而不用完全从头来过。</p>
<p>创建<code>WeatherMoreInfoAdapter.java</code>的新类。</p>
<ol>
<li><p>继承<code>ArrayAdapter</code>，将显示的数据类型指定成<code>WeatherMoreInfo</code>；重新构造函数，传入<code>Context</code>，数据项布局使用的布局ID，要显示的数据列表；重写它的<code>getView()</code>方法；</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">WeatherMoreInfo</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfoAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resource, List&lt;WeatherMoreInfo&gt; objects)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, resource, objects);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在构造函数中，保存好布局ID以后使用，通过<code>Context</code>获取<code>Inflater</code>，为以后数据项布局的创建做准备，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> LayoutInflater mInflater;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mResource;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfoAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resource, List&lt;WeatherMoreInfo&gt; objects)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, resource, objects);</div><div class="line">    mInflater = LayoutInflater.from(context);</div><div class="line">    mResource = resource;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>getView()</code>函数中，创建数据项的布局，并为他们赋值，最后将这个布局返回给<code>ListView</code>，让它显示，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">        convertView = mInflater.inflate(mResource, parent, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    WeatherMoreInfo item = getItem(position);</div><div class="line"></div><div class="line">    ImageView icon = (ImageView) convertView.findViewById(R.id.weather_more_info_icon);</div><div class="line">    icon.setImageResource(item.typeResId);</div><div class="line"></div><div class="line">    TextView description = (TextView) convertView.findViewById(R.id.weather_more_info_description);</div><div class="line">    description.setText(item.description);</div><div class="line"></div><div class="line">    TextView value = (TextView) convertView.findViewById(R.id.weather_more_info_value);</div><div class="line">    value.setText(item.value);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里的<code>convertView</code>就是数据项所代表的那个布局，当<code>ListView</code>刚创建，还没有产生任何数据项的时候，它就是为<code>null</code>的，此时我们就需要创建一个布局，并通过<code>getView()</code>将这个布局返回给<code>ListView</code>。</p>
<p> 假如<code>ListView</code>上的数据项布局已经足够了，那么这里传入的<code>convertView</code>就不会再是<code>null</code>，而是之前的某个数据项布局，我们就不必为此重新创建了，只需要更新上面的内容就好。这样提高了界面刷新的效率。</p>
<p> 当然，这里还能通过其他方法减少使用<code>findViewById()</code>，进一步提高效率，不过目前就不改进了，先把功能实现完成。</p>
</li>
</ol>
<p><code>Adapter</code>终于完成了。</p>
<h2 id="使用Adapter"><a href="#使用Adapter" class="headerlink" title="使用Adapter"></a>使用Adapter</h2><p>现在看看这个<code>Adapter</code>怎么用。</p>
<ol>
<li><p>在<code>MainActivity</code>创建之时，我们在<code>onCreate()</code>中创建并设置<code>WeatherMoreInfoAdapter</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//保存ListView控件</span></div><div class="line">    <span class="keyword">private</span> ListView mWeatherMoreInfoListView;</div><div class="line">    <span class="comment">//保存更多信息到列表当中</span></div><div class="line">    <span class="keyword">private</span> List&lt;WeatherMoreInfo&gt; mWeatherMoreInfoList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        ......</div><div class="line"></div><div class="line">        mWeatherMoreInfoListView = (ListView) findViewById(R.id.weather_more_info_list);</div><div class="line">        <span class="comment">//创建保存数据的列表，数据暂时没有</span></div><div class="line">        mWeatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//创建一个还没有添加入数据的Adapter</span></div><div class="line">        WeatherMoreInfoAdapter adapter = <span class="keyword">new</span> WeatherMoreInfoAdapter(MainActivity.<span class="keyword">this</span>, R.layout.weather_more_info_item_layout, mWeatherMoreInfoList);</div><div class="line">        mWeatherMoreInfoListView.setAdapter(adapter);       </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在创建<code>Adapter</code>的时候，把<code>weather_more_info_item_layout.xml</code>代表的布局传给了<code>Adapter</code>，<code>Adapter</code>将使用它来生成每个数据项的界面。</p>
</li>
<li><p>添加一些虚假的数据到<code>Adapter</code>中，并使用<code>notifyDataSetChanged()</code>刷新看看效果，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    ......</div><div class="line"></div><div class="line">    WeatherMoreInfo data1 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data1.typeResId = R.mipmap.ic_wind_level;</div><div class="line">    data1.description = <span class="string">"风力"</span>;</div><div class="line">    data1.value = <span class="string">"3级"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data1);</div><div class="line"></div><div class="line">    WeatherMoreInfo data2 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data2.typeResId = R.mipmap.ic_wind_direction;</div><div class="line">    data2.description = <span class="string">"风向"</span>;</div><div class="line">    data2.value = <span class="string">"东南"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data2);</div><div class="line"></div><div class="line">    WeatherMoreInfo data3 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data3.typeResId = R.mipmap.ic_humidity_level;</div><div class="line">    data3.description = <span class="string">"湿度"</span>;</div><div class="line">    data3.value = <span class="string">"60%"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data3);</div><div class="line"></div><div class="line">    WeatherMoreInfo data4 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data4.typeResId = R.mipmap.ic_air_quality;</div><div class="line">    data4.description = <span class="string">"空气质量"</span>;</div><div class="line">    data4.value = <span class="string">"重污染"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data4);</div><div class="line"></div><div class="line">    WeatherMoreInfo data5 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data5.typeResId = R.mipmap.ic_sport_level;</div><div class="line">    data5.description = <span class="string">"运动"</span>;</div><div class="line">    data5.value = <span class="string">"不合适"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data5);</div><div class="line"></div><div class="line">    WeatherMoreInfo data6 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data6.typeResId = R.mipmap.ic_ultraviolet_level;</div><div class="line">    data6.description = <span class="string">"紫外线"</span>;</div><div class="line">    data6.value = <span class="string">"强"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data6);</div><div class="line"></div><div class="line">    adapter.notifyDataSetChanged();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p> 至此，视频列表的界面就能看到视频列表了。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_more_info_list_complete.png" width="250" alt=" weather_more_info_list_complete"></div>


</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;天气更多信息的布局&quot;&gt;&lt;a href=&quot;#天气更多信息的布局&quot; class=&quot;headerlink&quot; title=&quot;天气更多信息的布局&quot;&gt;&lt;/a&gt;天气更多信息的布局&lt;/h1&gt;&lt;p&gt;天气相关信息是通过列表方式呈现的。&lt;code&gt;Android SDK&lt;/code&gt;提
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>8 天气预报的布局</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/8_%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%9A%84%E5%B8%83%E5%B1%80/"/>
    <id>http://booktest.anddle.com/4_开发/8_天气预报的布局/</id>
    <published>2017-02-02T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天气预报的布局"><a href="#天气预报的布局" class="headerlink" title="天气预报的布局"></a>天气预报的布局</h1><p>现在我们开始进行<code>天气预报</code>区域的布局。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_complete.png" width="300" alt=" weather_app_forcast_complete"></div>

<p>可以看出，这个区域，由5个完全一样的<code>组件</code>组合而成。只要我们完成一个组件-<code>天气预报项</code>的布局，再把这个布局<code>复制粘贴</code>，很容易就完成了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_item.png" width="70" alt=" weather_app_forcast_item"></div>

<h2 id="天气预报项"><a href="#天气预报项" class="headerlink" title="天气预报项"></a>天气预报项</h2><p>在<code>layout</code>目录上点击右键，选择<code>New -&gt; Layout resource file</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_create_forcast_item.png" width="600" alt=" weather_app_create_forcast_item"></div>

<p>输入布局文件的名字<code>forcast_item</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_create_forcast_item_name.png" width="200" alt=" weather_app_create_forcast_item_name"></div>

<p>一个新的布局文件<code>forcast_item.xml</code>就被创建到了<code>res\layout</code>目录下了。</p>
<p><code>天气预报项</code>的整体布局分成上中下3段，依次纵向排列，分别显示文字、图片、文字。</p>
<table>
<thead>
<tr>
<th style="text-align:center">区域名称</th>
<th style="text-align:center">区域高度</th>
<th style="text-align:center">选用控件或布局</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">日期</td>
<td style="text-align:center">占用剩余空间的上半部分</td>
<td style="text-align:center">TextView</td>
</tr>
<tr>
<td style="text-align:center">天气</td>
<td style="text-align:center">根据资源图片的高度确定</td>
<td style="text-align:center">ImageView</td>
</tr>
<tr>
<td style="text-align:center">温度范围</td>
<td style="text-align:center">占用剩余空间的下半部分</td>
<td style="text-align:center">TextView</td>
</tr>
</tbody>
</table>
<p>修改<code>forcast_item.xml</code>布局文件：</p>
<ol>
<li>给<code>LinearLayout</code>设置<code>android:orientation=&quot;vertical&quot;</code>属性；</li>
<li>让<code>LinearLayout</code>内部的组件，水平居中<code>android:gravity=&quot;center_horizontal&quot;</code>；</li>
<li>从上到下，依次放入<code>TextView</code> <code>ImageView</code> <code>TextView</code>；它们的布局属性如此设置：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">日期</th>
<th style="text-align:center">天气</th>
<th style="text-align:center">温度范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout_height</td>
<td style="text-align:center">0dp</td>
<td style="text-align:center">wrap_content</td>
<td style="text-align:center">0dp</td>
</tr>
<tr>
<td style="text-align:center">layout_width</td>
<td style="text-align:center">wrap_content</td>
<td style="text-align:center">wrap_content</td>
<td style="text-align:center">wrap_content</td>
</tr>
<tr>
<td style="text-align:center">layout_weight</td>
<td style="text-align:center">1</td>
<td style="text-align:center">无</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">id名称</td>
<td style="text-align:center">forcast_date</td>
<td style="text-align:center">forcast_icon</td>
<td style="text-align:center">forcast_temperature</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/forcast_date"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/forcast_icon"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/forcast_temperature"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里使用到了<code>LinearLayout</code>给内部组件使用到属性<code>layout_weight</code>。</p>
<p><code>layout_weight</code>表示一个组件的重要性，拥有这个属性的组件将根据它的数值，按照比例分得剩余空间。</p>
<p>就这里来讲，<code>日期</code>与<code>温度范围</code>都具有<code>1</code>的权重，因此它们将按照<code>1:1</code>的比例，瓜分除去<code>天气</code>占据的高度后，剩下的空间高度。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_item_layout_weight.png" width="350" alt=" weather_app_forcast_item_layout_weight"></div>

<p>为<code>日期</code>预设上显示的内容：</p>
<ol>
<li>设置<code>TextView</code>显示的文字内容，<code>android:text=&quot;明天&quot;</code>；</li>
<li>设置<code>TextView</code>文字的大小，<code>android:textSize=&quot;14sp&quot;</code>；</li>
<li>设置<code>TextView</code>文字的颜色，<code>android:textColor=&quot;#de000000&quot;</code>；</li>
<li>让文字显示居中，<code>android:gravity=&quot;center&quot;</code>;</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/forcast_date"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">   <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">   <span class="attr">android:text</span>=<span class="string">"明天"</span></div><div class="line">   <span class="attr">android:textColor</span>=<span class="string">"#DE000000"</span></div><div class="line">   <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">   <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</div></pre></td></tr></table></figure>
<p>为<code>天气</code>预设上显示的图片：</p>
<ol>
<li>设置<code>android:src=&quot;@mipmap/ic_sunny_cloudy_s&quot;</code>，加上图标；</li>
<li>设置<code>android:scaleType=&quot;center&quot;</code>，将图标正好占满控件的区域；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/forcast_icon"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_sunny_cloudy_s"</span></div><div class="line">   <span class="attr">android:scaleType</span>=<span class="string">"center"</span>/&gt;</div></pre></td></tr></table></figure>
<p>为<code>温度范围</code>预设上显示的内容：</p>
<ol>
<li>设置<code>TextView</code>显示的文字内容，<code>android:text=&quot;17℃～25℃&quot;</code>；</li>
<li>设置<code>TextView</code>文字的大小，<code>android:textSize=&quot;12sp&quot;</code>；</li>
<li>设置<code>TextView</code>文字的颜色，<code>android:textColor=&quot;#8a000000&quot;</code>；</li>
<li>让文字显示居中，<code>android:gravity=&quot;center&quot;</code>;</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/forcast_temperature"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">   <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">   <span class="attr">android:text</span>=<span class="string">"17℃～25℃"</span></div><div class="line">   <span class="attr">android:textColor</span>=<span class="string">"#8a000000"</span></div><div class="line">   <span class="attr">android:textSize</span>=<span class="string">"12sp"</span></div><div class="line">   <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_item_layout.png" width="200" alt=" weather_app_forcast_item_layout"></div>

<h2 id="使用include标签"><a href="#使用include标签" class="headerlink" title="使用include标签"></a>使用include标签</h2><p>接下来就可以给<code>天气预报</code>区域所在的<code>LinearLayout</code>，</p>
<ol>
<li><p>设置上水平显示的属性<code>android:orientation=&quot;horizontal&quot;</code>；</p>
</li>
<li><p>再把<code>天气预报项</code>的布局方式重复5次，放入其中。这就完成了这个区域的布局了；</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">   <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>哈哈，这样的做法真是简单又暴力。</p>
<p>不过，对于这种需要重复使用到的布局，<code>Android SDK</code>提供了一个非常方便的标签<code>include</code>。使用它就可以把一个布局重复的布局文件引入到另一个布局文件当中。</p>
<ol>
<li>在<code>LinearLayout</code>当中使用多个<code>include</code>标签；</li>
<li><p>给它们的<code>layout</code>属性设置上要重复使用的布局文件<code>forcast_item</code>；并给每个标签设置一个<code>id</code>。</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">   <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item3"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item4"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item5"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>这时还看不到期待的效果，原因是<code>forcast_item</code>当中的<code>LinearLayout</code>设置的宽度是<code>match_parent</code>-占据整个屏幕。我们需要让这些<code>天气预报项</code>平均占据屏幕的宽度，所以需要给<code>forcast_item.xml</code>中的<code>LinearLayout</code>设置上<code>android:layout_weight=&quot;1&quot;</code>的属性，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</div><div class="line"></div><div class="line">    ......</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>给<code>天气预报</code>区域的左右两边，加上<code>16dp</code>的边距；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"16dp"</span>&gt;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_complete-1.png" width="500" alt=" weather_app_forcast_complete"></div>

<p>从这个例子可以看出，<code>include</code>的作用就是把它自己<code>layout</code>属性指定的布局替换到<code>include</code>的位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;天气预报的布局&quot;&gt;&lt;a href=&quot;#天气预报的布局&quot; class=&quot;headerlink&quot; title=&quot;天气预报的布局&quot;&gt;&lt;/a&gt;天气预报的布局&lt;/h1&gt;&lt;p&gt;现在我们开始进行&lt;code&gt;天气预报&lt;/code&gt;区域的布局。&lt;/p&gt;
&lt;div align=&quot;ce
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>7 天气详情的布局</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/7_%E5%A4%A9%E6%B0%94%E8%AF%A6%E6%83%85%E7%9A%84%E5%B8%83%E5%B1%80/"/>
    <id>http://booktest.anddle.com/4_开发/7_天气详情的布局/</id>
    <published>2017-02-01T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天气详情的布局"><a href="#天气详情的布局" class="headerlink" title="天气详情的布局"></a>天气详情的布局</h1><p>整体布局完成之后，我们开始进行<code>天气详情</code>区域的布局。</p>
<p>这个区域由天气图标、当前温度、当日温度范围、地理位置等4个元素组成。我们可以选用<code>Android SDK</code>提供的现有控件，完成布局。</p>
<table>
<thead>
<tr>
<th>区域名称</th>
<th>区域高度</th>
<th>选用控件或布局</th>
</tr>
</thead>
<tbody>
<tr>
<td>天气图标</td>
<td>100dp</td>
<td>ImageView</td>
</tr>
<tr>
<td>当前温度</td>
<td>文字的字体决定</td>
<td>TextView</td>
</tr>
<tr>
<td>当日温度范围</td>
<td>文字的字体决定</td>
<td>TextView</td>
</tr>
<tr>
<td>地理位置</td>
<td>文字的字体决定</td>
<td>TextView</td>
</tr>
</tbody>
</table>
<p>这些区域的对齐分配，我们可以借助嵌套更多的<code>LinearLayout</code>来完成，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_layout.png" width="400" alt=" weather_app_weather_detail_layout"></div>


<h2 id="上下区域的划分"><a href="#上下区域的划分" class="headerlink" title="上下区域的划分"></a>上下区域的划分</h2><p>将天气图标、当前温度、当日温度范围归为上半区域，地理位置归为下半区域，</p>
<ol>
<li>使用<code>LinearLayout</code>进行分割;</li>
<li>给<code>天气详情</code>区域设置<code>Primary Color</code>-<code>#3F51B5</code>作为背景颜色；</li>
<li>上半区域设置高度<code>android:layout_height</code>为<code>100dp</code>，上边距<code>android:layout_marginTop</code>为<code>24dp</code>；</li>
<li>下半区域使用所有剩下的空间；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"244dp"</span></div><div class="line">   <span class="attr">android:background</span>=<span class="string">"#3F51B5"</span></div><div class="line">   <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">       <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></div><div class="line">       <span class="attr">android:background</span>=<span class="string">"#FFFF0000"</span>&gt;</div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:background</span>=<span class="string">"#FF00FF00"</span>&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_segments.png" width="300" alt=" weather_app_weather_detail_segments"></div>


<h2 id="天气图标与当日温度"><a href="#天气图标与当日温度" class="headerlink" title="天气图标与当日温度"></a>天气图标与当日温度</h2><p>天气图标与当日温度左右并列，</p>
<ol>
<li>为<code>LinearLayout</code>设置<code>horizontal</code>属性，使其内部的布局或控件水平排列，把它的高度修改成<code>wrap_content</code>；</li>
<li><p>将<code>ImageView</code>放置在左边，宽度设置成<code>150dp</code>，高度设置成<code>wrap_content</code>；</p>
<p> 同时给<code>ImageView</code>设定一个<code>id</code>-<code>android:id=&quot;@+id/weather_icon&quot;</code>。</p>
<p> 设定了<code>id</code>，以后再代码中获取它对应的控件就很方便了，只需要像这样，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ImageView im = (ImageView) findViewById(R.id.weather_icon);</div></pre></td></tr></table></figure>
<p> <code>java</code>源码通过<code>R.id.weather_icon</code>，将布局文件中的<code>ImageView</code>找了出来，转换成了可以通过<code>java</code>代码操作的对象。</p>
</li>
<li><p>将另一个<code>LinearLayout</code>放置在右边，宽度设置成<code>150dp</code>，高度设置成<code>100dp</code>；</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">  <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></div><div class="line">  <span class="attr">android:background</span>=<span class="string">"#FFFF0000"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/weather_icon"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"#FFFFFF00"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"#FF0000FF"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_up_segment.png" width="500" alt=" weather_app_weather_detail_up_segment"></div>

<p>此时布局很紧促，并且没有居中对齐，需要做进一步的设置，</p>
<ol>
<li>为<code>LinearLayout</code>设置<code>android:gravity=&quot;center&quot;</code>属性；让它内部的组件都能够居中放置；</li>
<li>给<code>温度区域</code>设置上<code>20dp</code>的左边距<code>android:layout_marginLeft</code>；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">  <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></div><div class="line">  <span class="attr">android:background</span>=<span class="string">"#FFFF0000"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">  <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/weather_icon"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"#FFFFFF00"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"#FF0000FF"</span></div><div class="line">      <span class="attr">android:layout_marginLeft</span>=<span class="string">"20dp"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_up_segment_complete.png" width="500" alt=" weather_app_weather_detail_up_segment_complete"></div>

<h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><p>将天气图标设置给<code>ImageView</code>，</p>
<ol>
<li>添加<code>android:src</code>属性，把图标id-<code>ic_sunny_cloudy_l</code>设置给它；</li>
<li>添加<code>android:scaleType</code>属性，设置值为<code>center</code>；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">  <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">  <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/weather_icon"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">      <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_sunny_cloudy_l"</span></div><div class="line">      <span class="attr">android:scaleType</span>=<span class="string">"center"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"#FF0000FF"</span></div><div class="line">      <span class="attr">android:layout_marginLeft</span>=<span class="string">"20dp"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_weather_icon.png" width="500" alt=" weather_app_weather_detail_weather_icon"></div>

<h3 id="添加温度"><a href="#添加温度" class="headerlink" title="添加温度"></a>添加温度</h3><p>使用<code>LinearLayout</code>将温度显示分为上下两个部分，显示温度的控件使用<code>TextView</code></p>
<ol>
<li>给<code>LinearLayout</code>的<code>orientation</code>设置为<code>horizontal</code>；</li>
<li>为<code>LinearLayout</code>设置<code>android:gravity=&quot;center_horizontal&quot;</code>属性；让它内部的组件都能够居中放置；</li>
<li>修改<code>LinearLayout</code>的高度为<code>wrap_content</code>;</li>
<li>放入2个<code>TextView</code>，用来分别当日温度和温度范围，并分别给它们指定<code>id</code>-<code>current_temperature</code>和<code>temperature_range</code>；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">  <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></div><div class="line">  <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">  <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line"></div><div class="line">  ......</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_marginLeft</span>=<span class="string">"20dp"</span></div><div class="line">      <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>&gt;</div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">          <span class="attr">android:id</span>=<span class="string">"@+id/current_temperature"</span></div><div class="line">          <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">          <span class="attr">android:id</span>=<span class="string">"@+id/temperature_range"</span></div><div class="line">          <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_temp_layout.png" width="500" alt=" weather_app_weather_detail_temp_layout"></div>

<h4 id="设置当前温度"><a href="#设置当前温度" class="headerlink" title="设置当前温度"></a>设置当前温度</h4><p>给当前温度设置上一个预设的显示内容：</p>
<ol>
<li>设置<code>TextView</code>显示的文字内容，<code>android:text=&quot;23°&quot;</code>；</li>
<li>设置<code>TextView</code>文字的大小，<code>android:textSize=&quot;56sp&quot;</code>；</li>
<li>设置<code>TextView</code>文字的颜色，<code>android:textColor=&quot;#b3ffffff&quot;</code>；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/current_temperature"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:text</span>=<span class="string">"23°"</span></div><div class="line">     <span class="attr">android:textColor</span>=<span class="string">"#b3ffffff"</span></div><div class="line">     <span class="attr">android:textSize</span>=<span class="string">"56sp"</span>/&gt;</div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_cur_temp_layout.png" width="300" alt=" weather_app_weather_detail_cur_temp_layout"></div>

<h4 id="设置温度范围"><a href="#设置温度范围" class="headerlink" title="设置温度范围"></a>设置温度范围</h4><p>给温度范围设置上一个预设的显示内容：</p>
<ol>
<li>设置<code>TextView</code>显示的文字内容，<code>android:text=&quot;17℃～25℃&quot;</code>；</li>
<li>设置<code>TextView</code>文字的大小，<code>android:textSize=&quot;24sp&quot;</code>；</li>
<li>设置<code>TextView</code>文字的颜色，<code>android:textColor=&quot;#ffffffff&quot;</code>；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/temperature_range"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:text</span>=<span class="string">"17℃～25℃"</span></div><div class="line">     <span class="attr">android:textColor</span>=<span class="string">"#ffffffff"</span></div><div class="line">     <span class="attr">android:textSize</span>=<span class="string">"24sp"</span>/&gt;</div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_range_temp_layout.png" width="300" alt=" weather_app_weather_detail_range_temp_layout"></div>

<h2 id="添加位置信息"><a href="#添加位置信息" class="headerlink" title="添加位置信息"></a>添加位置信息</h2><p>将<code>TextView</code>添加到下部的<code>LinearLayout</code>当中：</p>
<ol>
<li>位置为垂直居中，给<code>LinearLayout</code>设置<code>android:gravity=&quot;center_vertical&quot;</code>；</li>
<li>设置<code>TextView</code>的左边距为<code>24dp</code>；</li>
<li>设置<code>TextView</code>显示的文字内容，<code>android:text=&quot;成都</code>；</li>
<li>设置<code>TextView</code>文字的大小，<code>android:textSize=&quot;34sp&quot;</code>；</li>
<li>设置<code>TextView</code>文字的颜色，<code>android:textColor=&quot;#ffffffff&quot;</code>；</li>
<li><code>TextView</code>的<code>id</code>设置成<code>location</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/weather_location"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">      <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"成都"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"#ffffffff"</span></div><div class="line">      <span class="attr">android:textSize</span>=<span class="string">"34sp"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_weather_detail_location_layout.png" width="500" alt=" weather_app_weather_detail_location_layout"></div>

<p><em>这个区域的界面设计只是在<code>第1阶段</code>的实现中会使用到。当进入到<code>第2阶段</code>-使用<code>Material</code>设计规范来实现的时候，是不需要这个布局的，因为安卓系统能自动实现这个信息的显示。</em></p>
<hr>
<p>现在，天气详情的布局就全部完成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;天气详情的布局&quot;&gt;&lt;a href=&quot;#天气详情的布局&quot; class=&quot;headerlink&quot; title=&quot;天气详情的布局&quot;&gt;&lt;/a&gt;天气详情的布局&lt;/h1&gt;&lt;p&gt;整体布局完成之后，我们开始进行&lt;code&gt;天气详情&lt;/code&gt;区域的布局。&lt;/p&gt;
&lt;p&gt;这个区域
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>6 界面的整体布局</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/6_%E7%95%8C%E9%9D%A2%E7%9A%84%E6%95%B4%E4%BD%93%E5%B8%83%E5%B1%80/"/>
    <id>http://booktest.anddle.com/4_开发/6_界面的整体布局/</id>
    <published>2017-01-28T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面的整体布局"><a href="#界面的整体布局" class="headerlink" title="界面的整体布局"></a>界面的整体布局</h1><p>从这一章节开始，我们终于可以开始使用<code>Android Studio</code>写代码了。</p>
<p><code>天气预报</code>这个应用虽然功能很简单，但是对于从来没有接触过安卓开发的人来讲，开发完成还是需要很多步骤。为了减小学习的坡度，增加开发的阶段性成就感，我将<code>天气预报</code>分成2个阶段来开发，</p>
<ul>
<li><p>第1阶段：暂时不考虑<code>Material Design</code>的各种限制，比如<code>Appbar</code>的滑动效果，界面的配色设置，字体的大小等等，先把功能实现了再说；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase1_complete.png" width="250" alt=" weather_app_phase1_complete"></div>
</li>
<li><p>第2阶段：加入<code>Material Design</code>的种种要求，完善<code>天气预报</code>；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sketch_weather_app_static_effect_complete.png" width="250" alt=" sketch_weather_app_static_effect_complete"></div>

</li>
</ul>
<p>我们就从第一阶段开始。</p>
<h2 id="Activity与布局"><a href="#Activity与布局" class="headerlink" title="Activity与布局"></a>Activity与布局</h2><p><code>Activity</code>几乎是每个应用必有的组件，所以任何安卓应用的开发几乎都是从<code>Activity</code>开始的。</p>
<p>你甚至可以简单的认为，手机屏幕上能看到的整个界面，就是一个<code>Activity</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sketch_weather_app_static_effect_complete.png" width="250" alt=" sketch_weather_app_static_effect_complete"></div>

<p>使用<code>Android Studio</code>创建工程后，会默认为我们创建一个<code>Activity</code>组件。它继承自<code>Android SDK</code>的<code>Activity</code>或其派生类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Activity</code>界面具体该长成什么样，是通过布局文件决定的。它位于项目的<code>res\layout\activity_main.xml</code>文件中。</p>
<p>这个布局文件通过java源代码<code>MainActivity.java</code>中的<code>setContentView()</code>函数，设置到界面上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/activity_xml_relation.png" width="500" alt=" activity_xml_relation"></div>

<p>可以说<code>xml</code>布局文件，负责<code>Activity</code>的外观容貌；<code>java</code>源代码，负责<code>Activity</code>的逻辑控制。<code>java</code>控制着<code>xml</code>中的各个元素的显示逻辑。</p>
<p>接下来，我们<code>天气预报</code>界面的布局，就会在布局文件<code>activity_main.xml</code>中进行。</p>
<p><em><code>WeatherApp</code>工程项目中的<code>MainActicity</code>继承自<code>AppCompatActivity</code>。<code>AppCompatActivity</code>也是<code>Activity</code>的子类，所以是没有问题的。这个<code>AppCompatActivity</code>作用是为了兼容各个版本的<code>Android SDK</code>而使用的，我们会在今后给出详细的介绍。</em></p>
<h2 id="布局的划分"><a href="#布局的划分" class="headerlink" title="布局的划分"></a>布局的划分</h2><p>整个布局被分成了以下几个部分：</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_layout_segments.png" width="300" alt=" weather_app_layout_segments"></div>

<ol>
<li>Appbar：占据高度56dp；</li>
<li>天气详情：显示当日的温度范围和实时天气，占据高度300dp - 56dp = 244dp；按照最终的设计，<code>天气详情</code>是需要放在<code>Appbar</code>里面的，但是第1阶段做了简化，所以将它单独拿出来了；</li>
<li>天气预报：显示未来5日的天气预报，占据高度100dp；</li>
<li>分割线：占据高度10dp；</li>
<li>相关信息：当日天气的相关信息，占据所有剩余空间的高度；</li>
</ol>
<p>Appbar的存在是由系统决定的，我们就不做修改了，主要是分配<code>2～5</code>的布局空间。</p>
<h3 id="布局与控件"><a href="#布局与控件" class="headerlink" title="布局与控件"></a>布局与控件</h3><p>界面设计需要先认识两类工具：<code>控件Control</code>与<code>布局Layout</code>。</p>
<ul>
<li><p><code>控件Control</code>就是我们常常看到的<code>按钮</code> <code>滑动条</code> <code>文字显示区</code>等等，它们就像房间里的家具，是界面设计的最小单位。为了简小界面开发的难度，<code>SDK</code>会提供很多现成的界面小组件供开发者使用。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/matiaral_controls.png" width="400" alt=" matiaral_controls"></div>
</li>
<li><p><code>布局Layout</code>是一个可以容纳别的布局（或者控件）的容器。它就像是一个大的房间，房间里面可以放各种家具（控件），也可以再隔离成更多的房间（放入别的布局）。</p>
  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/layout_concept.png" width="300" alt=" layout_concept"></div>

</li>
</ul>
<p>不过两者有很多共同的地方，例如指定它们大小、边距的方式等等。</p>
<p>给<code>天气预报</code>设计布局，就是通过选用<code>Android SDK</code>中合适的布局和控件来实现的。</p>
<h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><p>整个应用的内容都是放在一个大的<code>布局Layout</code>当中的。因此要首先确定这个最大的<code>布局</code>。</p>
<p><code>Android SDK</code>提供了一个叫做<code>LinearLayout</code>的布局控件。它能够让存放于其中的其他控件按照首尾顺序，一个接一个的排队摆放。正好符合我们的要求。</p>
<ol>
<li>编辑<code>activity_main.xml</code>文件，删除其中原有的<code>TextView</code>控件，删除<code>RelativeLayout</code>中的各种<code>padding</code>；</li>
<li>将原来的<code>RelativeLayout</code>修改成<code>LinearLayout</code>；</li>
<li>给<code>LinearLayout</code>增加<code>android:orientation</code>属性，其值设置成<code>vertical</code>–将它包含的内容以竖直方式排列;</li>
<li><code>LinearLayout</code>负责放置应用的整个内容，需要尽可能占用整个屏幕，因此使用<code>match_parent</code>指定布局的宽度和高度。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.anddle.weatherapp.MainActivity"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在通过预览窗口，可以看到界面变成了这样，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/layout_wraper.png" width="300" alt=" layout_wraper"></div>

<p><em>注意：文字<code>WeatherApp</code>所在的<code>Appbar</code>是系统自带的，并不是<code>activity_main.xml</code>中设计的。</em></p>
<p>在设置布局或者控件大小的时候，会使用它们的<code>android:layout_width</code>和<code>android:layout_height</code>属性，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">View</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>它们的值可以设定成，</p>
<ol>
<li>特定的数值：例如<code>5dp</code>。当然也可以使用除了<code>dp</code>以外其他的尺寸单位，但是考虑到屏幕的像素密度不同，我们都使用<code>dp</code>为单位；</li>
<li><code>match_parent</code>：以父布局的宽度（或长度）为界，尽可能占据全部空间；</li>
<li><code>wrap_content</code>：以子布局或控件内容的宽度（或长度）为界，尽可能少占据空间；</li>
</ol>
<h3 id="容器的分配"><a href="#容器的分配" class="headerlink" title="容器的分配"></a>容器的分配</h3><p>其他几个区域都占据了整个屏幕都宽度，只是高度各不相同，</p>
<table>
<thead>
<tr>
<th>区域名称</th>
<th>区域高度</th>
<th>选用控件或布局</th>
</tr>
</thead>
<tbody>
<tr>
<td>天气详情</td>
<td>244dp</td>
<td>LinearLayout</td>
</tr>
<tr>
<td>未来5日天气预报</td>
<td>100dp</td>
<td>LinearLayout</td>
</tr>
<tr>
<td>分割线</td>
<td>10dp</td>
<td>View</td>
</tr>
<tr>
<td>相关信息</td>
<td>剩余的所有高度</td>
<td>ListView</td>
</tr>
</tbody>
</table>
<p><code>View</code>：是安卓系统中最为基本界面的组件，所有的布局与控件都是<code>特殊的View</code>（它们都是<code>View</code>的子类）。这里用来作为分割线。</p>
<p><code>ListView</code>：是安卓SDK提供的列表控件，将数据项用列表的形式展现出来。<br>给<code>ListView</code>布局增加一个<code>id</code>叫做<code>weather_more_info_list</code>。<br>我们后面在详细的介绍用法。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.anddle.weatherapp.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"244dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#FFFF0000"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#FF00FF00"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#1F000000"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_list"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#FF0000FF"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了明显的看到各个控件与布局占据的屏幕空间分布情况，我给每个控件或布局都添加上了<code>android:background</code>属性，给它们设置上了不同的颜色以示区别，后面再将它们移除。最后的效果如下，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/layout_segments.png" width="300" alt=" layout_segments"></div>


<p>安卓系统中的颜色数值，可以用4种方式表示，</p>
<ul>
<li>RGB：8位RGB数值。例如红色F00，绿色0F0，蓝色00F；</li>
<li>ARGB：8位RGB数值，外加8位Alpha透明度值。例如透明度为8的红色8F00，绿色80F0，蓝色800F</li>
<li>RRGGBB：16位RGB数值。例如红色FF0000，绿色00FF00，蓝色0000FF；</li>
<li>AARRGGBB：16位RGB数值，外加16位Alpha透明度值。例如透明度为0F的红色0FFF0000，绿色0F00FF00，蓝色0F0000FF；</li>
</ul>
<h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><p>将修改的内容提交到GitHub上，这一步和之前的操作并没有任何的不同。</p>
<p>不过这里介绍一下你可能会遇到的意外情况：假如<code>commit</code>之后<code>push</code>之前，我发现自己<code>commit</code>的内容有问题，要撤销上一步的<code>commit</code>。这该怎么办？比如将<code>commit</code>时要记录的信息写错了，要退回到<code>commit</code>之前的状态。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/git_commit_error.png" width="300" alt=" git_commit_error"></div>

<p>改正的方法很简单：</p>
<ol>
<li>在上一次正确的<code>commit</code>项上，点击右键；</li>
<li><p>选择<code>Reset Current Branch to Here...</code>;</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/git_commit_revert_1.png" width="400" alt=" git_commit_revert_1"></div>
</li>
<li><p>在弹出的菜单项上，选择<code>Mix</code>（每种选择的效果都有对应的解释，<code>Mix</code>就是说返回<code>commit</code>之前的状态，并保留修改的内容），并点击<code>Reset</code>；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/git_commit_revert_2.png" width="300" alt=" git_commit_revert_2"></div>

</li>
</ol>
<p>这样，整个<code>commit</code>就回到了未被提交时的状态。检查之后再做重新的<code>commit</code>。这一次就得小心仔细一些啦！</p>
<p>假如你不仅<code>commit</code>了，而且还<code>push</code>到远端的仓库中了，要恢复该怎么办呢？</p>
<p>答案是没办法了，你只能重新修改一次，再提交。之前的修改已经被记录在案了。所以每次<code>push</code>一定要注意，不然你的合作开发者一定会看到你的粗心大意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面的整体布局&quot;&gt;&lt;a href=&quot;#界面的整体布局&quot; class=&quot;headerlink&quot; title=&quot;界面的整体布局&quot;&gt;&lt;/a&gt;界面的整体布局&lt;/h1&gt;&lt;p&gt;从这一章节开始，我们终于可以开始使用&lt;code&gt;Android Studio&lt;/code&gt;写代码了。
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>5 资源的导入</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/5_%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BC%E5%85%A5/"/>
    <id>http://booktest.anddle.com/4_开发/5_资源的导入/</id>
    <published>2017-01-27T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资源的导入"><a href="#资源的导入" class="headerlink" title="资源的导入"></a>资源的导入</h1><p>在前面讲解产品原型设计的章节中，我们已经创建出了各种开发时需要使用的各种图标了，包括应用图标、系统图标等等。</p>
<h2 id="图标导入"><a href="#图标导入" class="headerlink" title="图标导入"></a>图标导入</h2><p>现在，我们先把开发过程中要使用到的图片资源添加到<code>Android Studio</code>工程目录当中。</p>
<ol>
<li><p>将<code>Sketch</code>创建的静态高保真原型中的图标，根据导出的尺寸，将它们分类整理到对应的文件夹当中，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/4_5_drawable_resource_scale.png" width="250" alt=" 4_5_drawable_resource_scale"></div>
</li>
<li><p>打开<code>天气预报</code>所在的<code>Android Studio</code>的工程文件夹-<code>app -&gt; src -&gt; main -&gt; res</code>，将图片替换到对应的<code>mipmap</code>目录当中；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/import_icons.png" width="400" alt=" import_icons"></div>
</li>
<li><p>重新部署应用到设备上，桌面上的<code>天气预报</code>应用图标，已经从以前的安卓机器人，变成了新的图标了，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_icon_changed.png" width="200" alt=" app_icon_changed"></div>

</li>
</ol>
<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p>我们新增了约90个图片资源，需要将它们加入到Git的版本控制之中。</p>
<ol>
<li>查看<code>Version Control: -&gt; Local Changes -&gt; browse</code>;</li>
<li><p>在弹出的对话框中，选中需要加入版本控制的90个图片文件，点击左边的<code>+</code>；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/icon_resources_add_to_git.png" width="600" alt=" icon_resources_add_to_git"></div>
</li>
<li><p>需要管理的文件被添加到了<code>stage</code>当中； </p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/icon_resources_add_to_git_2.png" width="250" alt=" icon_resources_add_to_git_2"></div>
</li>
<li><p>之后再把这些改动，按照上一张讲到提交到本地库和远程GitHub当中的方式进行操作就可以了；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/icon_resources_commit.png" width="600" alt=" icon_resources_commit"></div>

</li>
</ol>
<h2 id="图片的使用"><a href="#图片的使用" class="headerlink" title="图片的使用"></a>图片的使用</h2><p>对于那些导入的图片资源，<code>Android Studio</code>会做进一步处理，自动生成一个<code>R.java</code>文件，文件中给每一张图片生成一个对应的<code>id</code>值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">mipmap</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_air_quality=<span class="number">0x7f030000</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_cloudy_l=<span class="number">0x7f030001</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_cloudy_s=<span class="number">0x7f030002</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_fog_l=<span class="number">0x7f030003</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_fog_s=<span class="number">0x7f030004</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_humidity_level=<span class="number">0x7f030005</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_launcher=<span class="number">0x7f030006</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_rainy_l=<span class="number">0x7f030007</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_rainy_s=<span class="number">0x7f030008</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_snow_l=<span class="number">0x7f030009</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_snow_s=<span class="number">0x7f03000a</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_sport_level=<span class="number">0x7f03000b</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_sunny_cloudy_l=<span class="number">0x7f03000c</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_sunny_cloudy_s=<span class="number">0x7f03000d</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_sunny_l=<span class="number">0x7f03000e</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_sunny_s=<span class="number">0x7f03000f</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_ultraviolet_level=<span class="number">0x7f030010</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_wind_direction=<span class="number">0x7f030011</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_wind_level=<span class="number">0x7f030012</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们要使用对应资源的时候，直接使用<code>java代码</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> id = R.mipmap.ic_launcher;</div></pre></td></tr></table></figure>
<p>就可以了。</p>
<p>通过这种方式，完成了<code>资源</code>到<code>代码</code>的转换。</p>
<h2 id="资源的条件命名法"><a href="#资源的条件命名法" class="headerlink" title="资源的条件命名法"></a>资源的条件命名法</h2><p>图片资源文件夹的命名方式很有特点，在主名字之后，使用<code>-</code>间隔了一些扩展名字。例如，</p>
<p><code>mipmap-hdpi mipmap-xhdpi</code></p>
<p>目录名用“－”增加了限制条件。也就是给目录里资源的使用增加了约束。</p>
<p>这里用<code>mipmap-hdpi</code>文件夹举例说明：如果当前的设备属于<code>hdpi</code>类型的屏幕，那么在使用图片的时候，系统优先使用其中的图片。</p>
<p>除了上面的目录结构，有时你还会看到如下的目录形式：</p>
<ol>
<li><code>mipmap-hdpi</code>：给属于<code>hdpi</code>的设备使用;</li>
<li><code>values-zh</code>：给当前语言是中文的系统使用;</li>
<li><code>layout-land</code>：给处于横屏状态的系统使用;</li>
</ol>
<h2 id="图片的优化"><a href="#图片的优化" class="headerlink" title="图片的优化"></a>图片的优化</h2><h3 id="屏幕密度选择性匹配"><a href="#屏幕密度选择性匹配" class="headerlink" title="屏幕密度选择性匹配"></a>屏幕密度选择性匹配</h3><p>并不是说一定要为所有的屏幕密度做对应图片尺寸的匹配，因为如果做全部匹配会让程序的体积快速增大。</p>
<p>大多数时候，我们会选择先做高清晰度的尺寸，例如<code>xxhdpi</code>。其他屏幕密度的设备需要使用资源时，就会把<code>xxhdpi</code>中的资源，做适度的缩放，以达到匹配的效果。</p>
<p>对于个别系统缩放也达不到显示要求的图片，才做针对不同屏幕密度的配套图片。</p>
<p><em>我们的<code>天气预报</code>把所有尺寸的屏幕密度都做了适配。</em></p>
<h3 id="矢量图标"><a href="#矢量图标" class="headerlink" title="矢量图标"></a>矢量图标</h3><p>另外，对于很多系统图标，我们也可以不使用<code>png</code>图片，而采用矢量图，让安卓系统绘制图标。这样一来，程序的体积可以跟小，显示效果也更为出众。</p>
<p>不过大家初次接触安卓开发，为了减少不必要的枝节，我就隐去了这部分内容，将来再和大家详细的讲述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;资源的导入&quot;&gt;&lt;a href=&quot;#资源的导入&quot; class=&quot;headerlink&quot; title=&quot;资源的导入&quot;&gt;&lt;/a&gt;资源的导入&lt;/h1&gt;&lt;p&gt;在前面讲解产品原型设计的章节中，我们已经创建出了各种开发时需要使用的各种图标了，包括应用图标、系统图标等等。&lt;/p&gt;
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>4 版本管理</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/4_%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>http://booktest.anddle.com/4_开发/4_版本管理/</id>
    <published>2017-01-26T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><p>前面已经提到了，非常有必要对开发的代码进行管理。那么进行版本管理到底什么时候使用呢？</p>
<p>我总结了使用版本管理的主要场景，有以下3种：</p>
<ol>
<li><p>对于个人开发者，版本管理能记录开发的变迁。它记录了所有文档的修改记录，就好比玩游戏时，我们都会时刻存档，就怕哪一次不小心，控制的角色挂了；假如不存档，出了问题，必须得从新开始。</p>
<p> 如果使用了版本管理，就可以随时保存文档修改的进度。一旦文档任何时候出现了问题，或者希望快速还原到之前某个特定的状态，都可以很容易的切换过去。省去了程序员不少麻烦，毕竟谁也记不清哪年哪月哪日我添加了一段什么代码，目的是什么，而正是这段代码引起了bug，搞得我现在大脑崩溃。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/version_rollback.png" width="200" alt=" version_rollback"></div>
</li>
<li><p>当多个程序员开发同一个项目的时候，版本管理工具能很好的协调彼此的工作，让大家开发的代码不会冲突、互相干扰，即使出现了问题，也能很快找到原因。</p>
<p> 比如<code>程序员A</code>在他的开发代码中修改了<code>work.java</code>中第15行的内容，同时<code>程序员B</code>在他的开发代码中修改了<code>work.java</code>中第20行的内容。两人把修改提交保存的时候，版本管理工具，会把两人的修改合并起来。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/modify_different_lines.png" width="300" alt=" modify_different_lines"></div>

<p> 如果<code>程序员A</code>在他的开发代码中修改了<code>work.java</code>中第15行的内容，同时<code>程序员B</code>在他的开发代码中也修改了<code>work.java</code>中第15行的内容。两人把修改的内容提交保存的时候，版本管理工具，会发现两人的修改冲突，告诉<code>A</code>和<code>B</code>，让他们两协商解决问题。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/modify_same_lines.png" width="300" alt=" modify_same_lines"></div>
</li>
<li><p>文档的修改积累到一定程度，比如说完成了设计的所有内容，就可以设置一个大的节点。后继的开发可以分成两支：一支继续添加新的功能；一支修复现有程序的bug。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/make_dev_branch.png" width="300" alt=" make_dev_branch"></div>

</li>
</ol>
<h2 id="管理的工具"><a href="#管理的工具" class="headerlink" title="管理的工具"></a>管理的工具</h2><p>为了满足前面提到使用场景，在软件开发的不同历史阶段，出现了不同的版本管理工具：从<code>CVS</code>，到<code>SVN</code>，再到现在使用最广泛的<code>Git</code>。</p>
<p>早期的版本控制软件存在的各种缺点，都被后来的代替者解决了。在安卓的开发中，基本上都在使用<code>Git</code>作为版本控制工具。</p>
<p><code>Git</code>是<code>Linux</code>之父Linus Torvalds亲自开发的工具，有着高效的管理能力。它最为基本的运作思路大致如下：</p>
<ol>
<li><p>仓库<code>Repository</code>是一个<code>Git项目</code>的容器，里面存放着文档（包括代码）、以及各个文档的历史修改信息；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/git_repository.png" width="200" alt=" git_repository"></div>
</li>
<li><p>仓库<code>Repository</code>可以存在于网络端，也可以存在于本地电脑当中；</p>
</li>
<li><p>仓库有两种获取的方式，一个是clone网络端已有的；一个是在本地电脑上自行创建，再通过网络提供给别人访问；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/git_location.png" width="250" alt=" git_location"></div>
</li>
<li><p>假如对本地的仓库内容进行了修改，要保存修改进度的时候，</p>
<ol>
<li>要先将这些修改放到stage当中，</li>
<li>然后提交-<code>commit</code>到本地的仓库中，此时会产生一个全局唯一识别码-<code>Commit ID</code>，就像<code>f27af79</code>；</li>
<li>将<code>commit</code>后的内容推送<code>push</code>到网络端，而这个<code>Commit ID</code>就代表你这次提交的唯一标记；</li>
<li><p>假如推送的时候，自己修改的代码和仓库中的代码出现了冲突<code>Conflit</code>（因为修改了同一处的代码导致），那么推送者就需要查看代码、找到修改这段代码的提交者商量修改方案，解决冲突；</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/git_commit_push.png" width="300" alt=" git_commit_push"></div>
</li>
</ol>
</li>
<li><p>其他开发者假如clone了这个仓库，就能看到<code>Commit</code>后的各种修改，并通过拉取<code>pull</code>的操作从网络端把更新同步到自己本地的代码当中；</p>
</li>
<li><p>假如同步代码的过程中，自己的代码和别人的修改发生了冲突<code>Conflit</code>，那么拉取者就需要查看代码、找到修改这段代码的提交者商量修改方案，解决冲突；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/modify_same_lines.png" width="300" alt=" modify_same_lines"></div>

</li>
</ol>
<p>除此之外，Git还拥有软件工程方面的实用技巧，例如创建开发分支<code>Branch</code>，给代码打标签<code>Tag</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/git_branch_tag.png" width="300" alt=" git_branch_tag"></div>

<p><em>更加详细的内容，可以参考<a href="https://git-scm.com/" target="_blank" rel="external">这里</a>。里面还列举出了各个平台下可以选择的<a href="https://git-scm.com/downloads/guis" target="_blank" rel="external">图形化工具</a>。</em></p>
<h2 id="Github的使用"><a href="#Github的使用" class="headerlink" title="Github的使用"></a>Github的使用</h2><p><a href="https://github.com/" target="_blank" rel="external">Github</a>几乎是全世界程序员都知道的项目托管平台，我们可以把代码放在这个平台上。整个项目的托管就是基于<code>Git</code>的原理实现的。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/github_website.png" width="400" alt=" github_website"></div>

<p>Github在<code>Git</code>管理中充当着网络端的功能，扮演中心服务器的角色，让我们可以随时更新代码、提交代码，分享代码。</p>
<p>而<code>Android Studio</code>具有对Github平台的原生支持，让我们在开发的时候能够无缝的加入对软件版本控制的管理功能。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_integrate_github.png" width="350" alt=" as_integrate_github"></div><br><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_%20integrate_github2.png" width="400" alt=" as_ integrate_github2"></div>

<h3 id="Github的注册"><a href="#Github的注册" class="headerlink" title="Github的注册"></a>Github的注册</h3><p>打开Github的官网，按照指示很容易的注册一个账号。</p>
<p>登陆账号后，可以看到你现在具有的仓库-<code>Repository</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/github_repository.png" width="250" alt=" github_repository"></div>

<p>我之前已经创建过几个免费仓库了，所以列表里会将它们呈现出来。如果是新注册的账号，这里应该是空的。</p>
<h3 id="Android-Studio的配置"><a href="#Android-Studio的配置" class="headerlink" title="Android Studio的配置"></a>Android Studio的配置</h3><p>现在我们来把之前创建的<code>天气预报</code>工程，托管到Github上：</p>
<ol>
<li>启动<code>工具栏</code>的<code>VCS -&gt; Import into Version Control -&gt; Share Project on Github</code>；</li>
<li>在弹出的窗口中，根据提示输入Github上的账户名和密码；</li>
<li>输入项目的名称<code>WeatherApp</code>和项目描述，选择<code>Share</code>； <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_share_project_to_github1.png" width="400" alt=" as_share_project_to_github1"></div></li>
<li>确认要添加到管理中的文件（代码、配置、资源等文件），并给这次提交添加描述信息； <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_share_project_to_github2.png" width="300" alt=" as_share_project_to_github2"></div>

</li>
</ol>
<p>刷新Github上的个人主页，可以看到新添加的项目仓库<code>WeatherApp</code>已经出现在那里了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_share_project_to_github_result1.png" width="250" alt=" as_share_project_to_github_result1"></div>

<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_share_project_to_github_result2.png" width="400" alt=" as_share_project_to_github_result2"></div>

<p>此时看看<code>Android Studio</code>的<code>Version Control窗口</code>，就能看到当前的代码管理情况，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_version_control_window.png" width="500" alt=" as_version_control_window"></div>


<h3 id="Android-Studio的Git管理"><a href="#Android-Studio的Git管理" class="headerlink" title="Android Studio的Git管理"></a>Android Studio的Git管理</h3><h4 id="提交与推送入库"><a href="#提交与推送入库" class="headerlink" title="提交与推送入库"></a>提交与推送入库</h4><p>Git版本管理有很多用法，这里我们先介绍两个最常使用的功能<code>commit</code>与<code>push</code>。</p>
<p>假如我们修改了<code>WeatherApp</code>的<code>MainActivity.java</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_main_activity_modify_for_git_demo.png" width="400" alt=" as_main_activity_modify_for_git_demo"></div>

<p><code>LocalChanges选项卡</code>会将当前发生了变化的、被版本管理记录的文件列出来，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_main_activity_modify_list.png" width="500" alt=" as_main_activity_modify_list"></div>

<p>点击提交<code>commit</code>按钮，会将修改过的文件放入stage状态，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_main_activity_commit1.png" width="100" alt=" as_main_activity_commit1"></div>

<p>并展示当前要提交<code>commit</code>文件的状态，让我们再次确认。当我们点击被修改过的文档时，<code>Android Studio</code>会为我们展示当前修改后的文档与修改前的文档有哪些异同。让我们在最后提交之前，再次检查确认一次，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_main_activity_commit2.png" width="500" alt=" as_main_activity_commit2"></div>

<p>检查无误后，选择提交并推送入库-<code>Commit and Push</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_main_activity_commit3.png" width="200" alt=" as_main_activity_commit3"></div>

<p>假如没有冲突发生，就能看到提交成功，版本控制增加新的节点，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_main_activity_commit_result1.png" width="400" alt=" as_main_activity_commit_result1"></div>

<p>Github上项目对应的代码页，也会更新，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_main_activity_commit_result2.png" width="500" alt=" as_main_activity_commit_result2"></div>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>Android Studio</code>还提供了创建分支<code>Branch</code>、创建标签<code>Tag</code>、以及在不同节点上来回切换的功能，这里就不详细描述了。</p>
<p>因为这些内容如果没有实际的例子，讲起来会很枯燥。我会在开发的过程中根据需要穿插进响应的内容，这样大家理解起来就会非常的方便了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;版本管理&quot;&gt;&lt;a href=&quot;#版本管理&quot; class=&quot;headerlink&quot; title=&quot;版本管理&quot;&gt;&lt;/a&gt;版本管理&lt;/h1&gt;&lt;p&gt;前面已经提到了，非常有必要对开发的代码进行管理。那么进行版本管理到底什么时候使用呢？&lt;/p&gt;
&lt;p&gt;我总结了使用版本管理的主
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>3 应用的创建与部署</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/3_%E5%BA%94%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>http://booktest.anddle.com/4_开发/3_应用的创建与部署/</id>
    <published>2017-01-25T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用的创建与部署"><a href="#应用的创建与部署" class="headerlink" title="应用的创建与部署"></a>应用的创建与部署</h1><p>现在我们开始创建一个全新的项目工程-<code>天气预报</code>，并在编译后让它运行到真实的设备上。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/deploy_app_to_device.png" width="300" alt=" deploy_app_to_device"></div>

<h2 id="创建应用工程"><a href="#创建应用工程" class="headerlink" title="创建应用工程"></a>创建应用工程</h2><p>运行<code>Android Studio</code>，</p>
<ol>
<li><p>启动Android Studio，选择<code>Start a new Android Projcet</code>；</p>
</li>
<li><p>在<code>Application name</code>栏，为应用取个名字为<code>WeatherApp</code>；</p>
</li>
<li>在<code>Company Domain</code>栏，按照网址的形式填上<code>anddle.com</code>－－当然，你也可以根据自己的喜好填上别的域名；</li>
<li><p>在<code>Project location</code>栏，填写应用存放的位置，可以选择任意你希望存放项目工程的目录。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_as_project_config.png" width="500" alt=" create_as_project_config"></div>
</li>
<li><p>在下一步中，勾选上<code>Phone and Tablet</code>；</p>
</li>
<li><p><code>Minimum SDK</code>的选择，要与调试设备的安卓版本尽量一致，我们这里至少要是<code>Android 5.0</code>以上，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_as_project_sdk_select.png" width="500" alt=" create_as_project_sdk_select"></div>

<p> <em>*手机版本与API等级的对应关系如下：</em></p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_version.png" width="600" alt=" android_version"></div>
</li>
<li><p><code>下一步</code>后，选择<code>Empty Activity</code>，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_as_project_activity.png" width="500" alt=" create_as_project_activity"></div>
</li>
<li><p>选择<code>下一步</code>后，开始设置<code>Activity</code>相关的信息；</p>
<ol>
<li>在<code>Activity Name</code>栏，Activity采用默认的名字<code>MainActivity</code>；</li>
<li>在<code>Layout Name</code>栏，layout文件也采用默认的名字<code>activity_main</code>；</li>
<li><p>勾选上<code>Backwards Compatiblility</code>；</p>
<p><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_as_project_activity_settings.png" width="400" alt=" create_as_project_activity_settings"></div><br><code>Activity</code>代表一个应用的主界面；而<code>Activity</code>具体长什么样子，就是靠布局文件<code>Layout</code>来指定的，二者是互相关联的关系。</p>
<p><code>Activity</code>与<code>Layout</code>将在后面做详细的介绍。</p>
</li>
</ol>
</li>
</ol>
<p>选择<code>完成</code>后，工程也就创建完成，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_as_project_complete.png" width="500" alt=" create_as_project_complete"></div>

<p><em>*因为Android Studio是第一次创建项目工程，因此需要连接网络下载一些组件，需要多等待一些时间。一旦下载成功，以后创建工程就不会花费这些时间了。</em></p>
<h2 id="AS界面初步"><a href="#AS界面初步" class="headerlink" title="AS界面初步"></a>AS界面初步</h2><p>Android studio是Google为Android应用开发提供的一个强大的集成开发环境（IDE），有着非常多的帮助开发者进行开发的工具。</p>
<p>虽然Android应用也可以使用Eclipse开发，但是Android Studio将是Google未来唯一长期支持的开发工具。</p>
<p>Android Studio启动并打开工程后它的默认布局大体如下：</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_layout.png" width="700" alt=" as_layout"></div>

<p>这些布局并不是一成不变的，我们可以通过拖动它们，调整它们的位置和大小，可以隐藏一些区域，在需要这些区域的时候再显示它们。</p>
<h3 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h3><p>浏览当前的项目工程是最经常遇到的，<code>Android Studio</code>提供了多种对项目查看的方式，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_project_browser.png" width="300" alt=" as_project_browse"></div>

<p>它们从不同的角度来展示一个工程的方方面面。大家可以切换看看，不同的效果。</p>
<h4 id="Project浏览方式"><a href="#Project浏览方式" class="headerlink" title="Project浏览方式"></a>Project浏览方式</h4><p>当选择<code>Project浏览方式</code>的时候，它就像资源管理器的树形结构展开。所以当你希望看看磁盘上实实在在存在的关于这个项目的文件夹和目录的时候，就可以使用<code>Projcect浏览方式</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_project_browse_project.png" width="200" alt=" as_project_browse_project"></div>

<ol>
<li><p>app文件夹：这是工程产生后，<code>Android Studio</code>自动创建的<code>module</code>所在文件夹。</p>
<p><em><code>Module</code>是<code>Android Studio</code>工程中的一个功能单位。我们应用程序的源码和资源文件就放在这个<code>module</code>当中。</em></p>
<p>目前来说，我们需要使用到并修改到的内容，都在这个文件夹里面。其它的可以暂时不管。</p>
</li>
<li><p>src文件夹里面有三个子文件夹：<code>androidTest</code>、<code>test</code>和<code>main</code>。<code>androidTest</code>和<code>test</code>从名字就知道，里面放的是和测试我们程序相关的内容。目前我们将重点放到介绍开发上，测试的内容以后再讲。</p>
<p><code>main</code>文件夹分了<code>java</code>和<code>res</code>两支，<code>java</code>存放的是<code>java源代码</code>，<code>res</code>存放的是<code>资源文件</code>。</p>
<p><code>main</code>文件夹下面的<code>AndroidManifest.xml</code>文件是当前安卓应用自己的配置文件，我们将在开发过程当中重点详细的介绍。</p>
</li>
</ol>
<h4 id="Android浏览方式"><a href="#Android浏览方式" class="headerlink" title="Android浏览方式"></a>Android浏览方式</h4><p>这是安卓安卓程序的逻辑功能划分的浏览方式，将配置文件（<code>manifest文件</code>）、代码（<code>java文件</code>）、资源（图片、字符串、布局文件等等）分类存放，显得非常整洁，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_project_browse_android.png" width="250" alt=" as_project_browse_android"></div>

<p>刚开始，我们就使用<code>Project</code>和<code>Android</code>两种浏览方式吧。随着经验的增加，会逐步发现其他浏览模式的方便之处。</p>
<h3 id="UI所见即所得"><a href="#UI所见即所得" class="headerlink" title="UI所见即所得"></a>UI所见即所得</h3><p>通过<code>Android浏览方式</code>，打开<code>res -&gt; layout-&gt; activity_main.xml</code>，会出现对应的设备上的预览效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_ui_wgisws.png" width="600" alt=" as_ui_wgisws"></div>

<p>当选择不同的预览设备时，预览界面会根据不同的设备做相应的变化。这个功能在做多尺寸设备的界面布局设计时非常有用。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_ui_device_screen.png" width="250" alt=" as_ui_device_screen"></div>

<h3 id="暗黑主题"><a href="#暗黑主题" class="headerlink" title="暗黑主题"></a>暗黑主题</h3><p>在<code>Android Studio</code>中，还有一个我们程序员非常喜欢使用的暗黑主题，</p>
<ol>
<li>启动<code>设置</code>，选择<code>Appearance -&gt; Theme</code>;</li>
<li><code>Theme</code>切换成<code>Darcula</code>就可以了;</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_dark_theme.png" width="400" alt=" as_dark_theme"></div>

<p>是不是很酷呢？</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_dark_theme_demo.png" width="500" alt=" as_dark_theme_demo"></div>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>Android Studio</code>还有很多实用的功能，比如资源引用的实时预览、代码自动补完、代码版本管理、各种快捷按键方式。很多内容需要大家自己去揣摩。</p>
<p>在后继的开发当中，我将会穿插人更多实用的特性介绍。</p>
<h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><p>项目创建成功后，我们需要把它生编译成Apk，然后部署到设备上运行。</p>
<p>这需要手机和电脑两方面的配合。</p>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>要进行真实设备上的调试，需要修改手机上的原始设置。</p>
<p>默认情况下，设备端的调试模式是被关闭的，我们需要在设备的设置中，将这个功能打开。虽然各种品牌的手机不同，但是它们的设置菜单中都会有一个开发者选项。</p>
<p>我们首先要找到<code>开发者选项</code>。在<code>Google Nexus</code>设备上这个选项是被隐藏的，</p>
<ol>
<li>需要进入到<code>设置-&gt;关于手机</code>；</li>
<li>连续点击“版本号”，将隐藏的开发者模式打开，</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_mode_on1.png" width="250" alt=" debug_mode_on1"></div>

<p>启用<code>开发者模式</code>后，打开“USB调试”功能，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_mode_on2.png" width="250" alt=" debug_mode_on2"></div>

<p>之后将手机和电脑用USB数据线连接起来。</p>
<p>如果连接的是MacOS系统，手机就能直接被识别了；如果这是在Windows系统中，还要为连接上的设备安装ADB驱动。</p>
<ol>
<li><p>在“我的电脑”上点鼠标右键，选择“管理”，打开设备管理器，可以看到没有安装驱动的设备，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/ADB_config1.png" width="400" alt=" ADB_config1"></div>
</li>
<li><p>为它更新驱动，选择“浏览计算机查找”，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/ADB_config2.png" width="400" alt=" ADB_config2"></div>
</li>
<li><p>驱动存放在Android SDK所在目录的<code>extras\google\usb_driver</code>下面，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/ADB_config3.png" width="400" alt=" ADB_config3"></div>
</li>
<li><p>点击确定后，驱动很快就安装成功了.</p>
</li>
</ol>
<p>此时我们点击Android Studio的Android Monitor窗口，就能看到这个连接上的设备了，这个窗口还输出了手机端打印的运行信息。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_connect_device_suc.png" width="500" alt=" as_connect_device_suc"></div>


<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>现在开始部署应用到设备上运行，</p>
<ol>
<li><p>点击<code>工具栏</code>上方<code>绿色的小三角</code>或者<code>虫子背景的绿色小三角</code>，程序就开始编译并准备部署到我们的设备上了，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_deploy_app.png" width="200" alt=" as_deploy_app"></div>

<p><code>绿色的小三角</code>的含义是：以非调试状态运行程序；<br><code>虫子背景的绿色小三角</code>的含义是：以调试状态运行程序；</p>
</li>
<li><p>让我选择要部署的设备，我们在选定的设备上双击，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_deploy_select_device.png" width="300" alt=" as_deploy_select_device"></div></li>
<li><p>此时可以在设备上看到，我们的应用程序运行起来了。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/as_deploy_suc.png" width="250" alt=" as_deploy_suc"></div>

</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;应用的创建与部署&quot;&gt;&lt;a href=&quot;#应用的创建与部署&quot; class=&quot;headerlink&quot; title=&quot;应用的创建与部署&quot;&gt;&lt;/a&gt;应用的创建与部署&lt;/h1&gt;&lt;p&gt;现在我们开始创建一个全新的项目工程-&lt;code&gt;天气预报&lt;/code&gt;，并在编译后让它运行到
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>2 开发环境搭建</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/2_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://booktest.anddle.com/4_开发/2_开发环境搭建/</id>
    <published>2017-01-24T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><p>开发安卓应用可以在<code>Window系统</code> <code>MacOS系统</code> <code>Linux系统</code>上进行。但并不是说打开一个写字板就可以了，它还需要编译器等开发工具的配合。所以在正式开发之前，需要搭建开发的环境，我们需要给开发平台（<code>Window系统</code> <code>MacOS系统</code> <code>Linux系统</code>）安装上：</p>
<ol>
<li>JDK（Java Development kit）：Java开发工具包，因为安卓使用java开发，而且安卓应用开发的其它部分工具也依赖于java开发环境，所以必须安装JDK；</li>
<li>Android SDK（Android Development kit）：谷歌提供的安卓应用开发工具包。</li>
<li>Android Studio：谷歌提供的安卓开发环境。</li>
</ol>
<p>不同的平台搭建开发环境的过程几乎相同。我将介绍如何在<code>Windows系统</code> <code>MacOS系统</code>上进行开发环境的搭建。</p>
<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>JDK可以通过<a href="http://http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官方网站</a>下载。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/jdk_download.png" width="500" alt=" jdk_download"></div>

<p><em>下载时，请根据操作系统的种类和位数进行选择。</em></p>
<hr>
<p>下载到本地后，双击安装包进行安装。</p>
<p><em>如果使用MacOS系统，可以安装<code>XCode</code>。<code>XCode</code>在安装过程中，已经完成了对<code>JDK</code>的安装。所以使用MacOS开发会显得非常的方便：只需要安装一个<code>XCode</code>，其他很多开发工具就都有了（其他程序的开发环境也是类似）。所以我强烈的推荐你，今后有了资金，一定要选Macbook。</em></p>
<p>验证<code>JDK</code>安装是否成功的方式，在不同平台下稍有不同。</p>
<h3 id="Windows验证"><a href="#Windows验证" class="headerlink" title="Windows验证"></a>Windows验证</h3><p>安装完成后，</p>
<ol>
<li>通过<code>Win+R</code>启动Windows操作系统的<code>运行</code>面板；</li>
<li>在面板中输入<code>cmd</code>，启动命令行窗口；</li>
<li>在命令行窗口中，输入<code>java -version</code>;</li>
</ol>
<p>如果此时能看到类似以下的内容，就说明JDK安装成功了。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">XXX</span>&gt;<span class="title">java</span> -<span class="title">version</span></span></div><div class="line"><span class="title">java</span> <span class="title">version</span> "1.8.0<span class="title">_66</span>" <span class="title">Java</span>(<span class="title">TM</span>) <span class="title">SE</span> <span class="title">Runtime</span> <span class="title">Environment</span> (<span class="title">build</span> 1.8.0<span class="title">_66</span>-<span class="title">b18</span>)</div><div class="line"><span class="title">Java</span> <span class="title">HotSpot</span>(<span class="title">TM</span>) 64-<span class="title">Bit</span> <span class="title">Server</span> <span class="title">VM</span> (<span class="title">build</span> 25.66-<span class="title">b18</span>, <span class="title">mixed</span> <span class="title">mode</span>)</div></pre></td></tr></table></figure>
<h3 id="MacOS验证"><a href="#MacOS验证" class="headerlink" title="MacOS验证"></a>MacOS验证</h3><p>安装完成后，</p>
<ol>
<li>启动<code>terminal</code>命令行窗口；</li>
<li>在窗口中输入<code>java -version</code>；</li>
</ol>
<p>如果此时能看到类似以下的内容，就说明JDK安装成功了。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GymdeMacBook-Pro-<span class="number">7</span>:~ Gym$ java -version</div><div class="line">java version "<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_65"</div><div class="line">Java(TM) SE Runtime Environment (build <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_65-b17)</div><div class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25</span>.<span class="number">65</span>-b01, mixed <span class="built_in">mode</span>)</div></pre></td></tr></table></figure></p>
<h2 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h2><p>感谢<a href="https://developer.android.google.cn/studio/index.html" target="_blank" rel="external">Google中文开发网站</a>的上线，让我们可以很方便的下载到<code>Android Studio</code>，以及它集成的<code>Android SDK</code>了。</p>
<p>针对不同的平台，<a href="http://developer.android.com/develop/index.html" target="_blank" rel="external">官方网站</a>提供了不同的下载包，</p>
<table>
<thead>
<tr>
<th>平台</th>
<th>Android Studio 安装包</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows</td>
<td><a href="https://dl.google.com/dl/android/studio/install/2.2.3.0/android-studio-bundle-145.3537739-windows.exe" target="_blank" rel="external">android-studio-bundle-145.3537739-windows.exe</a></td>
</tr>
<tr>
<td>MacOS</td>
<td><a href="https://dl.google.com/dl/android/studio/install/2.2.3.0/android-studio-ide-145.3537739-mac.dmg" target="_blank" rel="external">android-studio-ide-145.3537739-mac.dmg</a></td>
</tr>
<tr>
<td>Linux</td>
<td><a href="https://dl.google.com/dl/android/studio/ide-zips/2.2.3.0/android-studio-ide-145.3537739-linux.zip" target="_blank" rel="external">android-studio-ide-145.3537739-linux.zip</a></td>
</tr>
</tbody>
</table>
<p>下载完成后，双击安装包进行安装。</p>
<p>注意：</p>
<ol>
<li>整个安装过程在官网的<a href="https://developer.android.google.cn/studio/install.html" target="_blank" rel="external">安装指南</a>上，有详细的介绍，大家可以移步此处；</li>
<li>在Windows系统上搭建开发环境更加方便，谷歌将Android SDK和Android Studio打包在一起提供我们下载；</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_studio_download_list.png" width="700" alt=" android_studio_download_list"></div>

<h2 id="安装Android-SDK"><a href="#安装Android-SDK" class="headerlink" title="安装Android SDK"></a>安装Android SDK</h2><p>从现在开始各个平台下的<code>Android Studio</code>操作都几乎完全一样了。</p>
<p>对于<code>Windows系统</code>，因为安装包已经集成了<code>Android SDK</code>，所以不用再去单独下载了。对于没有集成<code>Android SDK</code>的<code>Android Studio</code>还有后续的工作要做。</p>
<p>启动<code>Android Studio</code>之后，会提示我们安装<code>Android SDK</code>。</p>
<p>也可以通过<code>Android Studio</code>的<code>设置</code>功能，启动<code>设置选项</code>，切换到<code>Android SDK</code>选项卡，将列出当前已经安装或者可以安装的<code>Android SDK组件</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_studio_sdk_mamager.png" width="600" alt=" android_studio_sdk_mamager"></div>

<p>选择<code>Launch Standalone SDK Manager</code>，启动<code>SDK manager</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sdk_manager.png" width="400" alt=" sdk_manager"></div>

<p>勾选上，</p>
<ol>
<li><p><code>Tools</code>中的<code>Android SDK Tools</code>  <code>Android SDK Platform-tools</code>和<code>Android SDK Build-tools</code>最新版本；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sdk_manager_tools.png" width="300" alt=" sdk_manager_tools"></div>
</li>
<li><p><code>Android X.X.X</code>中的SDK和参考源码，例如，<code>Android 7.1.1</code>的<code>SDK Platform</code>（必选），<code>Sources for Android SDK</code>（可选，便于查看SDK中的源码）；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sdk_manager_sdk.png" width="300" alt=" sdk_manager_sdk"></div>
</li>
<li><p><code>Extras</code>中的<code>Android Support Repository</code>，其他的可以不选；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sdk_manager_extra.png" width="300" alt=" sdk_manager_extra"></div>

<p> <em>如果是Windows系统，为了避免电脑不能识别连接上的安卓设备，可以多勾选一个<code>USB driver</code>。</em></p>
</li>
</ol>
<p>选择<code>Install packages</code>之后，<code>SDK Manager</code>将自动下载。完成之后，</p>
<p>整个<code>Android SDK</code>也就安装完毕了。</p>
<p><em>安卓的中文开发<a href="https://developer.android.google.cn/" target="_blank" rel="external">官网</a>上，有更多的详细的介绍。遇到任何问题，都可以来这里查看官方的文档。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开发环境搭建&quot;&gt;&lt;a href=&quot;#开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;开发环境搭建&quot;&gt;&lt;/a&gt;开发环境搭建&lt;/h1&gt;&lt;p&gt;开发安卓应用可以在&lt;code&gt;Window系统&lt;/code&gt; &lt;code&gt;MacOS系统&lt;/code&gt; &lt;c
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>1 开发产品</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/1_%E5%BC%80%E5%8F%91%E4%BA%A7%E5%93%81/"/>
    <id>http://booktest.anddle.com/4_开发/1_开发产品/</id>
    <published>2017-01-23T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发产品"><a href="#开发产品" class="headerlink" title="开发产品"></a>开发产品</h1><p>当开发者拿到设计师提供的原型（静态或者动态）和资源后，也并不是就可以开始写代码了。</p>
<p>开发阶段通常还会包含以下几个部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">功能验证 -&gt; 设计文档 -&gt; 编写代码 -&gt; 测试 -&gt; 产品发布 -&gt; 产品升级</div></pre></td></tr></table></figure>
<p>在整个开发的过程期间，还需要对各种文档、代码、资源进行管理，引入版本控制的概念。</p>
<h2 id="功能验证"><a href="#功能验证" class="headerlink" title="功能验证"></a>功能验证</h2><p>如果产品的功能很复杂，开发者在正式开始编码前，还得做一番功能的验证。也就是，</p>
<ol>
<li>在创意阶段确定功能点的那些验证功能可行性的工作；</li>
<li>设计师设计的界面逻辑合理性验证；</li>
</ol>
<p>设计师的设计要落地，并不是天马行空，而是要和开发者的实际情况匹配才行。</p>
<p>开发并不是只有编码的工作，这是一个系统的工程，还包括了各种写作设计文档和代码的管理技巧。</p>
<h2 id="设计文档"><a href="#设计文档" class="headerlink" title="设计文档"></a>设计文档</h2><p>写文档也是开发者重要的工作，你不能保证将来永远自己来维护自己写的代码，所以要把自己的设计思路用文字、图表的形式记录下来，便于后继者能够理解。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/code_design_documents.png" width="100" alt=" code_design_documents"></div>

<p>根据开发阶段的不同，产出文档的内容也不同；而且不同的公司或团队，也有不同的要求。撰写开发文档，是一个很具有弹性的工作，如果身在一个以快为核心价值的小团队（2-3个人），也许就不会把大把的时间花在这上面；如果是一个拥有几十人的大团体，或者是以严谨闻名的日本开发者，一定会把程序设计的方方面面都体现到设计文档当中。</p>
<p>国内的大多数程序员都是思维超前的物种，不大会拘泥于每天写文档这样“小节”，对文档的态度大都是能拖就拖，能不写就不写。程序员的精力太宝贵了，总希望把它们投入到更多的新功能的开发当中。所以写文档成了程序员们最头痛的事情了–不是不会，而是没有兴趣。</p>
<p>要解决这个问题，除了强制要求，似乎也没有特别有效的办法:(</p>
<p>在开发我们的<code>天气预报</code>时，我简化了文档方面的要求，没有使用专业的设计文档。大家可以将本文就作为<code>天气预报</code>的设计文档-因为只要把这篇文档从头到尾看一遍，你就一定能设计出这个应用-这也正是各种设计文档存在的终极意义。</p>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>和写小说一样，内容可能会经历反复的修改，一段代码加入之前，程序运行的很好，但是加入之后却发生了意外，不得不回到修改前的状态。退回到以前的状态，通常会非常的繁琐，程序员必须的记住每一个修改的细节。</p>
<p>如果采用了版本控制的技术，退回到之前的修改将是一件非常容易的事情，只需要一个按键即可。除了代码、任何文档的修改都可以用版本控制软件来管理。例如我现在正在敲下这篇文档以及这一系列文档将组合成的书，都是在版本控制软件-<code>Git</code>的帮助下完成了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/version_back.png" width="100" alt=" version_back"></div>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>测试、产品发布、升级看起来比较简单，但都是一门可以很深入的学问，我们将为它们开辟单独的大章节来讲述。</p>
<p>进行安卓软件开发我们还需要准备3样东西，</p>
<ol>
<li><p>一台安装了<code>Windows系统</code>或者<code>MacOS系统</code>的电脑（<code>Linux系统</code>也可以，不过我在后面的章节中不会单独的讲如何搭建<code>Linux系统</code>下的开发环境）；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/prepare_computer.png" width="100" alt=" prepare_compute"></div>
</li>
<li><p>一台安卓5.0及其以上的手机设备：我们这里的安卓开发是基于<code>Material Design</code>的，而它是在安卓5.0的系统上推出的。所以对安卓系统提出了版本上的要求。目前市场上绝大多数的主流手机已经过渡到了安卓5.0之上了。如果你的设备还很古老，是不是可以考虑稍微与时俱进一点了呢？</p>
<p> 我将使用一台标准的安卓设备<code>Google Nexus 5</code>作为调试用的真机。</p>
<p> 开发程序的时候也可以使用模拟器来代替真机。不过我到建议能用真机是最合适的，运行速度快、对电脑的配置也没有要求，更能够省去使用模拟器可能遇到的各种状况。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/prepare_phone.png" width="100" alt=" prepare_phone"></div>
</li>
<li><p>一根连接手机与开发电脑的数据线：数据线通常使用的是<code>micro USB</code>接口，它几乎成了安卓手机的标配。不过越来越多的手机开始引入了<code>USB type-C</code>接口了。这根数据线都不需要单独去购买。买手机的时候，商家会把这样的数据线作为标配提供的。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/prepare_usb_line.png" width="100" alt=" prepare_usb_line"></div>


</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开发产品&quot;&gt;&lt;a href=&quot;#开发产品&quot; class=&quot;headerlink&quot; title=&quot;开发产品&quot;&gt;&lt;/a&gt;开发产品&lt;/h1&gt;&lt;p&gt;当开发者拿到设计师提供的原型（静态或者动态）和资源后，也并不是就可以开始写代码了。&lt;/p&gt;
&lt;p&gt;开发阶段通常还会包含以下几
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>10 资源的创建</title>
    <link href="http://booktest.anddle.com/3_%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B/10_%E8%B5%84%E6%BA%90%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>http://booktest.anddle.com/3_产品原型/10_资源的创建/</id>
    <published>2017-01-22T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资源的创建"><a href="#资源的创建" class="headerlink" title="资源的创建"></a>资源的创建</h1><p>界面原型已经设计完成了。不过离最后交付给开发人员开发还差一步：产品中使用的图片还没有准备好呢？</p>
<p>设计师除了产品原型还要交付哪些资源呢？开发者最关心的资源就是应用中会使用到的各种图标资源和配色方案。</p>
<p>在<code>天气预报</code>应用当中，我们已经确定好了界面的主要颜色，</p>
<table>
<thead>
<tr>
<th>颜色项目</th>
<th>颜色名称</th>
<th>颜色RGB值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Primary Color</td>
<td>Indigo 500</td>
<td>#3F51B5</td>
</tr>
<tr>
<td>Primary Dark Color</td>
<td>Indigo 700</td>
<td>#303F9F</td>
</tr>
<tr>
<td>Accent Color</td>
<td>Amber 500</td>
<td>#FFC107</td>
</tr>
</tbody>
</table>
<p>现在就剩下各种图标了。这些图标包括了，</p>
<ol>
<li><p>系统图标：显示<code>更多信息</code>时使用到的，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_system_icon.png" width="300" alt=" create_system_icon"></div>
</li>
<li><p>天气图标：包括使用到的<code>小图标</code>，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_weather_icon_small.png" width="300" alt=" create_weather_icon_small"></div>

<p> 使用到的<code>大图标</code>，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_weather_icon_large.png" width="300" alt=" create_weather_icon_large"></div>
</li>
<li><p>应用图标：应用的主图标，放在启动界面使用的图标，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_icon.png" width="200" alt=" weather_app_icon"></div>

</li>
</ol>
<h2 id="图标的尺寸"><a href="#图标的尺寸" class="headerlink" title="图标的尺寸"></a>图标的尺寸</h2><p>不同使用场景的图标，尺寸是不同，前面的章节中我们已经讲述了<code>系统图标</code> <code>应用图标</code>的标准尺寸。</p>
<p>根据屏幕像素密度的不同，需要设计对应大小的图标。这样一来，就能够确保在特定类型的密度屏幕上，图标能够显示的清晰。</p>
<table>
<thead>
<tr>
<th>像素密度类型</th>
<th>像素密度大小</th>
<th>与Baseline比值</th>
</tr>
</thead>
<tbody>
<tr>
<td>mdpi</td>
<td>160</td>
<td>1</td>
</tr>
<tr>
<td>hdpi</td>
<td>240</td>
<td>1.5</td>
</tr>
<tr>
<td>xhdpi</td>
<td>320</td>
<td>2</td>
</tr>
<tr>
<td>xxhpi</td>
<td>480</td>
<td>3</td>
</tr>
<tr>
<td>xxxhpi</td>
<td>640</td>
<td>4</td>
</tr>
</tbody>
</table>
<p><em>安卓使用<code>dpi</code>为160的数值作为一个基准－－<code>baseline</code>。</em></p>
<p>为了达到最优秀的显示效果，我们最理想的情况下是为每个不同的屏幕类型设计对应的图标。不过实际情况中却并不一定需要对应每个尺寸，因为</p>
<ol>
<li><p>如果涉及的图标很多，各种类型的图标都做全部的配套设计一定会增加应用的体积；</p>
</li>
<li><p>假如缺少某个屏幕类型（例如mdpi）的图标a时，系统会去寻找a对应的高分辨率图标A，把A转化成合适的尺寸（a与A都是同一个图标的不同尺寸版本，a尺寸小，A尺寸大）。这里唯一的代价是：在使用图标时，系统需要自动做额外的尺寸转化；</p>
</li>
</ol>
<h2 id="系统图标"><a href="#系统图标" class="headerlink" title="系统图标"></a>系统图标</h2><p>系统图标的大小是24dp*24dp，对于<code>mdpi</code>的屏幕，我们就需要截取24px*24px大小的图标。</p>
<h3 id="Sketch导出"><a href="#Sketch导出" class="headerlink" title="Sketch导出"></a>Sketch导出</h3><p>如果使用<code>Sketch</code>开发出了静态原型，那么从里面<code>抓取</code>系统图标就非常的方便了，</p>
<ol>
<li><p>点击<code>工具栏</code>上的<code>insert -&gt; S</code>（或者按快捷键S），</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sketch_slice_system_icon.png" width="200" alt=" sketch_slice_system_icon"></div>
</li>
<li><p>用<code>小刀</code>在要截取图标的位置切片，并将切出的片子，重新命名成<code>ic_wind_level</code>,</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sketch_slice_system_icon_settings1.png" width="600" alt=" sketch_slice_system_icon_settings1"></div>

<p> 可以看到右上方的<code>尺寸栏</code>显示的是24/*24的大小，<code>设置区域</code>下方的截取效果图也呈现了出来。</p>
</li>
</ol>
<p>接下来就是导出图片了，</p>
<ol>
<li><p>选中<code>ic_wind_level</code>，点击<code>Export</code>旁的按钮，以此添加<code>1x 2x 3x 1.5x 4x</code>，给要导出的图片设置导出后的放大倍率。<code>1x</code>表示<code>1:1</code>导出，<code>2x</code>表示放大2倍导出，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sketch_slice_system_icon_settings2.png" width="250" alt=" sketch_slice_system_icon_settings2"></div>

<p> 导出的格式都设置成<code>PNG</code>格式的图片。这种图片是安卓系统标准支持的图片格式，能够携带透明的信息。</p>
</li>
<li><p>不要勾选背景颜色，让整个图片除了图案以外，都呈透明的状态；选择<code>Export ic_wind_level</code>，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sketch_slice_system_icon_settings3.png" width="250" alt=" sketch_slice_system_icon_settings3"></div>

</li>
</ol>
<p>导出结果如下，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sketch_slice_system_icon_export.png" width="250" alt=" sketch_slice_system_icon_export"></div>

<table>
<thead>
<tr>
<th>像素密度类型</th>
<th>与Baseline比值</th>
<th>实际像素</th>
</tr>
</thead>
<tbody>
<tr>
<td>mdpi</td>
<td>1</td>
<td>24px</td>
</tr>
<tr>
<td>hdpi</td>
<td>1.5</td>
<td>36px</td>
</tr>
<tr>
<td>xhdpi</td>
<td>2</td>
<td>48px</td>
</tr>
<tr>
<td>xxhpi</td>
<td>3</td>
<td>72px</td>
</tr>
<tr>
<td>xxxhpi</td>
<td>4</td>
<td>96px</td>
</tr>
</tbody>
</table>
<p>其他图标的导出和产生这个图标的方式类似。</p>
<h3 id="第三方工具导出"><a href="#第三方工具导出" class="headerlink" title="第三方工具导出"></a>第三方工具导出</h3><p>如果不使用<code>Sketch</code>也可以通过其他工具生成图标。例如<a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external"><code>Android Studio Asset</code></a>的<code>Generic icons</code>功能。</p>
<ol>
<li>通过<code>IMAGE</code>方式，将事先准备好的<code>风力.svg</code>矢量图，加载到工具当中；</li>
<li><code>Size</code>选择<code>20dp</code>，<code>Padding</code>选择<code>2dp</code>，这样最后的图标就是<code>24pd*24dp</code>的了；</li>
<li><code>Color</code>选择成黑色，透明度为<code>54%</code>；</li>
<li>点击<code>DOWNLOAD .ZIP</code>;</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/asset_studio_create_system_icon.png" width="400" alt=" asset_studio_create_system_icon"></div>

<p>下载解压后，得到了对应的图标资源，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/asset_studio_download_result.png" width="500" alt=" asset_studio_download_result"></div>

<p>其他图标的产生和产生这个图标的方式类似。</p>
<h2 id="天气图标"><a href="#天气图标" class="headerlink" title="天气图标"></a>天气图标</h2><p><code>天气图标</code>的导出与系统图标的导出几乎完全一样，只是尺寸和颜色稍有不同。</p>
<p>在导出的时候要注意<code>天气图标</code>有两种不同的大小，一种使用到<code>Weather details</code>上面，显示大的天气图标；另一种使用到<code>forcast</code>当中，显示小的天气图标。</p>
<table>
<thead>
<tr>
<th>图标类型</th>
<th>宽度</th>
<th>高度</th>
</tr>
</thead>
<tbody>
<tr>
<td>大图标</td>
<td>120dp</td>
<td>100dp</td>
</tr>
<tr>
<td>小图标</td>
<td>30dp</td>
<td>30dp</td>
</tr>
</tbody>
</table>
<p>两种图标都可以通过<code>Sketch</code>切图得到，也可以通过<code>Android Asset Studio</code>来生成。</p>
<h2 id="应用图标"><a href="#应用图标" class="headerlink" title="应用图标"></a>应用图标</h2><p>应用图标也可以通过<code>Sketch</code>创建，不过我这里就简化了这方面的设计，直接使用<a href="http://romannurik.github.io/AndroidAssetStudio" target="_blank" rel="external">Android Asset Studio</a>的<code>Launcher icons</code>，创建应用图标，</p>
<ol>
<li>通过<code>IMAGE</code>方式，将事先准备好的<code>应用启动图标.svg</code>矢量图，加载到工具当中；</li>
<li><code>Padding</code>选择<code>45%</code>，调整到合适的比例就行；</li>
<li><code>Color</code>选择成白色，透明度为<code>100%</code>；</li>
<li><code>Shape</code>选择成<code>SQUARE</code>正方形；</li>
<li><code>Background</code>选择成<code>Primary Color</code>-<code>#3F51B5</code></li>
<li>点击<code>DOWNLOAD .ZIP</code>;</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/asset_studio_create_app_icon.png" width="500" alt=" asset_studio_create_app_icon"></div>


<p>下载解压后，得到了对应的图标资源，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/asset_studio_create_app_icon_download_result.png" width="350" alt=" asset_studio_create_app_icon_download_result"></div>

<hr>
<p>至此，图片资源的导出就完成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;资源的创建&quot;&gt;&lt;a href=&quot;#资源的创建&quot; class=&quot;headerlink&quot; title=&quot;资源的创建&quot;&gt;&lt;/a&gt;资源的创建&lt;/h1&gt;&lt;p&gt;界面原型已经设计完成了。不过离最后交付给开发人员开发还差一步：产品中使用的图片还没有准备好呢？&lt;/p&gt;
&lt;p&gt;设计师
    
    </summary>
    
      <category term="第3章-产品原型" scheme="http://booktest.anddle.com/categories/%E7%AC%AC3%E7%AB%A0-%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>9 Origami动态原型设计</title>
    <link href="http://booktest.anddle.com/3_%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B/9_Origami%E5%8A%A8%E6%80%81%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
    <id>http://booktest.anddle.com/3_产品原型/9_Origami动态原型设计/</id>
    <published>2017-01-21T01:00:00.000Z</published>
    <updated>2017-02-17T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态原型设计"><a href="#动态原型设计" class="headerlink" title="动态原型设计"></a>动态原型设计</h1><p>动态的可交互原型产品，是产品经理和界面设计师向开发人员阐释自己设计的最高效工具。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_weather_app_complete.gif" width="300" alt=" origami_weather_app_complete"></div>

<p>开发者不需要猜测设计师要什么样的效果，照着原型产品做就好了。</p>
<p>很多创业团队也发现了产品人的这个刚需，做出了诸如<a href="http://principleformac.com/" target="_blank" rel="external"><code>Principle</code></a>、<a href="https://www.axure.com/" target="_blank" rel="external"><code>Axure</code></a>这类著名的原型设计产品。</p>
<p><code>Facebook</code>似乎也深谙此道，专门为安卓和iOS系统开发很有针对性的交互原型设计工具-<a href="http://origami.design/" target="_blank" rel="external"><code>Origami Studio</code></a>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/sketch_website.png" width="500" alt=" sketch_website"></div>

<p>这是一个免费的工具，而且也能和<code>Sketch</code>互通，所以我选择了它来向大家讲解互动原型的设计。</p>
<h2 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h2><p>启动<code>Origami Studio</code>后，可以看到类似如下界面，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_launched.png" width="500" alt=" origami_launched"></div>

<ol>
<li><p>悬浮在外的区域是虚拟手机屏幕。用户可以通过点击、拖动来模拟各种屏幕操作;</p>
</li>
<li><p>底部的暗色区域是工作区域。用来设置用户操作屏幕后，界面元素的各种响应方式；</p>
</li>
<li><p>右边的亮色区域是界面组件区域。展示了组成界面的各个元素，里面的布局方式，通过虚拟屏幕实时展示了出来；</p>
</li>
</ol>
<p>点击虚拟屏幕右上方的<code>摄像机</code>按钮，可以将屏幕上的内容录制下来，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_virtual_screen.png" width="250" alt=" origami_virtual_screen"></div>

<h2 id="创建屏幕界面"><a href="#创建屏幕界面" class="headerlink" title="创建屏幕界面"></a>创建屏幕界面</h2><p>对于新创建的项目，整个工程都是空的，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_empty_project.png" width="500" alt=" origami_empty_project"></div>

<p>我们可以通过菜单栏的<code>+</code>，为界面添加各种组件，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_add_layer.png" width="300" alt=" origami_add_layer"></div>

<p>也可以直接将<code>Sketch</code>中的图形，通过<code>复制粘贴</code>的方式，直接添加到组件区域。</p>
<ol>
<li><p>通过<code>Phone -&gt; Nexus 5</code>将虚拟设备的屏幕，设置成<code>Nexus 5</code>- 安卓设备；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_change_screen.png" width="300" alt=" origami_change_screen"></div>
</li>
<li><p>将组件区域中<code>Color Fill</code>的背景色修改成<code>白色</code>，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_change_screen_color.png" width="300" alt=" origami_change_screen_color"></div>


</li>
</ol>
<p>然后，打开上一章节中<code>Sketch</code>设计的静态高保真原型，</p>
<ol>
<li>选中<code>Weather</code>页面的<code>展开</code>画板，使用<code>cmd + c</code>（复制）；</li>
<li>切换到<code>Origami Studio</code>，<code>cmd + v</code>（粘贴）；</li>
</ol>
<p>整个界面就导入完成了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/orgami_load_complete.png" width="500" alt=" orgami_load_complete"></div>

<p>所以我之前说，使用<code>Sketch</code>进行界面设计可以事半功倍，它与<code>Origami Studio</code>配合的非常好。</p>
<h2 id="设置滑动区域"><a href="#设置滑动区域" class="headerlink" title="设置滑动区域"></a>设置滑动区域</h2><p>当用户滑动<code>Content</code>区域的时候，该区域要能够跟随手指，向上滑动。这里就有2个要点，</p>
<ol>
<li>滑动<code>Content</code>区域：要能够感知到这个区域被滑动；</li>
<li><code>Content</code>区域跟随滑动：滑动的位移能够作为输入，实时的影响<code>Content</code>区域的位置；</li>
</ol>
<h3 id="感知交互"><a href="#感知交互" class="headerlink" title="感知交互"></a>感知交互</h3><p>组件旁边有个<code>touch</code>按钮，点击后会出现该组件可能会接收到的各种触控方式。在本例中，我们是需要感知<code>Content</code>组件垂直方向上的滑动，所以选择<code>ScrollY</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_content_y_scroll_detect.png" width="300" alt=" origami_content_y_scroll_detect"></div>

<p>此时，<code>工作区域</code>和<code>虚拟屏幕</code>都发生了变化，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_content_add_y_scroll_detect.png" width="600" alt=" origami_content_add_y_scroll_detect"></div>

<p><code>Content</code>区域的位置发生了变化，被“顶”到了整个屏幕的最上面。这是为什么呢？因为<code>Content</code>区域的Y坐标被修改成了<code>0</code>。</p>
<p>在紫色的<code>Scroll</code>框图中，<code>Content Layer</code>被指定成了<code>Content</code>，说明需要关注<code>Content</code>的滑动。<code>Y</code>坐标的变化将被输出到蓝色框图代表的<code>Content</code>区域，修改它的<code>Y</code>坐标。</p>
<p>因此，当框图被这样组合之后，我们没有触控<code>Content</code>区域，<code>Content</code>的<code>Y</code>轴就没有滑动，因此输出就为<code>0</code>。<code>0</code>作为<code>Content</code>区域的新位置，就将其<code>顶</code>到了屏幕的最上方。</p>
<p>因此，我这里可以给出一个小技巧来避免这种错误的<code>置顶</code>效果，</p>
<ol>
<li><p>给<code>Content</code>添加一个壳-<code>Group</code>（<code>+ -&gt; group</code>），将<code>Content</code>包裹在里面(通过拖动<code>Content</code>到<code>Group</code>中实现)；</p>
</li>
<li><p><code>Group</code>的尺寸从屏幕的顶端开始计算，占据整个屏幕；</p>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_add_content_wraper.png" width="300" alt=" origami_add_content_wraper"></div>

<p>然后再给<code>Group</code>添加响应，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_add_content_wraper_detect.png" width="600" alt=" origami_add_content_wraper_detect"></div>

<p>可以看到，现在<code>虚拟屏幕</code>上的界面就没有变形了。在屏幕上进行拖动，<code>Content</code>区域就可以随着<code>Y</code>轴的偏移，而实时的修改自己的<code>Y</code>坐标，达到互动的效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_content_wraper_scroll1.gif" width="600" alt=" origami_content_wraper_scroll"></div>

<p><code>Content</code>滑动的过程中，<code>Weather detail</code>，也需要随着向上滑动，并隐藏起来。</p>
<p>有了上面处理<code>Content</code>的经验，我们就知道需要如何处理<code>Weather detail</code>的滑动了。</p>
<ol>
<li><p>给<code>Weather detail</code>添加一个壳-<code>Group</code>，将<code>Weather detail</code>包裹在里面；</p>
</li>
<li><p><code>Group</code>的尺寸从屏幕的顶端开始计算，占据整个屏幕；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_add_weather_detail_wraper.png" width="300" alt=" origami_add_weather_detail_wraper"></div>
</li>
<li><p>鼠标按住紫色框图<code>Y</code>字符的位置，拖住不放，连接到<code>组件</code>区域上方的<code>Y</code>坐标处，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_add_weather_detail_scroll.png" width="600" alt=" origami_add_weather_detail_scroll"></div>

<p> <code>工作区域</code>就会自动添加紫色框图到新<code>Group</code>的连接，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_add_weather_detail_scroll_result.png" width="600" alt=" origami_add_weather_detail_scroll_result"></div>

</li>
</ol>
<p><em>注意：这种拖拽端点到属性值的方法贯穿了使用<code>Origami Studio</code>的各个地方，是非常核心的操作方式。</em></p>
<p>此时滑动界面的时候，<code>Weather detail</code>也会跟着滑动了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_weather_detail_scroll_complete.gif" width="300" alt=" origami_weather_detail_scroll_complete"></div>

<p>这时可以看到，状态栏被挡住了。解决的办法很简单，只要在<code>组件区域</code>，把<code>Statusbar</code>拖动到最上面的位置就可以了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_statusbar_adjust.png" width="200" alt=" origami_statusbar_adjust"></div>

<h2 id="标题的变化"><a href="#标题的变化" class="headerlink" title="标题的变化"></a>标题的变化</h2><p>现在开始加入标题-<code>成都</code>的变化。</p>
<p>把<code>成都</code>从<code>Weather detail</code>中剥离出来，便于全局的控制，进行如下设置，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_location_adjust.png" width="600" alt=" origami_location_adjust"></div>

<p>在界面滑动的过程中，字体的大小和<code>X Y</code>坐标都要发生变化，说明需要找到内容区域<code>Y</code>轴滑动时的比例，然后让<code>成都</code>元素的对应属性发生变化。</p>
<p>滑动变化有自己的百分比：（当前值-原始值／变化范围）* 100% = 变化的百分比</p>
<p>原始值：0  变化范围：-245（245是<code>Weather detail</code>的高度）</p>
<p><code>成都</code>文字的属性变化范围是：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性起始值</th>
</tr>
</thead>
<tbody>
<tr>
<td>X坐标</td>
<td>24 -&gt; 16</td>
</tr>
<tr>
<td>Y坐标</td>
<td>244 -&gt; 38</td>
</tr>
<tr>
<td>字体大小</td>
<td>34 -&gt; 20</td>
</tr>
</tbody>
</table>
<p>在<code>Origami Studio</code>中确定变化范围，需要使用<code>Progress patch</code>（到底什么是<code>patch</code>，会在后面介绍）。</p>
<p>在<code>工作区域</code>双击，弹出<code>patch</code>选择框，找到<code>Progress</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_load_progress_patch.png" width="400" alt=" origami_load_progress_patch"></div>

<p>修改<code>Progress patch</code>的<code>Start value</code>为<code>0</code>，<code>End value</code>为<code>-245</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_progress_patch_settings.png" width="500" alt=" origami_progress_patch_settings"></div>

<p>开始修改<code>成都</code>文字的<code>Y</code>坐标。</p>
<ol>
<li>在<code>Progress path</code>之后，添加一个<code>Transition patch</code>；</li>
<li><code>Start</code>为244，<code>End</code>为38；</li>
<li>将<code>Transition patch</code>的输出，通过拖拽的方式，连线到<code>成都</code>元素的<code>Y</code>坐标值的位置；</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_title_y_settings.png" width="600" alt=" origami_title_y_settings"></div><br>开始修改<code>成都</code>文字的<code>X</code>坐标。<br><br>1. 在<code>Progress path</code>之后，添加一个<code>Transition patch</code>；<br>2. <code>Start</code>为24，<code>End</code>为16；<br>3. 将<code>Transition patch</code>的输出，通过拖拽的方式，连线到<code>成都</code>元素的<code>X</code>坐标值的位置；<br><br><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_title_x_settings.png" width="600" alt=" origami_title_x_settings"></div>

<p>开始修改<code>成都</code>文字的字体大小。</p>
<ol>
<li>在<code>Progress path</code>之后，添加一个<code>Transition patch</code>；</li>
<li><code>Start</code>为34，<code>End</code>为20；</li>
<li>将<code>Transition patch</code>的输出，通过拖拽的方式，连线到<code>成都</code>元素字体大小的位置；</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a><div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_title_fontsize_settings.png" width="600" alt=" origami_title_fontsize_settings"></div></h2><p>至此，我们可以看到滑动时，标题变化的雏形了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_title_scoll_complete.gif" width="300" alt=" origami_title_scoll_complete"></div>

<h2 id="滑动的范围"><a href="#滑动的范围" class="headerlink" title="滑动的范围"></a>滑动的范围</h2><p>上下滑动时，内容是收到了局限的，只能在一定区域内滑动。所以要给目前的设计增加一个滑动限制。</p>
<ol>
<li>添加一个叫做<code>Clip patch</code>过滤器；</li>
<li>将它允许输出的最小值<code>Min</code>设置成<code>-245</code>（也就是<code>Weather detail</code>的高度）；将允许输出的最大值<code>Max</code>设置成<code>0</code>；</li>
<li>修改框图的连接方式如下，</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_scroll_rage_limit.png" width="500" alt=" origami_scroll_rage_limit"></div>

<h2 id="滑动的保持"><a href="#滑动的保持" class="headerlink" title="滑动的保持"></a>滑动的保持</h2><p>现在滑动<code>虚拟屏幕</code>的时候会发现，当松手之后，原来滑动到的位置会自动还原，但实际上我们希望它能够保持当前的状态。</p>
<ol>
<li>将<code>Content</code>所在的<code>Group</code>向下移，放到<code>Weather detail</code>所属的<code>Group</code>的下面；</li>
<li>修改该<code>Group</code>的大小为<code>1000</code>；</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_scroll_stay_adjust.png" width="250" alt=" origami_scroll_stay_adjust"></div>

<hr>
<p>至此，动画的效果就基本完成了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/origami_weather_app_complete.gif" width="300" alt=" origami_weather_app_complete"></div>

<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>这里留下了一个小尾巴：滑动的过程中，状态栏的颜色也是需要变化的，从<code>#3F51B5</code>逐渐变化到<code>#303F9F</code>。</p>
<p>经过前面的实践，我想大家应该已经知道了实现的要点，那就开始自己尝试着做做吧。</p>
<p>提示：通过<code>Color to HSL patch</code> <code>Transition patch</code>与<code>HSL Color patch</code>的配合，来修改状态栏背景元素的颜色属性。</p>
<p>整个工程的源文件，我放到了<a href="https://pan.baidu.com/s/1i5sksux" target="_blank" rel="external">这里</a>，供大家参考。</p>
<h2 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h2><p>通过具体的案例，我们初步了解了<code>Origami Studio</code>的用法，对实现动画的方式也有了概念。</p>
<p>一切的动画效果都是通过下面几个步骤来实现的，</p>
<ol>
<li>感知触发动画的事件，点击、滑动等等；</li>
<li>把触发事件后产生的数值，交给一个个串联起来的<code>patch</code>进行处理，获得新的数值；</li>
<li>利用新的数值来修改某个界面元素的属性，比如文字的大小，文字的位置，文字的透明度等等；</li>
</ol>
<p>知道了这样的套路，以后遇到其他动画就可以依葫芦画瓢来操作了。</p>
<p>至于什么是<code>patch</code>，我相信一步步做到这里，也都可以心领神会了吧。</p>
<p>另外，处理<code>虚拟屏幕</code>，<code>Origami Studio</code>产生都可交互原型，也能在手机设备上运行，前提是在设备上按照对应的应用<code>Origami live</code>。希望进一步了解的同学，请移步<a href="http://origami.design/" target="_blank" rel="external">这里</a>，有更为详尽的信息提供给你。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态原型设计&quot;&gt;&lt;a href=&quot;#动态原型设计&quot; class=&quot;headerlink&quot; title=&quot;动态原型设计&quot;&gt;&lt;/a&gt;动态原型设计&lt;/h1&gt;&lt;p&gt;动态的可交互原型产品，是产品经理和界面设计师向开发人员阐释自己设计的最高效工具。&lt;/p&gt;
&lt;div alig
    
    </summary>
    
      <category term="第3章-产品原型" scheme="http://booktest.anddle.com/categories/%E7%AC%AC3%E7%AB%A0-%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B/"/>
    
    
  </entry>
  
</feed>
