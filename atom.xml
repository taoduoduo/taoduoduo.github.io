<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从设计到实现</title>
  <subtitle>手把手教你做android应用开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://booktest.anddle.com/"/>
  <updated>2017-03-28T05:14:16.000Z</updated>
  <id>http://booktest.anddle.com/</id>
  
  <author>
    <name>安豆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4 意犹未尽</title>
    <link href="http://booktest.anddle.com/6_%E5%8F%91%E5%B8%83/4_%E6%84%8F%E7%8A%B9%E6%9C%AA%E5%B0%BD/"/>
    <id>http://booktest.anddle.com/6_发布/4_意犹未尽/</id>
    <published>2017-02-21T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="意犹未尽"><a href="#意犹未尽" class="headerlink" title="意犹未尽"></a>意犹未尽</h1><p>好了，经过漫长的讲解，我把做安卓开发应该具有的初步能力都向大家展示了一遍。</p>
<p>我想大家一定对开发一个安卓应用的整体流程有了非常清楚的认识。</p>
<p>虽然在开发部分并没有讲到所有需要的知识，但是作为初学者的你一定是入门了。知道了近一步学习的方向和目标。</p>
<p>我将会在本书的基础上，增加更多的开发示例，尽量用简单的方式覆盖开发时会用到的大多数技能。</p>
<p>基于目前的设计，本书只是一个入门的参考，让你从门外跨到门内。入门后你还会发现原来洞里还有乾坤：设计模式、设计框架、更多设计与开发的技巧。我希望在完成本书之后，有时间与精力能继续开始进一步的写作，把那些进阶的内容逐步添加进来；希望将来各位准备学习安卓开发的同学们，第一个想到的就是我的这本<code>教程</code>。</p>
<p>这本书还有许多需要修改和完善的地方，希望大家能够给我讲讲阅读过程中的体会。我将尽快的让这本书成长起来，尽快完成Ver2.0设置Ver3.0的迭代。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;意犹未尽&quot;&gt;&lt;a href=&quot;#意犹未尽&quot; class=&quot;headerlink&quot; title=&quot;意犹未尽&quot;&gt;&lt;/a&gt;意犹未尽&lt;/h1&gt;&lt;p&gt;好了，经过漫长的讲解，我把做安卓开发应该具有的初步能力都向大家展示了一遍。&lt;/p&gt;
&lt;p&gt;我想大家一定对开发一个安卓应用的整
    
    </summary>
    
      <category term="第6章-发布" scheme="http://booktest.anddle.com/categories/%E7%AC%AC6%E7%AB%A0-%E5%8F%91%E5%B8%83/"/>
    
    
  </entry>
  
  <entry>
    <title>3 产品发布</title>
    <link href="http://booktest.anddle.com/6_%E5%8F%91%E5%B8%83/3_%E4%BA%A7%E5%93%81%E5%8F%91%E5%B8%83/"/>
    <id>http://booktest.anddle.com/6_发布/3_产品发布/</id>
    <published>2017-02-20T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="产品发布"><a href="#产品发布" class="headerlink" title="产品发布"></a>产品发布</h1><p>应用的正式版终于打包完成了。</p>
<p>接下来就要想办法把你开发的程序发布到网络上，供用户下载了。</p>
<p>安卓应用最官方的发布渠道就是Google Play软件市场。你需要把自己的应用上传到Google Play市场。</p>
<p>不过目前Google Play软件市场还不能在国内访问到，好在国内已经有了很多软件市场，来做这种应用发布的平台。</p>
<p>选择发布平台要选那种使用者众多的平台。假如你的应用希望付费下载，还要选择一下在哪个平台下发布能方便的收取回报，分成、提现都是需要加入考虑的因素。</p>
<h2 id="发布平台介绍"><a href="#发布平台介绍" class="headerlink" title="发布平台介绍"></a>发布平台介绍</h2><p>平台主要分两类，一种是手机系统自带的；另一种就是专门的软件市场了。</p>
<p>系统自带的市场有：</p>
<ul>
<li>小米软件商店</li>
<li>魅族软件商店</li>
<li>华为软件商店</li>
</ul>
<p>专门的软件市场有：</p>
<ul>
<li>360手机助手</li>
<li>腾讯应用宝</li>
<li>百度应用市场</li>
<li>安智市场</li>
</ul>
<h2 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h2><p>产品虽然已经发布了，但是还需要进行长久的维护。 </p>
<p>维护的内容包括，</p>
<ul>
<li>bug的修正；</li>
<li>功能的增减；</li>
</ul>
<h3 id="bug的修正"><a href="#bug的修正" class="headerlink" title="bug的修正"></a>bug的修正</h3><p>虽然我们已经进行了代码的测试，但是也可能会有漏网之鱼。有的bug很不容易出现，大量用户使用的过程中才会出现一两次。</p>
<p>要是能收集到这些bug发生时的信息，那么对我们调试程序解决bug是非常有帮助的。</p>
<p>第三方提供了现成的方案帮助我们解决这样的实际需要。例如腾讯的<a href="https://bugly.qq.com/" target="_blank" rel="external">bugly</a>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_bugly_crash.png" width="500" alt=" android_bugly_crash"></div>


<p>这样一来，你不仅能知道程序发生了错误，而且也不需要跑到用户那里去询问错误发生时的操作状态，只要打开后台管理页面就能知道程序发生的细节了。</p>
<p>然后你再根据发回的log信息来查找bug发生的原因了。</p>
<p>bugly的集成方式这里就不赘述了，毕竟这不属于安卓应用开发的标准范畴，需要使用的话请看它的<a href="https://bugly.qq.com/docs/" target="_blank" rel="external">官方文档</a>吧。</p>
<h3 id="功能的增减"><a href="#功能的增减" class="headerlink" title="功能的增减"></a>功能的增减</h3><p>我们还要统计下用户对应用到使用偏好，例如喜欢用哪个功能，一般什么时候使用，使用的人群是怎样的。其实这就是一种大数据的分析，通过实实在在的数据来了解我们的用户；通过数据来指定我们下一步的开发计划，增加什么功能，减少什么功能，让我们的决策更有针对性，能够事半功倍。</p>
<p>还是腾讯提供的<a href="https://bugly.qq.com/" target="_blank" rel="external">bugly</a>，为我们提供了这样的能力，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_bugly_operate.png" width="500" alt=" android_bugly_operate"></div>


<h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>有可能你还希望在应用中集成广告，以此作为收入的来源。通常很多游戏会依靠用户点击广告来收钱。</p>
<p>这些广告并不是开发者自己去联系广告主发布的，而是通过一个第三方的广告平台实现。</p>
<p>广告分发平台很多，<a href="https://www.youmi.net" target="_blank" rel="external">有米</a>是其中之一。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_youmi.png" width="500" alt=" android_youmi"></div>

<p>广告平台会代理很多广告，然后提供开发者一个<code>SDK</code>，让开发者集成到应用里面。特定情况下，<code>SDK</code>能够将广告内容显示到屏幕上，假如用户进行了点击，那么广告平台会做下记录，把数据统计起来，作为为开发者结算推广费用低依据。</p>
<p>在安卓系统刚推出那几年，这种广告推广模式非常吃香，那是毕竟是卖方市场，即使有广告，用户为了使用某个功能，也得忍受着。但是随着移动应用种类和数量的增多，用户品位的提升，植入广告已经越来越不受用户待见了。</p>
<p>所以要是你想在应用中加入广告，那一定得三思才好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;产品发布&quot;&gt;&lt;a href=&quot;#产品发布&quot; class=&quot;headerlink&quot; title=&quot;产品发布&quot;&gt;&lt;/a&gt;产品发布&lt;/h1&gt;&lt;p&gt;应用的正式版终于打包完成了。&lt;/p&gt;
&lt;p&gt;接下来就要想办法把你开发的程序发布到网络上，供用户下载了。&lt;/p&gt;
&lt;p&gt;安卓应
    
    </summary>
    
      <category term="第6章-发布" scheme="http://booktest.anddle.com/categories/%E7%AC%AC6%E7%AB%A0-%E5%8F%91%E5%B8%83/"/>
    
    
  </entry>
  
  <entry>
    <title>2 代码保护</title>
    <link href="http://booktest.anddle.com/6_%E5%8F%91%E5%B8%83/2_%E4%BB%A3%E7%A0%81%E4%BF%9D%E6%8A%A4/"/>
    <id>http://booktest.anddle.com/6_发布/2_代码保护/</id>
    <published>2017-02-19T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码保护"><a href="#代码保护" class="headerlink" title="代码保护"></a>代码保护</h1><p>安卓应用是<code>Java</code>编写的，因此假如使用反编译工具，是能够看到其中的源码逻辑的（虽然反编译后的代码与真正的源码有所不同，但是还是能看得出个七八分）。</p>
<h2 id="代码反编译"><a href="#代码反编译" class="headerlink" title="代码反编译"></a>代码反编译</h2><p>被编译器处理过的代码和资源已经打包成了APK，有的甚至被转化成了二进制文件。但是我们也有一些方法，把这些编译过的内容给变回原来的样子，这个过程叫做－反编译。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/revert_compile.png" width="300" alt=" revert_compile"></div>

<p>反编译分为两个部分：一个是资源文件，一个是java文件。so文件是c＋＋编译的结果，可以认为是不可反编译的（反编译成汇编指令，估计大部分人也看不懂）。</p>
<p>APK tool是反编译的有力工具，据说是谷歌提供的官方的反编译工具,可以把APK目录解包，资源文件全部还原成编译前的样子，而dex文件反编译成smail格式的文件（而不是我们希望的java原文件）。smail格式文件是安卓系统的虚拟机执行时使用的语法，我们不会去讲解这部分内容。</p>
<h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><ol>
<li><p>在<a href="http://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">APK tool的官网</a>下载<code>APKTool</code>的最新版本；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/apktool_download.png" width="400" alt=" apktool_download"></div>
</li>
<li><p>在官网下载与<code>APKTool</code>配套的<a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat" target="_blank" rel="external">脚本文件-apktool.bat</a>，其内容如下；</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> "<span class="variable">%PATH_BASE%</span>" == "" <span class="built_in">set</span> PATH_BASE=<span class="variable">%PATH%</span></div><div class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=<span class="variable">%CD%</span>;<span class="variable">%PATH_BASE%</span>;</div><div class="line">java -jar -Duser.language=en "%~dp0\apktool.jar" %<span class="number">1</span> %<span class="number">2</span> %<span class="number">3</span> %<span class="number">4</span> %<span class="number">5</span> %<span class="number">6</span> %<span class="number">7</span> %<span class="number">8</span> %<span class="number">9</span></div></pre></td></tr></table></figure>
</li>
<li><p>将下载的jar包重命名为APKTool.jar，与脚本文件一起放到你希望存放的目录下，例如<code>D:\Work\apktool</code>;</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/apktool_folder.png" width="200" alt=" apktool_folder"></div>

</li>
</ol>
<h3 id="反编译资源"><a href="#反编译资源" class="headerlink" title="反编译资源"></a>反编译资源</h3><p>接下来开始使用APKTool，</p>
<ol>
<li>启动<code>cmd命令行窗口</code>,进入apktool目录；</li>
<li><p>输入<code>apktool d D:\Test.apk</code>，开始反编译<code>Test.apk</code>，<code>apktool d</code>后面需要跟上要反编译的APK文件路径；</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ apktool d D:\Test.apk</div><div class="line"><span class="function">I: <span class="title">Using</span> <span class="title">Apktool</span> 2.0.3 <span class="title">on</span> <span class="title">Test.apk</span> </span></div><div class="line"><span class="title">I</span>: <span class="title">Loading</span> <span class="title">resource</span> <span class="title">table</span>... </div><div class="line"><span class="title">I</span>: <span class="title">Decoding</span> <span class="title">AndroidManifest.xml</span> <span class="title">with</span> <span class="title">resources</span>... </div><div class="line"><span class="title">I</span>: <span class="title">Loading</span> <span class="title">resource</span> <span class="title">table</span> <span class="title">from</span> <span class="title">file</span>: <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Gym</span>\<span class="title">apktool</span>\<span class="title">framework</span>\1.<span class="title">apk</span> </div><div class="line"><span class="title">I</span>: <span class="title">Regular</span> <span class="title">manifest</span> <span class="title">package</span>... </div><div class="line"><span class="title">I</span>: <span class="title">Decoding</span> <span class="title">file</span>-<span class="title">resources</span>... </div><div class="line"><span class="title">I</span>: <span class="title">Decoding</span> <span class="title">values</span> */* <span class="title">XMLs</span>... </div><div class="line"><span class="title">I</span>: <span class="title">Baksmaling</span> <span class="title">classes.dex</span>... </div><div class="line"><span class="title">I</span>: <span class="title">Copying</span> <span class="title">assets</span> <span class="title">and</span> <span class="title">libs</span>... </div><div class="line"><span class="title">I</span>: <span class="title">Copying</span> <span class="title">unknown</span> <span class="title">files</span>... </div><div class="line"><span class="title">I</span>: <span class="title">Copying</span> <span class="title">original</span> <span class="title">files</span>...</div></pre></td></tr></table></figure>
</li>
<li><p>编译的结果就在<code>cmd命令行窗口</code>启动的位置下，反编译的目录结构如下，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/apktool_revert_compile_structure.png" width="200" alt=" apktool_revert_compile_structure"></div>

</li>
</ol>
<p>现在打开res目录下的资源都被还原了，打开后就能看到原始的设计；而java源码被反编译成了smali格式的文件。</p>
<h2 id="反编译java源代码"><a href="#反编译java源代码" class="headerlink" title="反编译java源代码"></a>反编译java源代码</h2><p>要查看java源码，有三个方式：</p>
<ol>
<li>把dex文件转换成smail文件，然后用专门的工具将smail翻译成java；</li>
<li>把dex文件转换成java的通用编译格式class文件，然后用专门的工具将class翻译成java；</li>
<li>把dex文件转换成jar文件，然后用专门的工具将jar翻译成java；</li>
</ol>
<p>这里我们采用第三种方法。</p>
<h3 id="工具准备-1"><a href="#工具准备-1" class="headerlink" title="工具准备"></a>工具准备</h3><p>首先准备反编译用的工具。</p>
<ol>
<li>在官网下载<a href="http://sourceforge.net/projects/dex2jar/files/" target="_blank" rel="external">dex2jar</a>工具，它可以把APK中的dex文件转化成jar文件；</li>
<li><p>下载完成后，将压缩包解压，放到你希望存放的目录下，例如<code>\Work\dex2jar</code>;</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/dex2jar_install_folder.png" width="200" alt=" dex2jar_install_folder"></div>
</li>
<li><p>在官网下载<a href="http://jd.benow.ca/" target="_blank" rel="external">JD-GUI</a>，它可以查看jar文件的java源码；</p>
</li>
<li>下载完成后，将压缩包解压即可;</li>
</ol>
<p>至此，java源码的反编译工具就安装并设置完成了。</p>
<h3 id="反编译代码"><a href="#反编译代码" class="headerlink" title="反编译代码"></a>反编译代码</h3><p>接下来开始使用反编译工具，</p>
<ol>
<li><p>APK文件后缀名改为zip，解压，找到Android软件安装包中的<code>class.dex</code>；</p>
</li>
<li><p>用dex2jar工具将classes.dex生成jar文件；启动<code>命令行窗口</code>，输入<code>d2j-dex2jar D:\classes.dex</code>，开始反编译<code>classes.dex</code>，<code>d2j-dex2jar</code>后面需要跟上要反编译的dex文件路径；</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ d2j-dex2jar D:\classes.dex</div><div class="line">dex2jar classes.dex -&gt; .\classes-dex2jar.jar</div></pre></td></tr></table></figure>
<p> 结果生成了<code>classes-dex2jar.jar</code>文件；</p>
<p> 假如使用的是MacOS系统，需要给位于<code>\Work\dex2jar</code>目录下的<code>d2j-dex2jar.sh</code>文件和<code>d2j_invoke.sh</code>文件赋予可执行的权限，</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chmod <span class="number">777</span> d2j-dex2jar.sh</div><div class="line">$ chmod <span class="number">777</span> d2j_invoke.sh</div></pre></td></tr></table></figure>
</li>
<li><p>进入JD-GUI目录，运行JD-GUI工具，打开上面的生成的jar文件，即可看到java源代码。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_jd_gui_without_proguard.png" width="600" alt=" android_jd_gui_without_proguard"></div>

</li>
</ol>
<p>看到里面的内容了吧。是不是和我们真实的代码几乎一模一样呢？</p>
<h2 id="Proguard保护代码"><a href="#Proguard保护代码" class="headerlink" title="Proguard保护代码"></a>Proguard保护代码</h2><p><code>Android Studio</code>提供了一个叫做<code>Proguard</code>的工具，对编译的<code>Java</code>源码进行加扰。假如有人想反编译加扰过的代码，就只能看到如下的效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_jd_gui_with_proguard.png" width="500" alt=" android_jd_gui_with_proguard"></div>

<p>代码中的变量名字已经被替换了，变成了毫无疑义的字母。估计想要窥探源码精髓的人一定会倍感失望吧。</p>
<p>要使用<code>Proguard</code>也很容易。修改<code>build.gradle</code>，将<code>minifyEnabled</code>字段的值修改成<code>true</code>就可以了，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled true</div><div class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来混淆代码的功能就能被打开，混淆时会参考工程中<code>app\proguard-rules.pro</code>文件定义的混淆规则来进行。</p>
<p><code>proguard-rules.pro</code>会告知编译系统，哪些文字需要被混淆，哪些不能去混淆。这个文件的编写是需要遵循一定的规则的，详细的内容可以参考这里<a href="https://developer.android.google.cn/studio/build/shrink-code.html" target="_blank" rel="external">https://developer.android.google.cn/studio/build/shrink-code.html</a></p>
<p>除了混淆代码，<code>Proguard</code>还有一个好处就是能压缩代码的体积。比如一个名为<code>changeTheTextColorById()</code>的函数，被混淆后可能就变成了<code>c()</code>，的确是减小了不少的空间。</p>
<p><code>Proguard</code>还能移除没有使用的代码，进一步减小程序的体积。</p>
<p>从上面几点来看，<code>Proguard</code>的使用还真是值得大家仔细深入的研究一番。不过这里我们就点到即止了。</p>
<p>开启<code>Proguard</code>后，将<code>天气预报</code>重新签名打包。在反编译看看。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_jd_gui_with_proguard.png" width="500" alt=" android_jd_gui_with_proguard"></div>

<p>哈哈，已经变成了混淆后的效果了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码保护&quot;&gt;&lt;a href=&quot;#代码保护&quot; class=&quot;headerlink&quot; title=&quot;代码保护&quot;&gt;&lt;/a&gt;代码保护&lt;/h1&gt;&lt;p&gt;安卓应用是&lt;code&gt;Java&lt;/code&gt;编写的，因此假如使用反编译工具，是能够看到其中的源码逻辑的（虽然反编译后的代码与
    
    </summary>
    
      <category term="第6章-发布" scheme="http://booktest.anddle.com/categories/%E7%AC%AC6%E7%AB%A0-%E5%8F%91%E5%B8%83/"/>
    
    
  </entry>
  
  <entry>
    <title>1 打包签名</title>
    <link href="http://booktest.anddle.com/6_%E5%8F%91%E5%B8%83/1_%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D/"/>
    <id>http://booktest.anddle.com/6_发布/1_打包签名/</id>
    <published>2017-02-18T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打包签名"><a href="#打包签名" class="headerlink" title="打包签名"></a>打包签名</h1><p>测试完成后，就要准备发布应用了。我们之前的程序都是使用debug版本进行调试的。debug版本会加入很多冗余的信息便于我们开发者测试代码，运行的效率相对就会低一些。等到要发布的时候，就一定要把整个程序打包成release版，作为正式的产品。</p>
<h2 id="为何要签名"><a href="#为何要签名" class="headerlink" title="为何要签名"></a>为何要签名</h2><p>正式的产品需要<code>签名</code>。<code>签名</code>就是给你的应用搭上这个应用开发者才具有的烙印，使用的是一种数字签名的方式。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/digital_signature.png" width="100" alt=" digital_signature"></div>

<p>除了彰显你开发者的身份，它也用来做恶意应用的鉴别。假如有一个恶意的开发者，仿造你的应用开发了一个高仿版程序，并且通过其他手段诱骗你的用户尝试安装。那么系统会检查这个即将被安装的高仿程序是否与手机上已经安装的正版程序签名是否一致。只要两者不一致，系统就会判断出它的假冒身份，提示用户注意。</p>
<p>给程序签名需要使用一个<code>key</code>，这个<code>key</code>是全世界唯一的，一定要好好的保管，不能让别人得到，不然别人就可以用它来仿冒你的身份进行签名操作了。</p>
<h2 id="如何打包"><a href="#如何打包" class="headerlink" title="如何打包"></a>如何打包</h2><p>使用<code>Android Studio</code>创建release版应用很方便，不需要你去了解太多签名的过程。智能向导会提示你每一步的操作，你只需要照着做就好了。</p>
<ol>
<li><p>点击工具栏<code>Build -&gt; Generate Signed APK...</code></p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_release_version_apk.png" width="250" alt=" create_release_version_apk"></div>
</li>
<li><p>选择要签名的模块，<code>app</code>就是我们的主程序</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_release_version_apk_select_module.png" width="300" alt=" create_release_version_apk_select_module"></div>
</li>
<li><p>选择签名要使用的<code>key</code>，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_release_version_apk_key_choose.png" width="300" alt=" create_release_version_apk_key_choose"></div>

<p> 假如没有<code>key</code>，就根据提示<code>Create new...</code>创建一个。</p>
</li>
<li><p>填入生成<code>key</code>时需要使用到的信息，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_release_version_apk_key_create.png" width="400" alt=" create_release_version_apk_key_create"></div>
</li>
<li><p>为了保险，给存储<code>key</code>的存储位置也增加一道密码，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_release_version_apk_keystore_create.png" width="300" alt=" create_release_version_apk_keystore_create"></div>
</li>
<li><p>指定导出的APK存放位置，点击确定，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_release_version_apk_use_key.png" width="300" alt=" create_release_version_apk_use_key"></div>
</li>
<li><p>导出的过程中，你一定会遇到如下的错误提示，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_release_version_apk_error.png" width="500" alt=" create_release_version_apk_error"></div>

<p> 原来，编译的过程中，发现在中文字符串中，并没有将所有的默认字符串都翻译到。</p>
<p> 经过检查，发现这些字符串的确是我们不需要翻译的，保持它默认的字符就可以了。所以我们也不需要做出修改。</p>
<p> 为了解决编译报错的问题，错误提示当中，也给出了我们解决的方法。在<code>build.gradle</code>中，添加如下的内容，就可以了，</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    lintOptions &#123;</div><div class="line">        abortOnError false</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重新导出一次。在指定的位置，出现了生成的签名后的<code>天气预报</code>应用APK了，名称叫做<code>app-release.apk</code>。</p>
</li>
</ol>
<p>将导出的release版应用，安装到手机上试试吧。安装前记得把debug版的应用卸载掉，不然系统会因为签名不一致而造成不能安装。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其实签名并不是说只有release版才能用，我们平时调试程序使用的debug版也是需要签名的。不过这个签名<code>Android Studio</code>自动帮助我们完成了，我们感觉不到它的存在而已。</p>
<p>如果你愿意，你也可以自己给debug版的程序设置独立的签名，甚至就使用release版的签名也可以。这只需要修改<code>build.gradle</code>文件就可以了。</p>
<p>假如应用内使用到的函数个数超过了65536个，应用编译的时候会发生错误，就需要使用到特殊的<code>MultiDex</code>技术了。作为初学着，我们很难遇到这样的情况，一般很大的项目才会使用到。这里我就不再详细讲述了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;打包签名&quot;&gt;&lt;a href=&quot;#打包签名&quot; class=&quot;headerlink&quot; title=&quot;打包签名&quot;&gt;&lt;/a&gt;打包签名&lt;/h1&gt;&lt;p&gt;测试完成后，就要准备发布应用了。我们之前的程序都是使用debug版本进行调试的。debug版本会加入很多冗余的信息便于我们开
    
    </summary>
    
      <category term="第6章-发布" scheme="http://booktest.anddle.com/categories/%E7%AC%AC6%E7%AB%A0-%E5%8F%91%E5%B8%83/"/>
    
    
  </entry>
  
  <entry>
    <title>5 性能调试</title>
    <link href="http://booktest.anddle.com/5_%E6%B5%8B%E8%AF%95/5_%E6%80%A7%E8%83%BD%E8%B0%83%E8%AF%95/"/>
    <id>http://booktest.anddle.com/5_测试/5_性能调试/</id>
    <published>2017-02-17T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="性能调试"><a href="#性能调试" class="headerlink" title="性能调试"></a>性能调试</h1><p>前面的测试主要集中在对程序的逻辑上。除此以外还有非常重要的一个测试目标，那就是程序的性能。这些性能包括：程序运行时占用的CPU是否合理，是否及时释放了不需要的内存，是否省电。这种测试其实也是对程序性能的一个优化过程，不仅需要开发者能完成功能，还要开发者知道在完成功能的基础上作出最好的代码设计方案。</p>
<p>要做到这一点，只能靠多写代码积累经验，多写测试程序验证程序性能，多看安卓底层的源码理解程序运作的规律。</p>
<p>这里，我就简单的介绍一些使用<code>Android Studio</code>进行性能判断的工具。至于如何才能把这些工具运用的出神入化，成为调试的高手，那就要看开发者自己的努力了。</p>
<p><code>Android Studio</code>集成了好些实用高效的调试工具，它们都在一个叫做<code>ADM-Android Device Monitor</code>的模块当中。</p>
<h2 id="布局检测"><a href="#布局检测" class="headerlink" title="布局检测"></a>布局检测</h2><p>点击<code>Android Monitor</code>窗口的<code>Layout Inspector</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_studio_layout_inspector.png" width="700" alt=" android_studio_layout_inspector"></div>

<p>工具会将设备上现有界面抓去到<code>Android Studio</code>上，可以详细的分析出当前界面上的各个元素，告诉开发者它们是什么布局或者控件，显示出各个组件的属性，最要紧的是能看到界面元素之间的层级关系。</p>
<h2 id="系统性能检测"><a href="#系统性能检测" class="headerlink" title="系统性能检测"></a>系统性能检测</h2><p>点击<code>Android Monitor</code>窗口的<code>Monitors</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_studio_system_monitor.png" width="600" alt=" android_studio_system_monitor"></div>

<p>可以看到<code>Memory</code> <code>CPU</code> <code>Network</code> <code>GPU</code>等资源的使用情况。</p>
<p>每个项目都有自己的操作，能够通过录制当前状态，开发者能看到对应项的各种详细数据，对其进行详细的分析，找到优化的地点或者bug。</p>
<p>关于内存分析的详细文章可以参考Google的官方文档<a href="https://developer.android.google.cn/studio/profile/am-memory.html" target="_blank" rel="external">https://developer.android.google.cn/studio/profile/am-memory.html</a>；</p>
<p>关于CPU分析的详细文章可以参考Google的官方文档<a href="https://developer.android.google.cn/studio/profile/am-cpu.html" target="_blank" rel="external">https://developer.android.google.cn/studio/profile/am-cpu.html</a>；</p>
<p>关于Network分析的详细文章可以参考Google的官方文档<br><a href="https://developer.android.google.cn/studio/profile/am-network.html" target="_blank" rel="external">https://developer.android.google.cn/studio/profile/am-network.html</a></p>
<p>关于GPU分析的详细文章可以参考Google的官方文档<br><a href="https://developer.android.google.cn/studio/profile/am-gpu.html" target="_blank" rel="external">https://developer.android.google.cn/studio/profile/am-gpu.html</a></p>
<h2 id="独立运行的ADM"><a href="#独立运行的ADM" class="headerlink" title="独立运行的ADM"></a>独立运行的ADM</h2><p>除了集成在<code>Android Studio</code>中的<code>ADM</code>外，还有独立的<code>ADM</code>工具。它放在<code>AndroidSDK\tools\</code>目录下，名字叫做<code>monitor</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/standlone_adm.png" width="600" alt=" standlone_adm"></div>

<p>这些分析的内容应该算是比较高级的内容了。这里就不再详细的介绍它们的具体用法。在将来的高级篇章中，我会结合合适的例子来介绍这些工具。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;性能调试&quot;&gt;&lt;a href=&quot;#性能调试&quot; class=&quot;headerlink&quot; title=&quot;性能调试&quot;&gt;&lt;/a&gt;性能调试&lt;/h1&gt;&lt;p&gt;前面的测试主要集中在对程序的逻辑上。除此以外还有非常重要的一个测试目标，那就是程序的性能。这些性能包括：程序运行时占用的CP
    
    </summary>
    
      <category term="第5章-测试" scheme="http://booktest.anddle.com/categories/%E7%AC%AC5%E7%AB%A0-%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>4 Monkey测试</title>
    <link href="http://booktest.anddle.com/5_%E6%B5%8B%E8%AF%95/4_Monkey%E6%B5%8B%E8%AF%95/"/>
    <id>http://booktest.anddle.com/5_测试/4_Monkey测试/</id>
    <published>2017-02-16T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Monkey测试"><a href="#Monkey测试" class="headerlink" title="Monkey测试"></a>Monkey测试</h1><p>从名字来看，这种测试和猴子有关。它会模仿猴子的行为，对应用进行毫无特定目的的操作，东点一下，西按一下，看看程序会不会出问题。</p>
<p>前面介绍的测试方式都是代码级别的，Monkey测试，就属于用户黑盒操作级别的了。</p>
<p>为了方便Monkey测试，<code>Android SDK</code>提供了两个工具：</p>
<ul>
<li>Monkey工具；</li>
<li>MonkeyRunner工具；</li>
</ul>
<h2 id="Monkey工具"><a href="#Monkey工具" class="headerlink" title="Monkey工具"></a>Monkey工具</h2><p>这是Android SDK提供的一种命令行工具，测试者可以通过它向系统发送模拟操作的事件，例如，输入按键、点击、滑动、输入手势。这些操作都是随机的，没有任何章法，就像是一只猴子拿着手机，对着屏幕胡乱操作一样。</p>
<p>使用的方式也非常的简单：</p>
<ol>
<li>用数据线将手机与电脑相连；</li>
<li>将要测试的应用，安装到设备上；</li>
<li><p>进入位于<code>Android SDK</code>所在位置下的<code>AndroidSDK/platform-tools/</code>；</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> AndroidSDK/platform-tools/</div></pre></td></tr></table></figure>
</li>
<li><p>启动<code>adb</code>命令行工具，进入到设备的<code>shell</code>控制台</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    $ ./adb shell</div><div class="line">    ``` </div><div class="line"><span class="number">5</span>. 启动针对特定程序包进行的Monkey测试，例如这里测试`天气应用`-`com.anddle.weatherapp`，</div><div class="line"></div><div class="line">    ```<span class="built_in">cmd</span></div><div class="line">    $ monkey -p com.anddle.weatherapp -v <span class="number">500</span></div></pre></td></tr></table></figure>
<p> <em><code>-p</code>之后说明要测试的程序包名字；<code>500</code>表示指定要发送的随机事件个数为500。</em></p>
</li>
</ol>
<p>此时观察手机，就会发现应用被运行起来了，系统会发送500个随机事件对应用进行测试。</p>
<p>命令行窗口会输出类似这样的内容：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function">shell@M5Note:/ $ <span class="title">monkey</span> -<span class="title">p</span> <span class="title">com.anddle.weatherapp</span> -<span class="title">v</span> 500                        </span></div><div class="line">:<span class="title">Monkey</span>: <span class="title">seed</span>=1490217374280 <span class="title">count</span>=500</div><div class="line">:<span class="title">AllowPackage</span>: <span class="title">com.anddle.weatherapp</span></div><div class="line">:<span class="title">IncludeCategory</span>: <span class="title">android.intent.category.LAUNCHER</span></div><div class="line">:<span class="title">IncludeCategory</span>: <span class="title">android.intent.category.MONKEY</span></div><div class="line">// <span class="title">Event</span> <span class="title">percentages</span>:</div><div class="line">//   0: 15.0%</div><div class="line">//   1: 10.0%</div><div class="line">//   2: 2.0%</div><div class="line">//   3: 15.0%</div><div class="line">//   4: -0.0%</div><div class="line">//   5: -0.0%</div><div class="line">//   6: 25.0%</div><div class="line">//   7: 15.0%</div><div class="line">//   8: 2.0%</div><div class="line">//   9: 2.0%</div><div class="line">//   10: 1.0%</div><div class="line">//   11: 13.0%</div><div class="line">:<span class="title">Switch</span>: #<span class="title">Intent</span>;<span class="title">action</span>=<span class="title">android.intent.action.MAIN</span>;<span class="title">category</span>=<span class="title">android.intent.category.LAUNCHER</span>;<span class="title">launchFlags</span>=0<span class="title">x10200000</span>;<span class="title">component</span>=<span class="title">com.anddle.weatherapp</span>/.<span class="title">MainActivity</span>;<span class="title">end</span></div><div class="line">    // <span class="title">Allowing</span> <span class="title">start</span> <span class="title">of</span> <span class="title">Intent</span> &#123; <span class="title">act</span>=<span class="title">android.intent.action.MAIN</span> <span class="title">cat</span>=[<span class="title">android.intent.category.LAUNCHER</span>] <span class="title">cmp</span>=<span class="title">com.anddle.weatherapp</span>/.<span class="title">MainActivity</span> &#125; <span class="title">in</span> <span class="title">package</span> <span class="title">com.anddle.weatherapp</span></div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_DOWN</span>): 0:(214.0,747.0)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_UP</span>): 0:(155.0316,684.67413)</div><div class="line">:<span class="title">Sending</span> <span class="title">Trackball</span> (<span class="title">ACTION_MOVE</span>): 0:(-4.0,-3.0)</div><div class="line">:<span class="title">Switch</span>: #<span class="title">Intent</span>;<span class="title">action</span>=<span class="title">android.intent.action.MAIN</span>;<span class="title">category</span>=<span class="title">android.intent.category.LAUNCHER</span>;<span class="title">launchFlags</span>=0<span class="title">x10200000</span>;<span class="title">component</span>=<span class="title">com.anddle.weatherapp</span>/.<span class="title">MainActivity</span>;<span class="title">end</span></div><div class="line">    // <span class="title">Allowing</span> <span class="title">start</span> <span class="title">of</span> <span class="title">Intent</span> &#123; <span class="title">act</span>=<span class="title">android.intent.action.MAIN</span> <span class="title">cat</span>=[<span class="title">android.intent.category.LAUNCHER</span>] <span class="title">cmp</span>=<span class="title">com.anddle.weatherapp</span>/.<span class="title">MainActivity</span> &#125; <span class="title">in</span> <span class="title">package</span> <span class="title">com.anddle.weatherapp</span></div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_DOWN</span>): 0:(854.0,1009.0)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_UP</span>): 0:(864.3399,970.93646)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_DOWN</span>): 0:(914.0,1137.0)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_UP</span>): 0:(909.46844,1121.1024)</div><div class="line">:<span class="title">Sending</span> <span class="title">Trackball</span> (<span class="title">ACTION_MOVE</span>): 0:(-1.0,-5.0)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_DOWN</span>): 0:(936.0,516.0)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_UP</span>): 0:(938.0193,519.05597)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_DOWN</span>): 0:(826.0,585.0)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_UP</span>): 0:(816.97925,576.958)</div><div class="line">:<span class="title">Sending</span> <span class="title">Trackball</span> (<span class="title">ACTION_MOVE</span>): 0:(-4.0,4.0)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_DOWN</span>): 0:(558.0,404.0)</div><div class="line">:<span class="title">Sending</span> <span class="title">Touch</span> (<span class="title">ACTION_UP</span>): 0:(576.8026,419.7086)</div></pre></td></tr></table></figure>
<h2 id="MonkeyRunner工具"><a href="#MonkeyRunner工具" class="headerlink" title="MonkeyRunner工具"></a>MonkeyRunner工具</h2><p>MonkeyRunner与Monkey的思路是差不多的，只不过MonkeyRunner的功能要强大些，它需要测试人员自己定义发送给系统打事件，而不再是随机事件了。</p>
<p>这就相当于让测试着创造出了一个可以进行精确操作的用户，用户的每个行为都是精心编程设计好的。并且这个测试过程是可以多次精确的重复进行的，假如遇到了测试失败的情况，就可以通这些操作中完整的重复失败的经过。</p>
<ol>
<li><p>MonkeyRunner工具放在<code>AndroidSDK\tools</code>目录之下，通过命令行工具进入工具所在目录，</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> AndroidSDK/tools/</div></pre></td></tr></table></figure>
</li>
<li><p>启动MonkeyRunner，</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./monkeyrunner</div></pre></td></tr></table></figure>
<p> 可以看到如下结果，说明进入了MonkeyRunner环境，</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GymdeMacBook-Pro-<span class="number">7</span>:tools Gym$ ./monkeyrunner</div><div class="line">Jython <span class="number">2</span>.<span class="number">5</span>.<span class="number">3</span> (<span class="number">2</span>.<span class="number">5</span>:c56500f08d34+, Aug <span class="number">13</span> <span class="number">2012</span>, <span class="number">14</span>:<span class="number">54</span>:<span class="number">35</span>) </div><div class="line">[Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (Oracle Corporation)] on java1.<span class="number">8</span>.<span class="number">0</span>_65</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>这时可以输入各种控制命令，模拟各种操作手机的动作，</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from com.android.monkeyrunner import MonkeyRunner,MonkeyDevice</div><div class="line">&gt;&gt;&gt; device=MonkeyRunner.waitForConnection()</div><div class="line">&gt;&gt;&gt; device.startActivity(component="com.anddle.weatherapp/.MainActivity")</div><div class="line">&gt;&gt;&gt; MonkeyRunner.sleep(<span class="number">2</span>.<span class="number">0</span>)</div><div class="line">&gt;&gt;&gt; device.press('KEYCODE_HOME',MonkeyDevice.DOWN_AND_UP)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>MonkeyRunner提供的函数的使用方法很多，可以参考Google官方的文档<a href="https://developer.android.com/studio/test/monkeyrunner/index.html" target="_blank" rel="external">https://developer.android.com/studio/test/monkeyrunner/index.html</a>。</p>
<p>除了进入MonkeyRunner环境进行测试，还可以将要测试的流程写成<code>Python</code>脚本-<code>test.py</code>，然后通过MonkeyRunner运行，</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./monkeyrunner test.py</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Monkey测试&quot;&gt;&lt;a href=&quot;#Monkey测试&quot; class=&quot;headerlink&quot; title=&quot;Monkey测试&quot;&gt;&lt;/a&gt;Monkey测试&lt;/h1&gt;&lt;p&gt;从名字来看，这种测试和猴子有关。它会模仿猴子的行为，对应用进行毫无特定目的的操作，东点一下，
    
    </summary>
    
      <category term="第5章-测试" scheme="http://booktest.anddle.com/categories/%E7%AC%AC5%E7%AB%A0-%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>3 设备测试</title>
    <link href="http://booktest.anddle.com/5_%E6%B5%8B%E8%AF%95/3_%E8%AE%BE%E5%A4%87%E6%B5%8B%E8%AF%95/"/>
    <id>http://booktest.anddle.com/5_测试/3_设备测试/</id>
    <published>2017-02-15T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设备测试"><a href="#设备测试" class="headerlink" title="设备测试"></a>设备测试</h1><p>设备上进行测试就是把测试代码打包成APK，放到设备上运行，就像一个应用在实际使用当中被进行测试一样。</p>
<p>设备单元的代码存放于<code>app/src/androidTest/</code>目录之下；并且要在<code>build.gradle</code>文件中，添加对应的支持库，例如，</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    androidTestCompile 'com.android.support:support-annotations:<span class="number">24</span>.<span class="number">0</span>.<span class="number">0</span>'</div><div class="line">    androidTestCompile 'com.android.support.test:runner:<span class="number">0</span>.<span class="number">5</span>'</div><div class="line">    androidTestCompile 'com.android.support.test:rules:<span class="number">0</span>.<span class="number">5</span>'</div><div class="line">    // Optional -- Hamcrest library</div><div class="line">    androidTestCompile 'org.hamcrest:hamcrest-library:<span class="number">1</span>.<span class="number">3</span>'</div><div class="line">    // Optional -- UI testing with Espresso</div><div class="line">    androidTestCompile 'com.android.support.test.espresso:espresso-core:<span class="number">2</span>.<span class="number">2</span>.<span class="number">2</span>'</div><div class="line">    // Optional -- UI testing with UI Automator</div><div class="line">    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:<span class="number">2</span>.<span class="number">1</span>.<span class="number">2</span>'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>注意看，这些库的依赖，使用的是<code>androidTestCompile</code>关键字。</em></p>
<p><em>另外，使用<code>Android Studio</code>创建的工程的时候，系统已经默认添加了<code>espresso</code>库，它能自动导入<code>AndroidJUnitRunner</code>需要使用的库，</em></p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(<span class="built_in">dir</span>: 'libs', include: ['*.jar'])</div><div class="line">    androidTestCompile('com.android.support.test.espresso:espresso-core:<span class="number">2</span>.<span class="number">2</span>.<span class="number">2</span>', &#123;</div><div class="line">        exclude group: 'com.android.support', module: 'support-annotations'</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    testCompile 'junit:junit:<span class="number">4</span>.<span class="number">12</span>'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在设备上进行的测试有：</p>
<ol>
<li>Instrument unit test：设备上进行的单元测试；</li>
<li>UI测试；</li>
</ol>
<h2 id="设备单元测试"><a href="#设备单元测试" class="headerlink" title="设备单元测试"></a>设备单元测试</h2><p>设备单元测试依赖于<code>AndroidJUnitRunner</code>，这是<code>JUnit4</code>的安卓系统运行版。因此它的使用方式与前面的本地单元测试完全兼容。</p>
<p>使用的时候需要在<code>build.gradle</code>文件中增加配置，</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    androidTestCompile 'com.android.support.test:runner:<span class="number">0</span>.<span class="number">5</span>'</div><div class="line">    androidTestCompile 'com.android.support.test:rules:<span class="number">0</span>.<span class="number">5</span>'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>使用<code>Android Studio</code>创建的工程，就不用在意这一点了，配置文件已经添加了<code>espresso</code>库，将默认倒入配套的库。</em></p>
<p>在<code>androidTest\java\com.anddle.weatherapp</code>下，点击右键，<code>new -&gt; java class</code>；<br>创建一个设备单元测试的文件-<code>MainActivityInstrumentedTest.java</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_instrument_test_file.png" width="400" alt=" create_instrument_test_file"></div>

<p>给测试类添加<code>@RunWith(AndroidJUnit4.class)</code>注解，让<code>Android Studio</code>知道这是需要在设备上运行的测试代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(AndroidJUnit4.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityInstrumentedTest</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>既然<code>AndroidJUnitRunner</code>与<code>JUnit4</code>的代码完全兼容，只是运行的环境不同，那么本地单元测试的代码也是完全可以直接拿过来用的。不过既然是在真实的运行环境下测试，自然就不需要使用<code>Mock</code>的方式了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(AndroidJUnit4.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityInstrumentedTest</span> </span>&#123;</div><div class="line"></div><div class="line">    MainActivity mMainActivity;</div><div class="line"></div><div class="line">    <span class="comment">//使用@Rule进行注解，创建ActivityTestRule对象，用来获取Activity</span></div><div class="line">    <span class="meta">@Rule</span></div><div class="line">    <span class="keyword">public</span> ActivityTestRule mActivityRule = <span class="keyword">new</span> ActivityTestRule&lt;&gt;(</div><div class="line">            MainActivity.class);</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//通过ActivityTestRule对象，获取Activity</span></div><div class="line">        mMainActivity = (MainActivity) mActivityRule.getActivity();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWeatherInformationFromNetwork_ifUrlisValid</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        String data = mMainActivity.getWeatherInformationFromNetwork(<span class="string">"http://book.anddle.com/api/query_weather"</span>);</div><div class="line"></div><div class="line">        assertNotEquals(<span class="string">"MainActivityTest test getWeatherInformationFromNetwork: url is valid"</span>, <span class="number">0</span>, data.length());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>使用<code>ActivityTestRule</code>获取<code>MainActivity</code>；</li>
<li><code>mActivityRule</code>要使用<code>@Rule</code>进行注解；</li>
</ol>
<p>运行看看，果然能在设备上对<code>getWeatherInformationFromNetwork()</code>函数进行测试了。</p>
<p>Google官网网站上有对使用<code>Instrument unit test</code>的详细介绍：<a href="https://developer.android.google.cn/training/testing/unit-testing/instrumented-unit-tests.html" target="_blank" rel="external">https://developer.android.google.cn/training/testing/unit-testing/instrumented-unit-tests.html</a>，大家可以进步一对研读，增加对它的认识。</p>
<h2 id="自动化UI测试"><a href="#自动化UI测试" class="headerlink" title="自动化UI测试"></a>自动化UI测试</h2><p>对程序的操作界面测试的时候，我们通常会认为需要人来手动操作。其实不然，很多时候，自动化测试也能进行UI元素的操作，比如让界面滑动一下，通过某个按钮启动另一项功能等等。</p>
<p>采用自动化方式测试UI的好处很多，</p>
<ol>
<li>将进行手动的人解放出来；</li>
<li>测试流程的重复性增强了，再多的操作都可以通过编程来做，如果是人来测试难免每次操作的步骤会出现差异；假如发现了问题，可以很容易的复现出来；</li>
<li>测试的精确度大大提高，比如，在滑动的界面下，可以设置滑动的详细距离（像素为单位），然后进行检测，看界面的显示效果是否符合预期；</li>
</ol>
<p>在安卓系统中，进行自动化UI测试，需要用到<code>Espresso</code>测试框架。</p>
<p>在<code>build.gradle</code>文件中，需要添加上依赖的库文件，</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(<span class="built_in">dir</span>: 'libs', include: ['*.jar'])</div><div class="line">    androidTestCompile 'com.android.support.test.espresso:espresso-core:<span class="number">2</span>.<span class="number">2</span>.<span class="number">2</span>'</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>使用<code>Android Studio</code>创建的工程，就不用在意这一点了，配置文件已经添加了<code>espresso</code>库，将默认倒入配套的库。</em></p>
<p>我们的<code>天气预报</code>界面非常的简单，打开应用后，从网络获取数据刷新界面就完成了。<br>因此，我们的测试也很简单：</p>
<ol>
<li>打开应用，从网络获取数据；</li>
<li>检查刷新的界面上<code>当前温度</code>和<code>当前温度范围</code>的内容，是不是都显示了出来就可以了；</li>
</ol>
<p>为了实现自动检查,需要获取界面元素上被设置的值，看看是否符合预期，例如，</p>
<table>
<thead>
<tr>
<th>检查项目</th>
<th>期望数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>当前温度的显示内容</td>
<td>显示“23°”</td>
</tr>
<tr>
<td>当前温度范围的显示内容</td>
<td>显示“18℃～23℃”</td>
</tr>
</tbody>
</table>
<p>在<code>MainActivityInstrumentedTest.java</code>中加入如下的代码，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(AndroidJUnit4.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityInstrumentedTest</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeatherDetail_Activity</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        onView(withId(R.id.current_temperature))</div><div class="line">                .check(matches(withText(<span class="string">"23°"</span>)));</div><div class="line"></div><div class="line">        onView(withId(R.id.temperature_range))</div><div class="line">                .check(matches(withText(<span class="string">"18℃～23℃"</span>)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>onView()</code>是<code>espresso</code>框架提供的一个方法，它可以通过<code>withId()</code>的方式，获取到要检查的对象；之后通过<code>check()</code>检查对应的字符串是否符合预期。</p>
<p>将测试程序部署到设备上运行看看吧。</p>
<p>除了<code>onView()</code>，<code>espresso</code>还提供了很多其他的检查方式，比如进行滑动操作，点击操作，列表数据检查等等。作为初次接触<code>espresso</code>，我在这里举了一个最为粗浅的例子引导大家对这种测试有个大致的了解。</p>
<p>如果想深入的学习，可以参考Google官方的文档：<a href="https://developer.android.google.cn/training/testing/ui-testing/espresso-testing.html" target="_blank" rel="external">https://developer.android.google.cn/training/testing/ui-testing/espresso-testing.html</a></p>
<p>除了<code>espresso</code>之外，Google还提供了<code>uiautomator</code>库，对多个应用之间切换进行测试。详细内容请参考Google官方的文档：<a href="https://developer.android.google.cn/training/testing/ui-testing/uiautomator-testing.html" target="_blank" rel="external">https://developer.android.google.cn/training/testing/ui-testing/uiautomator-testing.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设备测试&quot;&gt;&lt;a href=&quot;#设备测试&quot; class=&quot;headerlink&quot; title=&quot;设备测试&quot;&gt;&lt;/a&gt;设备测试&lt;/h1&gt;&lt;p&gt;设备上进行测试就是把测试代码打包成APK，放到设备上运行，就像一个应用在实际使用当中被进行测试一样。&lt;/p&gt;
&lt;p&gt;设备单元
    
    </summary>
    
      <category term="第5章-测试" scheme="http://booktest.anddle.com/categories/%E7%AC%AC5%E7%AB%A0-%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>2 本地单元测试</title>
    <link href="http://booktest.anddle.com/5_%E6%B5%8B%E8%AF%95/2_%E6%9C%AC%E5%9C%B0%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://booktest.anddle.com/5_测试/2_本地单元测试/</id>
    <published>2017-02-14T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地单元测试"><a href="#本地单元测试" class="headerlink" title="本地单元测试"></a>本地单元测试</h1><p>所谓<code>本地单元测试local unit test</code>就是指，测试的代码不需要部署到设备上，不需要依赖安卓操作系统，在我们的开发环境<code>Android Studio</code>里面（准确的说是开发环境的Java虚拟机当中），就能运行，查看运行的结果。</p>
<p>可以想象，不需要部署到设备上就能运行，那这种测试方式的速度一定是非常快的。</p>
<p>它测试的是程序中的某个代码片段，通常就是某个类的方法。要验证这个方法是否到达了设计要求，会不会出现异常情况。</p>
<p>安卓应用的本地单元测试不需要依赖安卓系统的实际环境，测试时需要使用一种专门针对单元测试的测试框架。这种框架有不少，Google官方推荐了2个：</p>
<ol>
<li><code>JUnit4</code>：这是Java的标准单元测试框架<code>JUnit4</code>，安卓系统直接拿过来使用；</li>
<li><code>Mockito</code>：因为不能依赖安卓系统的API，有时需要模拟一些数据，就可以使用这个测试框架；</li>
</ol>
<p>本地单元测试的代码位于工程的<code>app\src\test\java\</code>目录下，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/local_unit_test_folder.png" width="250" alt=" local_unit_test_folder"></div>

<p>使用的时候需要在<code>build.gradle</code>配置文件中，添加上依赖的测试框架，</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    testCompile 'junit:junit:<span class="number">4</span>.<span class="number">12</span>'</div><div class="line">    testCompile 'org.mockito:mockito-core:<span class="number">1</span>.<span class="number">10</span>.<span class="number">19</span>'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，我们就开始尝试为<code>天气预报</code>做一个简单的本地单元测试吧。目的是掌握本地单元测试的流程。</p>
<h2 id="使用JUnit4框架"><a href="#使用JUnit4框架" class="headerlink" title="使用JUnit4框架"></a>使用JUnit4框架</h2><p>前面提到过，每个测试都要有章法，确定测试的目标。<code>天气预报</code>的功能是由多个模块组成的，我们这就看看哪些模块可以使用JUnit4进行测试。</p>
<p><code>ForcastInfo</code>是一个非常简单的类，我们就通过它来熟悉一下如何进行本地单元测试。</p>
<p>这个类的作用是创建一个存储多日天气预报的数据结构，<code>ForcastInfo</code>在创建的时候，要根据<code>weatherCode</code>，给这个数据结构赋以对应天气图标和显示内容。</p>
<p>我们就检查一下在使用特定的天气代码时，天气图标是否正确，即</p>
<table>
<thead>
<tr>
<th>天气代码</th>
<th>图标Id</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>R.mipmap.ic_sunny_s</td>
</tr>
<tr>
<td>1</td>
<td>R.mipmap.ic_rainy_s</td>
</tr>
<tr>
<td>2</td>
<td>R.mipmap.ic_cloudy_s</td>
</tr>
<tr>
<td>3</td>
<td>R.mipmap.ic_fog_s</td>
</tr>
<tr>
<td>4</td>
<td>R.mipmap.ic_snow_s</td>
</tr>
<tr>
<td>5</td>
<td>R.mipmap.ic_sunny_cloudy_s</td>
</tr>
</tbody>
</table>
<p><em>这个测试的功能点看上去很简单，似乎没有测试的必要。不过为了用来说明单元测试的方法，就选用了这个简单的例子。</em></p>
<ol>
<li><p>首先在<code>build.gradle</code>配置文件中，添加上依赖的测试框架，</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    testCompile 'junit:junit:<span class="number">4</span>.<span class="number">12</span>'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <em>在我们通过<code>Android Studio</code>创建工程的时候，已经自动创建了一个可以进行单元测试的示例文件，它位于<code>app\src\test\java\</code>目录下。另外，在创建工程的时候，<code>Android Studio</code>也为我们在<code>build.gradle</code>配置文件中添加上了<code>testCompile &#39;junit:junit:4.12&#39;</code>。</em></p>
</li>
<li><p>打开要测试的<code>ForcastInfo</code>类，在它上门点击右键，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/local_unit_test_create_test_file_1.png" width="500" alt=" local_unit_test_create_test_file_1"></div>

<p> 创建名为<code>ForcastInfoTest.java</code>的测试文件，该文件位于<code>app\src\test\java\</code>目录下，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/local_unit_test_create_test_file_2.png" width="400" alt=" local_unit_test_create_test_file_2"></div>

<p> 创建后，已经默认为我们创建了<code>setup()</code>函数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfoTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这个使用了<code>@Before</code>注解的函数，会在测试类加载的时候被自动调用。通常在这里为测试做些初始化的准备。不过这个测试，我们不会用到。</p>
</li>
<li><p>在<code>ForcastInfoTest类</code>中，添加<code>checkWeatherCode0_isCorrect()</code>函数，检测<code>weather code</code>为0的时候，是否使用的是<code>R.mipmap.ic_sunny_s</code>图标</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfoTest</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeatherCode0_isCorrect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 添加函数的时候，要给这个函数使用<code>@Test</code>注解。这样测试框架<code>JUnit4</code>就能认识到这个测试函数了。</p>
</li>
<li><p>添加测试使用的代码，创建一个使用<code>weather code</code>为0的<code>ForcastInfo</code>，判断产生的图片Id是否与期望的图片Id一致，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfoTest</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeatherCode0_isCorrect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ForcastInfo forcastInfo0 = <span class="keyword">new</span> ForcastInfo(<span class="string">""</span>, <span class="string">""</span>, <span class="number">0</span>);</div><div class="line">    assertEquals(<span class="string">"ForcastInfoTest test weather code 0: "</span>, R.mipmap.ic_sunny_s, forcastInfo0.iconResId);</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>assertEquals()</code>函数用来两个值（返回值和期望值）是否一致，如果不一致就会抛出异常。</p>
</li>
<li><p>再使用类似的方法，创建对其他<code>weather code</code>的测试，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfoTest</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeatherCode1_isCorrect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        ForcastInfo forcastInfo1 = <span class="keyword">new</span> ForcastInfo(<span class="string">""</span>, <span class="string">""</span>, <span class="number">1</span>);</div><div class="line">        assertEquals(<span class="string">"ForcastInfoTest test weather code 1: "</span>, R.mipmap.ic_rainy_s, forcastInfo1.iconResId);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeatherCode2_isCorrect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        ForcastInfo forcastInfo2 = <span class="keyword">new</span> ForcastInfo(<span class="string">""</span>, <span class="string">""</span>, <span class="number">2</span>);</div><div class="line">        assertEquals(<span class="string">"ForcastInfoTest test weather code 2: "</span>, R.mipmap.ic_cloudy_s, forcastInfo2.iconResId);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeatherCode3_isCorrect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        ForcastInfo forcastInfo3 = <span class="keyword">new</span> ForcastInfo(<span class="string">""</span>, <span class="string">""</span>, <span class="number">3</span>);</div><div class="line">        assertEquals(<span class="string">"ForcastInfoTest test weather code 3: "</span>, R.mipmap.ic_fog_s, forcastInfo3.iconResId);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeatherCode4_isCorrect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        ForcastInfo forcastInfo4 = <span class="keyword">new</span> ForcastInfo(<span class="string">""</span>, <span class="string">""</span>, <span class="number">4</span>);</div><div class="line">        assertEquals(<span class="string">"ForcastInfoTest test weather code 4: "</span>, R.mipmap.ic_snow_s, forcastInfo4.iconResId);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeatherCode5_isCorrect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        ForcastInfo forcastInfo5 = <span class="keyword">new</span> ForcastInfo(<span class="string">""</span>, <span class="string">""</span>, <span class="number">5</span>);</div><div class="line">        assertEquals(<span class="string">"ForcastInfoTest test weather code 5: "</span>, R.mipmap.ic_sunny_cloudy_s, forcastInfo5.iconResId);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 也许你觉得很奇怪，一个简单的测试，为什么要写成好几个函数呢？为什么不写到一个函数当中呢？</p>
<p> 这样做的好处是：当测试出现问题的时候，能更佳容易的知道是哪个位置出现了问题，所以越是细致越能更准确的找准问题所在。</p>
</li>
</ol>
<p>现在代码部分就添加完成了。可以开始启动测试了。</p>
<ol>
<li><p>在测试文件上，点击右键，选择<code>Debug &#39;ForcastInfoTest&#39;</code>，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/local_unit_test_start.png" width="400" alt=" local_unit_test_start"></div>
</li>
<li><p>注意<code>Android Studio</code>下部区域的<code>debug窗口</code>，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/local_unit_test_result_error.png" width="500" alt=" local_unit_test_result_error"></div>

<p> 左边列出了要进行测试的函数，右边的上方列出了测试的状态-<code>6项测试，5项失败</code>。这里将测试的过程和结果都展示了出来。</p>
</li>
<li><p>选择<code>debug窗口</code>导出测试结果的选项，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/local_unit_test_result_export.png" width="500" alt=" local_unit_test_result_export"></div>

<p> 导出的报告结果就像这样，便于提交给相关的人查阅。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/local_unit_test_result_report.png" width="400" alt=" local_unit_test_result_report"></div>

</li>
</ol>
<p>可以看到，这里的测试并没有完全通过。测试失败的原因是什么呢？检查<code>ForcastInfoTest.java</code>，发现原来是开发的过程中，忘记给每个<code>case</code>添加<code>break</code>语句了。因此要做如下的修改，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfo</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForcastInfo</span><span class="params">(String date, String temperatureRage, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line">        ......</div><div class="line">        <span class="keyword">switch</span> (weatherCode) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId = R.mipmap.ic_sunny_s;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_rainy_s;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_cloudy_s;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_fog_s;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_snow_s;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_sunny_cloudy_s;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照这样的方式修改后，再测试一遍。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/local_unit_test_result_suc.png" width="500" alt=" local_unit_test_result_suc"></div>

<p>测试通过了。</p>
<hr>
<p>使用相同的方法，我们可以把<code>WeatherMoreInfo</code>测试一番。</p>
<h2 id="使用Mock框架"><a href="#使用Mock框架" class="headerlink" title="使用Mock框架"></a>使用Mock框架</h2><p>上面的测试方式不需要依赖安卓系统自身的特性。但是大部分时候，这些安卓自有的特性是我们测试时难以回避的。</p>
<p>例如<code>MainActivity</code>中要测试<code>从网络获取并解析数据</code>的功能：</p>
<p>这项功能是封装在<code>UpdateTask类</code>内部当中的<code>doInBackground()</code>函数里。该类还会进行界面的刷新操作。要测试到这个操作着实不容易。有什么好的办法吗？</p>
<p>老实说，这个问题引入了一个很大的话题-程序的设计框架。如果你发现自己的程序当中，各个互不关联的模块或者功能互相胶着在一起，你中有我，我中有你，显得非常的混乱，那么多半是你设计程序时采用的框架可能有问题。</p>
<p>比如我们现在的<code>天气预报</code>，就没有使用任何设计框架，所有的逻辑代码几乎都放在<code>MainActivity.java</code>当中，因此现在测试的时候，你就遇到了不容易测试的问题</p>
<p>设计框架通常都会把界面显示的模块和逻辑控制的模块分开。它能更好的帮助我们理解程序设计的思路，维护起来更加的容易。另外，因为它把实现逻辑控制的模块单独分离出来了，也就能让我们进行测试的时候显得非常容易。</p>
<p>我们现在的重要目标是熟悉安卓开发，设计框架并不会讲到，所以只能采取一些中立的方式对目前的程序结构进行改造了。</p>
<h3 id="调整代码结构"><a href="#调整代码结构" class="headerlink" title="调整代码结构"></a>调整代码结构</h3><p>首先将设计一个<code>WeatherParsedData</code>结构体，用于存放<code>UpdateTask</code>解析出天气数据时获得的结果，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    ......</div><div class="line">        </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WeatherParsedData</span> </span>&#123;</div><div class="line">    </div><div class="line">       <span class="keyword">public</span> <span class="keyword">int</span> errorCode;</div><div class="line">    </div><div class="line">       <span class="keyword">public</span> String location;</div><div class="line">    </div><div class="line">       <span class="keyword">public</span> String temperature;</div><div class="line">    </div><div class="line">       <span class="keyword">public</span> String temperatureRange;</div><div class="line">    </div><div class="line">       <span class="keyword">public</span> <span class="keyword">int</span> weatherCode;</div><div class="line">    </div><div class="line">       <span class="keyword">public</span> List&lt;ForcastInfo&gt; forcastList;</div><div class="line">    </div><div class="line">       <span class="keyword">public</span> List&lt;WeatherMoreInfo&gt; weatherMoreInfoList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将原来<code>doInBackground()</code>中的函数拆解成2个部分</p>
<ol>
<li><p>获取网络数据：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="function">String <span class="title">getWeatherInformationFromNetwork</span><span class="params">(String apiUrl)</span> </span>&#123;</div><div class="line"></div><div class="line">        URL url = <span class="keyword">null</span>;</div><div class="line">        String weatherRes = <span class="string">""</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            url = <span class="keyword">new</span> URL(apiUrl);</div><div class="line">            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</div><div class="line"></div><div class="line">            InputStream in = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream());</div><div class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">            <span class="keyword">int</span> readBytes = <span class="number">0</span>;</div><div class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">            <span class="keyword">while</span>((readBytes = in.read(buffer)) &gt; <span class="number">0</span>)&#123;</div><div class="line">                stringBuilder.append(<span class="keyword">new</span> String(buffer, <span class="number">0</span>, readBytes));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            urlConnection.disconnect();</div><div class="line"></div><div class="line">            weatherRes = stringBuilder.toString();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> weatherRes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>解析网络数据：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">        ......</div><div class="line">        </div><div class="line">    <span class="function">WeatherParsedData <span class="title">parseWeatherInfo</span><span class="params">(String jsonString)</span> </span>&#123;</div><div class="line"></div><div class="line">        WeatherParsedData result = <span class="keyword">new</span> WeatherParsedData();</div><div class="line">        result.errorCode = -<span class="number">1</span>;</div><div class="line"></div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"start to parse JSON content"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            JSONObject weatherResult = <span class="keyword">new</span> JSONObject(jsonString);</div><div class="line">            result.errorCode = weatherResult.getInt(<span class="string">"error_code"</span>);</div><div class="line">            Log.d(<span class="string">"TEST"</span>, <span class="string">"error_code = "</span> + result.errorCode);</div><div class="line">            <span class="keyword">if</span>(result.errorCode == <span class="number">0</span>) &#123;</div><div class="line">                JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">                result.location = data.getString(<span class="string">"location"</span>);</div><div class="line">                result.temperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">                result.temperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">                result.weatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line"></div><div class="line">                Log.d(<span class="string">"TEST"</span>,<span class="string">"weather detail info:"</span>+</div><div class="line">                        <span class="string">" location = "</span> + result.location +</div><div class="line">                        <span class="string">" temperature = "</span> + result.temperature +</div><div class="line">                        <span class="string">" temperatureRange = "</span> + result.temperatureRange +</div><div class="line">                        <span class="string">" weatherCode = "</span> + result.weatherCode);</div><div class="line"></div><div class="line">                JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">                result.forcastList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">                    JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">                    String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">                    String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">                    <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line"></div><div class="line">                    Log.d(<span class="string">"TEST"</span>,<span class="string">"weather forcast info:"</span>+</div><div class="line">                            <span class="string">" date = "</span> + date +</div><div class="line">                            <span class="string">" forcastTemperatureRange = "</span> + forcastTemperatureRange +</div><div class="line">                            <span class="string">" forcastWeatherCode = "</span> + forcastWeatherCode);</div><div class="line"></div><div class="line">                    ForcastInfo forcastInfo = <span class="keyword">new</span> ForcastInfo(date, forcastTemperatureRange, forcastWeatherCode);</div><div class="line">                    result.forcastList.add(forcastInfo);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">                String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">                String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">                String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">                String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">                String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line"></div><div class="line">                Log.d(<span class="string">"TEST"</span>,<span class="string">"more weather info:"</span>+</div><div class="line">                        <span class="string">" windDirection = "</span> + windDirection +</div><div class="line">                        <span class="string">" windLevel = "</span> + windLevel +</div><div class="line">                        <span class="string">" humidityLevel = "</span> + humidityLevel +</div><div class="line">                        <span class="string">" airQuality = "</span> + airQuality +</div><div class="line">                        <span class="string">" sportLevel = "</span> + sportLevel +</div><div class="line">                        <span class="string">" ultravioletRay = "</span> + ultravioletRay );</div><div class="line"></div><div class="line">                result.weatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                WeatherMoreInfo info1 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_direction"</span>, windDirection);</div><div class="line">                WeatherMoreInfo info2 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_level"</span>, windLevel);</div><div class="line">                WeatherMoreInfo info3 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"humidity_level"</span>, humidityLevel);</div><div class="line">                WeatherMoreInfo info4 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"air_quality"</span>, airQuality);</div><div class="line">                WeatherMoreInfo info5 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"sport_level"</span>, sportLevel);</div><div class="line">                WeatherMoreInfo info6 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"ultraviolet_ray"</span>, ultravioletRay);</div><div class="line">                result.weatherMoreInfoList.add(info1);</div><div class="line">                result.weatherMoreInfoList.add(info2);</div><div class="line">                result.weatherMoreInfoList.add(info3);</div><div class="line">                result.weatherMoreInfoList.add(info4);</div><div class="line">                result.weatherMoreInfoList.add(info5);</div><div class="line">                result.weatherMoreInfoList.add(info6);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"finish to parse JSON content"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>再将<code>UpdateTask</code>工作线程返回的结果从<code>Void</code>变成<code>WeatherParsedData</code>，并修改<code>doInBackground()</code>的实现，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">WeatherParsedData</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> WeatherParsedData <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">// 从网络获取并解析出weatherParsedData数据</span></div><div class="line">       Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask doInBackground - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line"></div><div class="line">            String url = <span class="string">"http://book.anddle.com/api/query_weather"</span>;</div><div class="line">            String dataString = getWeatherInformationFromNetwork(url);</div><div class="line"></div><div class="line">            WeatherParsedData weatherParsedData = parseWeatherInfo(dataString);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> weatherParsedData;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(WeatherParsedData data)</span> </span>&#123;</div><div class="line"></div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask onPostExecute - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(data.errorCode != <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            updateWeatherDetail(data.location, data.temperature, data.temperatureRange, data.weatherCode);</div><div class="line">            updateWeatherForcast(data.forcastList);</div><div class="line">            updateWeatherMoreInfo(data.weatherMoreInfoList);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>首先在<code>build.gradle</code>配置文件中，添加上依赖的测试框架，</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">dependencies &#123;</div><div class="line">   ......</div><div class="line">   </div><div class="line">   testCompile 'org.mockito:mockito-core:<span class="number">1</span>.<span class="number">10</span>.<span class="number">19</span>'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>仿造使用<code>JUnit4</code>测试的方法，创建<code>MainActivityTest.java</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>setUp()</code>函数中，初始化<code>Mockito</code>框架，并创建一个<code>虚拟</code>的<code>MainActivity</code>，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</div><div class="line"></div><div class="line">    MainActivity mMainActivity;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//初始化Mockito框架</span></div><div class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//创建虚拟的MainActivity</span></div><div class="line">        mMainActivity = Mockito.spy(MainActivity.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用了<code>Mock</code>框架的<code>spy()</code>方法来模拟整个<code>MainActivity</code>类。</p>
<p>给测试类<code>MainActivityTest</code>添加测试用例，用来检测传入的网站链接为空的情况，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWeatherInformationFromNetwork_ifUrlisNull</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        String data = mMainActivity.getWeatherInformationFromNetwork(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        assertEquals(<span class="string">"MainActivityTest test getWeatherInformationFromNetwork: url is null"</span>, <span class="string">""</span>, data);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以此类推，对于从网站获取数据，就添加很多需要测试的项目，例如：</p>
<table>
<thead>
<tr>
<th>测试项目</th>
<th>参数</th>
<th>期望结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>获取网络数据时，没有网络地址</td>
<td>null</td>
<td>返回空字符串</td>
</tr>
<tr>
<td>获取网络数据时，网络地址为空内容</td>
<td>“”</td>
<td>返回空字符串</td>
</tr>
<tr>
<td>获取网络数据时，网络地址无效</td>
<td>“<a href="http://www.xxx.com" target="_blank" rel="external">http://www.xxx.com</a>“</td>
<td>返回空字符串</td>
</tr>
<tr>
<td>获取网络数据时，网络地址正确</td>
<td>“<a href="http://book.anddle.com/api/query_weather" target="_blank" rel="external">http://book.anddle.com/api/query_weather</a>“</td>
<td>返回有内容字符串</td>
</tr>
</tbody>
</table>
<p><code>parseWeatherInfo()</code>解析数据的函数，可以通过上面的方法进行测试，比如传入格式不正确的json字符串，少一些数据，多一些数据，看看该函数的稳定性。</p>
<p><em>按理说解析数据的时候，应该是解析出多少正确的就显示多少正确的数据。不过我为了简化，把所有的解析代码都放到了一个异常捕捉块里面了。这样可能会出现下面的情况，有的数据是正确的，被解析了，但是遇到个别数据出了问题，导致整个解析的结果被放弃掉。</em></p>
<p><em>如果你不能接受这种糟糕的设计，那就请自己将这部分代码做进一步的改造，让它能够尽可能多的将解析出的数据显示出来。</em></p>
<p><code>Mock</code>框架的功能很多，并不向这里使用的那么少，这里只是一个很简单的应用。它还可以模拟一个对象的行为。例如，有这样一段代码，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">WeatherParsedData <span class="title">functionA</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">    String data = context.getString(R.string.json_data);</div><div class="line">    <span class="keyword">return</span> parseWeatherInfo(data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>context</code>应该怎么获取，这是在安卓设备上运行起来才有的对象啊。我们可以这样做，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</div><div class="line"></div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//初始化Mockito框架</span></div><div class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">//给mContext伪装一个getString(R.string.json_data)，当它被调用时返回内容-json data xxxxxxx</span></div><div class="line">        Mockito.when(mContext.getString(R.string.json_data)).thenReturn(<span class="string">"json data xxxxxxx"</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">functionATest</span><span class="params">()</span> </span>&#123;</div><div class="line">        WeatherParsedData data = functionA(mContext);</div><div class="line">        </div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里面把<code>mContext</code>是一个假的对象，不具备真正的<code>getString()</code>功能。但是我们通过<code>Mockito.when().thenReturn()</code>这个方式，给它注入了<code>getString()</code>方法。当<code>getString()</code>被调用时，代码能获取到数据，并顺利的向下执行。</p>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>前面我们已经看到了好几条测试用例。<br>在着手写单元测试的代码之前，最好先将希望测试的内容梳理一遍，把要测试的对象，测试的参数和期望的结构都整理出来。</p>
<p>然后再根据整理的结果，一条一条的写测试代码。</p>
<p>在写的过程当中，你一定会发现很多之前自己没有考虑好的特殊情况，这会帮助你写出更加健壮的代码。</p>
<p>另外，你也一定会发现自己设计的这个功能怎么那么难测，因此你会不断追求更好的程序设计结构，让你的开发技能大大提高。</p>
<h2 id="异常情况的提示"><a href="#异常情况的提示" class="headerlink" title="异常情况的提示"></a>异常情况的提示</h2><p>当获取天气数据出现异常的情况的时候，<code>WeatherParsedData</code>的<code>errorCode</code>会不为0，此时，我们可以利用<code>Android SDK</code>自带的<code>Snackbar</code>，给用户一个提示。</p>
<ol>
<li><p><code>Snackbar</code>寄居在一个布局之下，告诉系统，要显示在哪个布局的下方，因此首先要给它指定一个显示的相对位置。这里，我们就现在应用最大的布局，给它一个名字<code>@+id/root_view</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/root_view"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.anddle.weatherapp.MainActivity"</span>&gt;</div><div class="line">   </div><div class="line">   ...... </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>当<code>UpdateTask</code>返回到主线程的时候，根据结果选择是否显示错误的提示。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(WeatherParsedData data)</span> </span>&#123;</div><div class="line"></div><div class="line">    Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask onPostExecute - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(data.errorCode != <span class="number">0</span>) &#123;</div><div class="line">        Snackbar.make(findViewById(R.id.root_view), R.string.load_weather_info_fail, Snackbar.LENGTH_LONG).show();</div><div class="line">     <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里提示的字符串使用了资源字符串的形式，你可以自己加上中英文对应的内容。</p>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_load_fail_notify.png" width="300" alt=" weather_app_load_fail_notify"></div>


<p>Google官网网站上有对使用<code>Local unit test</code>的详细介绍：<a href="https://developer.android.google.cn/training/testing/unit-testing/local-unit-tests.html" target="_blank" rel="external">https://developer.android.google.cn/training/testing/unit-testing/local-unit-tests.html</a>，大家可以进步一对研读，增加对它的认识。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本地单元测试&quot;&gt;&lt;a href=&quot;#本地单元测试&quot; class=&quot;headerlink&quot; title=&quot;本地单元测试&quot;&gt;&lt;/a&gt;本地单元测试&lt;/h1&gt;&lt;p&gt;所谓&lt;code&gt;本地单元测试local unit test&lt;/code&gt;就是指，测试的代码不需要部署到设备上
    
    </summary>
    
      <category term="第5章-测试" scheme="http://booktest.anddle.com/categories/%E7%AC%AC5%E7%AB%A0-%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>1 测试的学问</title>
    <link href="http://booktest.anddle.com/5_%E6%B5%8B%E8%AF%95/1_%E6%B5%8B%E8%AF%95%E7%9A%84%E5%AD%A6%E9%97%AE/"/>
    <id>http://booktest.anddle.com/5_测试/1_测试的学问/</id>
    <published>2017-02-13T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试的学问"><a href="#测试的学问" class="headerlink" title="测试的学问"></a>测试的学问</h1><p><code>天气预报</code>的功能全都完成了，开发结束了吗？</p>
<p>当然还没有，关闭手机上的网络，再打开应用看看。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_crash.png" width="250" alt=" weather_app_crash"></div>

<p>刚完成的作品崩溃了。看看<code>Android Studio</code>下方的信息窗口，可以发现我们的程序联网获取数据失败后，程序进入了我们没有设想过的运行状态，所以崩溃了。</p>
<p>看来一个健壮的程序远不只是完成了功能，还有很多路要走，还需要经过严格的测试才算开发完成。</p>
<p>从这一节开始，我开始讲开发时会经常使用到的测试方法。</p>
<p>除了测试者假装成普通用户，使用应用的各种功能进行测试以外，可能还需要通过编写代码来进行功能的测试。</p>
<p>因为很多时候，手动测试的时候并不能模拟实际使用时出现的各种异常状况。</p>
<p><em>测试其实是一个很专门的职业，可以将它看作和开发有着同样地位的工作。可不像大多数人理解的那样，就是对着应用程序用手点来点去，没有错误发生就算测试完成了。只是靠手进行的测试也太Low了，自动化测试才是整个测试团队的核心。好的测试工程师也会写代码，思维更严密，会想很多日常操作不大会出现的方法来使用开发的产品。薪水比开发工程师薪水还要高啊。</em></p>
<h2 id="测试的分类"><a href="#测试的分类" class="headerlink" title="测试的分类"></a>测试的分类</h2><p>站在不同的角度，对测试有不同的分类方法。</p>
<h3 id="黑盒测试与白盒测试"><a href="#黑盒测试与白盒测试" class="headerlink" title="黑盒测试与白盒测试"></a>黑盒测试与白盒测试</h3><p>黑盒测试把要测试的内容看作是一个黑箱子，不需要知道里面是如何设计的，只要把特定的输入放进去，观察它的输出，看这个输出的结果是否与我们的预期相同。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_test_black_box_test.png" width="250" alt=" android_test_black_box_test"></div>

<p>白盒测试就要深入到被测对象的内部，把代码肢解，搞清楚它的逻辑，判断是否满足我们的设计需要。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_test_white_box_test.png" width="250" alt=" android_test_white_box_test"></div>

<p>黑盒和白盒也是相对的。白盒测试的对象分解后，也许就变成了一个又一个的黑盒。这是和测试的颗粒度相关的，越是分解的细致，黑盒测试越像是白盒测试；分解的粗犷些，白盒测试就像是黑盒测试。</p>
<h3 id="单元测试与集成测试"><a href="#单元测试与集成测试" class="headerlink" title="单元测试与集成测试"></a>单元测试与集成测试</h3><p>功能测试当中，单元测试与集成测试更容易理解和实际操作。</p>
<p>单元测试就是选定某个单独的功能点进行测试，它不考虑功能点之间的逻辑。而集成测试才是针对这些简单的功能点组合起来完成一连串逻辑功能而进行的测试。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/android_test_intirgrade_test.png.png" width="300" alt=" android_test_intirgrade_test"></div>

<p>比如<code>从网络获取天气信息并加以解析</code>这个操作，可以把它分成2个功能点：</p>
<ol>
<li>从网络获取天气数据；</li>
<li>对结果继续数据解析；</li>
</ol>
<p>每个点可以进行单元测试：</p>
<ol>
<li><p>从网络获取天气数据：</p>
<ul>
<li>没有网络的时候获取天气数据；</li>
<li>获取数据时网络超时;</li>
<li>获取了错误的网络信息；</li>
</ul>
</li>
<li><p>对结果继续数据解析：</p>
<ul>
<li>数据为空；</li>
<li>数据格式不正确解析失败；</li>
<li>解析出各种不同结果的数据；</li>
</ul>
</li>
</ol>
<p>2个点结合起来，获取数据并解析数据的测试，可以看作是集成测试。</p>
<p>除了从代码入手进行集成测试，还有大家熟悉的模拟日常使用进行的集成测试：让测试者操作应用，模拟用户使用各种功能，看有没有问题。</p>
<p>例如，</p>
<p>关闭网络连接，启动应用，看应用界面有没有显示当前天气信息；<br>打开网络连接，启动应用，看应用界面有没有显示当前天气信息；</p>
<p>等等等等。</p>
<hr>
<p>黑盒白盒、单元集成、用户模拟、代码测试，都是你中有我我中有你，后面的讲解中，我们将按照单元测试盒集成测试的主线进行。</p>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>进行测试一定要有章法，不能想到什么测什么，一定要想搞清楚测试的内容，根据测试的内容制定详细的测试计划。</p>
<p>这些测试的内容条目称作测试用例。<br>例如上面我们提到的<code>从网络获取天气信息并加以解析</code>，<br>如果是模拟用户操作，可能设置的测试用例就是：</p>
<ul>
<li>关闭网络连接，启动应用，看应用界面有没有显示当前天气信息；</li>
<li>打开网络连接，启动应用，看应用界面有没有显示当前天气信息；</li>
</ul>
<p>如果是进行代码级别的测试，可能就要按照前面提到的方式，进行单元测试了。</p>
<p>总之，不论是哪种测试，都要有对应的测试用例。测试用例要写清楚测试的内容，测试的方法，测试的步骤。</p>
<h2 id="安卓的测试"><a href="#安卓的测试" class="headerlink" title="安卓的测试"></a>安卓的测试</h2><p>安卓应用的测试可以分成下面几个大块，</p>
<p>单元测试</p>
<ol>
<li>Local Unit Test：本地单元测试；</li>
<li>Instruments Unit Test：需要在设备上进行的单元测试</li>
</ol>
<p>集成测试</p>
<ol>
<li>被测应用自身操作逻辑的测试；</li>
<li>被测应用与系统其他应用之间配合的逻辑测试；</li>
</ol>
<p>Google为安卓应用的不同测试，提供了专门的方法，可以大大提高对应用测试的效率。</p>
<p>当然，也不是说每种测试你一定要从头到尾都进行一遍，这个要依据你开发应用的实际情况来决定。测试也许需要付出成本的。你要自己决定把刀用到什么地方。</p>
<p>通常来讲，单元测试是最为重要的，</p>
<ul>
<li>它能够最快的发现问题所在，降低整个程序开发的风险；</li>
<li>单元测试能最方便的测试各种不常遇到的特殊情况。大部分程序的逻辑和功能都是凭借设计者的直觉和经验完成的，但是百密一疏，谁也不敢保证自己脑袋中的想法就一定面面俱到了。加大对一些不常遇到的特殊情况的测试，能够把问题杜绝在最早的时候；</li>
</ul>
<p>集成测试的时候，会抓出常见的使用场景来进行。因为集成测试的时候，是多个模块或功能点的组合，所以不大可能把每一种奇葩情况都考虑进去（实在要考虑也行，但是投入的人力成本可能很高，划不来啊。）</p>
<p>为了讲述的方便，我将测试分成本地测试、设备测试和性能测试3个大类进行介绍。</p>
<ul>
<li>本地测试-Local Test：就是本地的单元测试；</li>
<li>设备测试-Instrument Test：就是必须在设备上进行的测试，包括3方面的内容，<ol>
<li>Instrument unit test：设备上进行的单元测试；</li>
<li>UI测试；</li>
<li>组件测试；</li>
</ol>
</li>
<li>性能测试</li>
</ul>
<p><em>安卓系统还有一个重要的测试叫做兼容性测试-Compatibility Test Suite（CTS）。它是针对整个系统进行的测试，通过这个测试的安卓系统（比如国内各种定制的安卓系统），才能保证各种应用程序在这个系统上能正常的运行。这属于对整个系统的测试了，就不包含在为接下来要讨论的测试当中了。</em></p>
<p>接下来，我们将按照这个思路，把整个<code>天气预报</code>给测试一遍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试的学问&quot;&gt;&lt;a href=&quot;#测试的学问&quot; class=&quot;headerlink&quot; title=&quot;测试的学问&quot;&gt;&lt;/a&gt;测试的学问&lt;/h1&gt;&lt;p&gt;&lt;code&gt;天气预报&lt;/code&gt;的功能全都完成了，开发结束了吗？&lt;/p&gt;
&lt;p&gt;当然还没有，关闭手机上的网络，再打
    
    </summary>
    
      <category term="第5章-测试" scheme="http://booktest.anddle.com/categories/%E7%AC%AC5%E7%AB%A0-%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>18 调整列表显示</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/18_%E8%B0%83%E6%95%B4%E5%88%97%E8%A1%A8%E6%98%BE%E7%A4%BA/"/>
    <id>http://booktest.anddle.com/4_开发/18_调整列表显示/</id>
    <published>2017-02-12T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调整列表显示"><a href="#调整列表显示" class="headerlink" title="调整列表显示"></a>调整列表显示</h1><p>现在界面上列表的<code>异常显示</code>根本原因在于：将<code>ListView</code>放到了<code>NestedScrollView</code>之内。<code>NestedScrollView</code>内部要使用列表的话，必须使用<code>RecyclerView</code>。</p>
<p><code>RecyclerView</code>是我们之前提到的<code>Material Design</code>开发支持库中的一个。从它的名字可以看出，它的优点在于提高了数据项刷新、滚动的效率，减小了系统资源的占用。听起来有点抽象是吧，那就记住它的效率更高就行了，实现的原理我们就不去深究了。</p>
<p>使用<code>RecyclerView</code>之前我们要确定它是否已经被加载到了项目中。</p>
<p>由于之前我们已经添加了<code>设计支持库</code>-<code>compile &#39;com.android.support:design:24.2.1&#39;</code>，所以<code>RecyclerView</code>所使用的<code>com.android.support:recyclerview-v7:24.2.1</code>也已经被自动加载。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_load_recyclerview_support.png" width="250" alt=" weather_app_load_recyclerview_support"></div>

<h2 id="替换ListView"><a href="#替换ListView" class="headerlink" title="替换ListView"></a>替换ListView</h2><p>将<code>activity_main.xml</code>中原来的<code>ListView</code>，用<code>RecyclerView</code>替换，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">    <span class="attr">......</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">        </div><div class="line">        ......</div><div class="line">    </div><div class="line">        <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">            <span class="attr">......</span>/&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_list"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<p>修改<code>MainActivity.java</code>中关于原来<code>ListView</code>的部分，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mWeatherMoreInfoListView;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        ......</div><div class="line">        </div><div class="line">        mWeatherMoreInfoListView = (RecyclerView) findViewById(R.id.weather_more_info_list);</div><div class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(MainActivity.<span class="keyword">this</span>);</div><div class="line">        mWeatherMoreInfoListView.setLayoutManager(layoutManager);</div><div class="line">        </div><div class="line">        ......</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="重新设计Adapter"><a href="#重新设计Adapter" class="headerlink" title="重新设计Adapter"></a>重新设计Adapter</h2><p>我们将<code>ListView</code>替换成了<code>RecyclerView</code>，那么它们各自对应的<code>Adapter</code>也需要做些调整。<code>RecyclerView</code>需要与继承自<code>RecyclerView.Adapter</code>的<code>Adapter</code>配合使用。定义个<code>WeatherMoreInfoAdapter</code>，</p>
<ol>
<li><p>让<code>WeatherMoreInfoAdapter</code>继承自<code>RecyclerView.Adapter</code>，并重写3个必须实现的接口，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>增加<code>Adapter</code>的构造函数，让它能保持传入的要显示的数据项，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;WeatherMoreInfo&gt; mData;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfoAdapter</span><span class="params">(List&lt;WeatherMoreInfo&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mData = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>getItemCount()</code>要返回当前数据的项数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mData.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>RecyclerView</code>之所以能够提高运行效率，最主要的原因是它依靠一个<code>Holder</code>保存了对数据项界面中各个布局的引用，每次更新界面的时候，不需要再去<code>findViewById()</code>了。</p>
<p> 所以我们要：</p>
<ol>
<li><p>定义一个<code>ViewHolder</code>，让它继承自<code>RecyclerView.ViewHolder</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将数据项的布局在首次创建的时候保存起来，避免下次重复<code>findViewById()</code>，提高效率，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> ImageView icon;</div><div class="line">        <span class="keyword">public</span> TextView description;</div><div class="line">        <span class="keyword">public</span> TextView value;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(v);</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.icon = (ImageView) v.findViewById(R.id.weather_more_info_icon);</div><div class="line">            <span class="keyword">this</span>.description = (TextView) v.findViewById(R.id.weather_more_info_description);</div><div class="line">            <span class="keyword">this</span>.value = (TextView) v.findViewById(R.id.weather_more_info_value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>当<code>WeatherMoreInfoAdapter</code>需要创建数据项界面的时候就会自动触发<code>onCreateViewHolder()</code>的调用，获取一个<code>ViewHolder</code>。</p>
<p> 因此我们需要在这里创建布局界面，并把界面元素缓存到<code>ViewHolder里面</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View v = LayoutInflater.from(parent.getContext())</div><div class="line">            .inflate(R.layout.weather_more_info_item_layout, parent, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">        ViewHolder vh = <span class="keyword">new</span> ViewHolder(v);</div><div class="line">        <span class="keyword">return</span> vh;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>Adapter</code>更新数据是，会触发<code>onBindViewHolder()</code>，让我们更新界面，</p>
<ol>
<li>从<code>mData</code>取出要显示的数据；</li>
<li>将<code>RecyclerView.ViewHolder</code>转换成我们自定义的<code>ViewHolder</code>；</li>
<li><p>设置数据到界面元素上；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        WeatherMoreInfo info = mData.get(position);</div><div class="line">        ViewHolder viewHolder = (ViewHolder) holder;</div><div class="line">        viewHolder.icon.setImageResource(info.typeResId);</div><div class="line">        viewHolder.description.setText(info.description);</div><div class="line">        viewHolder.value.setText(info.value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<p>至此新的<code>Adapter</code>就设计完成了。</p>
<h2 id="使用WeatherMoreInfoAdapter"><a href="#使用WeatherMoreInfoAdapter" class="headerlink" title="使用WeatherMoreInfoAdapter"></a>使用WeatherMoreInfoAdapter</h2><p>根据新实现的<code>WeatherMoreInfoAdapter</code>，修改使用它的方法，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mWeatherMoreInfoListView;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        ......</div><div class="line">        </div><div class="line">        mWeatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        WeatherMoreInfoAdapter adapter = <span class="keyword">new</span> WeatherMoreInfoAdapter(mWeatherMoreInfoList);</div><div class="line">        mWeatherMoreInfoListView.setAdapter(adapter);</div><div class="line">        ......</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将程序运行看看，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase_2_complete.gif" width="250" alt=" weather_app_phase_2_complete"></div>

<p>我们的天气应用似乎已经开发完成了！！！</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>千万别忘记我在代码中留下的种种<code>bug</code>，我们将在后面的单元-关于测试章节将这些<code>bug</code>都找出来。让它成为真正可用的应用程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;调整列表显示&quot;&gt;&lt;a href=&quot;#调整列表显示&quot; class=&quot;headerlink&quot; title=&quot;调整列表显示&quot;&gt;&lt;/a&gt;调整列表显示&lt;/h1&gt;&lt;p&gt;现在界面上列表的&lt;code&gt;异常显示&lt;/code&gt;根本原因在于：将&lt;code&gt;ListView&lt;/code&gt;
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>17 Appbar动效</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/17_Appbar%E5%8A%A8%E6%95%88/"/>
    <id>http://booktest.anddle.com/4_开发/17_Appbar动效/</id>
    <published>2017-02-11T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Appbar动效"><a href="#Appbar动效" class="headerlink" title="Appbar动效"></a>Appbar动效</h1><p>之前的改造完成后，<code>Appbar</code>还不能具有滑动的效果。</p>
<p>要具备联动的滑动功能，还需要做3个地方的修改。</p>
<h2 id="使用CoordinatorLayout"><a href="#使用CoordinatorLayout" class="headerlink" title="使用CoordinatorLayout"></a>使用CoordinatorLayout</h2><p><code>CoordinatorLayout</code>是<code>Material Design</code>里面，所有滑动渐变效果必用的布局，它能根据内部某个元素滑动的百分比来控制内部另一个元素的属性变化。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/coordinatorlayout_explain.png" width="200" alt=" coordinatorlayout_explain"></div>

<p>要实现<code>Appbar</code>随着界面滑动而进行变化，</p>
<ol>
<li><p>必须引入<code>CoordinatorLayout</code>，使之替换<code>activity_main.xml</code>中，最外层的那个<code>LinearLayout</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.anddle.weatherapp.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">    <span class="attr">......</span>&gt;</div><div class="line">    </div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    ......</div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>给<code>CollapsingToolbarLayout</code>，增加<code>app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;</code>属性，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div></pre></td></tr></table></figure>
<p> 这两个属性说明要让<code>Appbar</code>可以滑动，并且<code>Appbar</code>完全折叠起来后，<code>Toolbar</code>要能够显示出来（假如没有设置<code>exitUntilCollapsed</code>，<code>Toolbar</code>是可以被完全折叠隐藏起来的）。</p>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_add_CoordinatorLayout.gif" width="250" alt=" weather_app_add_CoordinatorLayout"></div>

<h2 id="使用NestedScrollView"><a href="#使用NestedScrollView" class="headerlink" title="使用NestedScrollView"></a>使用NestedScrollView</h2><p>使用<code>CoordinatorLayout</code>之后可以看到，整个界面变形了，<code>天气预报区域</code>和<code>更多天气信息区域</code>整体向上移动到了顶部重叠起来。</p>
<p>这是因为<code>CoordinatorLayout</code>本质上是个<code>FrameLayout</code>，它内部的组件当然会堆叠起来。</p>
<p>要解决这个问题就要<code>NestedScrollView</code>出场了。它能向<code>LinearLayout</code>一样将组件按照顺序竖直排列。并且与<code>AppBarLayout</code>形成联动。</p>
<ol>
<li><p><code>NestedScrollView</code>的内部只能放一个子布局或者控件，所以必须把<code>天气预报区域</code>和<code>更多天气信息区域</code>做成一个整体，放进一个<code>LinearLayout</code>中，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">   <span class="comment">&lt;!--原有的布局--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"@dimen/forcast_height"</span></div><div class="line">       <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"@dimen/forcast_margin"</span></div><div class="line">       <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/forcast_margin"</span>&gt;</div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item1"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item2"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item3"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item4"</span> /&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item5"</span> /&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"@dimen/gap_height"</span></div><div class="line">       <span class="attr">android:background</span>=<span class="string">"#1F000000"</span></div><div class="line">       /&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_list"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将刚创建的<code>LinearLayout</code>放到<code>NestedScrollView</code>中，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">        </div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">       </div><div class="line">       ......</div><div class="line">       </div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>为<code>NestedScrollView</code>添加属性<code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line">        </div><div class="line">    ......</div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure>
<p> <code>appbar_scrolling_view_behavior</code>这个值是<code>Android SDK</code>提供的一个现成的取值。我们暂时只要知道这里必须这样使用就好了。要理解它深层次的含义，必须要系统的讲解<code>CoordinatorLayout</code>的设计思路。这个设计思路我会在将来的专题中去讲，现在大家就先记住使用它的结论吧。</p>
</li>
</ol>
<p>运行看看效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_add_NestedScrollView.gif" width="250" alt=" weather_app_add_NestedScrollView"></div>

<h2 id="更新地理位置"><a href="#更新地理位置" class="headerlink" title="更新地理位置"></a>更新地理位置</h2><p>使用了<code>设计支持库</code>后，<code>地理位置</code>信息不需要单独的布局文件了。它会作为应用的名称进行展示。</p>
<p>所以在更新地理位置的时候，我们只需要更新应用的名称就行。</p>
<ol>
<li><p>给<code>activity_main.xml</code>中的<code>CollapsingToolbarLayout</code>增加一个<code>id</code>-<code>collapsing_layout</code>，便于我们在<code>java</code>代码中获取到它；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_layout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>打开<code>MainActivity.java</code>源码文件，修改<code>updateWeatherDetail()</code>函数，使用<code>CollapsingToolbarLayout</code>的<code>setTitle()</code>方法修改应用的标题；</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">        ......</div><div class="line">        currentTemperatureView.setText(temperature);</div><div class="line">        temperatureRangeView.setText(temperatureRange);</div><div class="line">        </div><div class="line">        CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_layout);</div><div class="line">        collapsingToolbar.setTitle(location);</div><div class="line">        ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_add_loction_update.gif" width="250" alt=" weather_app_add_loction_update"></div>

<hr>
<p>至此，<code>Appbar</code>的滑动效果就完成了。不过大家也能看到，这里引入了一个新的问题：列表内容显示不正确，只有第一项的内容。</p>
<p>这个问题我们在下一节来解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Appbar动效&quot;&gt;&lt;a href=&quot;#Appbar动效&quot; class=&quot;headerlink&quot; title=&quot;Appbar动效&quot;&gt;&lt;/a&gt;Appbar动效&lt;/h1&gt;&lt;p&gt;之前的改造完成后，&lt;code&gt;Appbar&lt;/code&gt;还不能具有滑动的效果。&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>16 改造Appbar</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/16_%E6%94%B9%E9%80%A0Appbar/"/>
    <id>http://booktest.anddle.com/4_开发/16_改造Appbar/</id>
    <published>2017-02-10T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="改造Appbar"><a href="#改造Appbar" class="headerlink" title="改造Appbar"></a>改造Appbar</h1><p>现在我们开始改造<code>Appbar</code>，希望给它添加上滑动效果，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase_2_complete.gif" width="250" alt=" weather_app_phase_2_complete"></div>

<h2 id="Appbar改造方案"><a href="#Appbar改造方案" class="headerlink" title="Appbar改造方案"></a>Appbar改造方案</h2><p>根据<code>Material Design</code>规范，<code>Appbar</code>可以由3个区域组成，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_area.png" width="250" alt=" appbar_area"></div>

<p><code>天气预报</code>应用会使用到3个区域中的<code>Toolbar</code>和<code>Flexible space</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_bar_area.png" width="250" alt=" weather_app_bar_area"></div>

<p>它们的对应关系，可以使用<code>Android SDK</code>提供的<code>设计支持库</code>来实现，</p>
<table>
<thead>
<tr>
<th>区域</th>
<th>支持库控件</th>
<th>高度</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Appbar</td>
<td>android.support.design.widget.AppBarLayout</td>
<td>300dp</td>
<td>包含Toolbar和可变区域</td>
</tr>
<tr>
<td>Appbar</td>
<td>android.support.design.widget.CollapsingToolbarLayout</td>
<td>300dp</td>
<td>为了Toolbar和可变区域能配合滑动</td>
</tr>
<tr>
<td>Toolbar</td>
<td>android.support.v7.widget.Toolbar</td>
<td>56dp</td>
<td>显示位置信息</td>
</tr>
<tr>
<td>Flexible area</td>
<td>LinearLayout</td>
<td>300dp</td>
<td>放置天气详情</td>
</tr>
</tbody>
</table>
<p>其中，</p>
<ul>
<li><p>在<code>AppBarLayout</code>里面又放入了一个<code>CollapsingToolbarLayout</code>-可以折叠<code>Toolbar</code>的布局。<code>CollapsingToolbarLayout</code>能够让内部的<code>Toolbar</code>和<code>可变区域</code>能配合着滑动，出现设计中的滑动折叠效果。</p>
</li>
<li><p><code>Flexible area</code>可变区域中的内容，就是天气详情界面。</p>
</li>
</ul>
<h2 id="Appbar布局的调整"><a href="#Appbar布局的调整" class="headerlink" title="Appbar布局的调整"></a>Appbar布局的调整</h2><p>移除<code>地理位置</code>：</p>
<p>设计支持库提供的<code>CollapsingToolbarLayout</code>支持中，自动包含了我们之前设计的<code>地理位置</code>信息的展示区域-也就是显示应用的标题。所以我们，</p>
<ol>
<li>将它的布局从之前的布局文件中移除；</li>
<li>修改<code>MainActivity.java</code>的<code>updateWeatherDetail()</code>函数，将涉及到<code>weather_location</code>的代码移除；</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">        TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line">        TextView temperatureRangeView = (TextView) findViewById(R.id.temperature_range);</div><div class="line">        ImageView weatherIcon = (ImageView) findViewById(R.id.weather_icon);</div><div class="line"></div><div class="line">        currentTemperatureView.setText(temperature);</div><div class="line">        temperatureRangeView.setText(temperatureRange);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> iconId = R.mipmap.ic_sunny_cloudy_l;</div><div class="line">        ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加<code>Appbar</code>：</p>
<ol>
<li>将高度原本设置成<code>244dp</code>的<code>LinearLayout</code>修改成<code>AppBarLayout</code>，让它包裹整个<code>天气详情</code>布局；</li>
<li>高度调整为<code>300dp</code>，移除背景颜色和不需要的<code>orientation</code>属性；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--天气详情的布局--&gt;</span></div><div class="line">        ......</div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加<code>CollapsingToolbarLayout</code>：在<code>AppBarLayout</code>内，增加<code>CollapsingToolbarLayout</code>，让它包裹整个<code>天气详情</code>布局；</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">           </div><div class="line">           <span class="comment">&lt;!--天气详情的布局--&gt;</span></div><div class="line">           ......</div><div class="line">            </div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加<code>Toolbar</code>：</p>
<ol>
<li><p>在<code>CollapsingToolbarLayout</code>内，增加<code>Toolbar</code>，让它与整个<code>天气详情</code>布局处于平级；</p>
</li>
<li><p>给<code>Toolbar</code>设置<code>id</code>-<code>app_toolbar</code>;</p>
</li>
<li>高度设置成<code>&quot;?attr/actionBarSize&quot;</code>，这是<code>Android SDK</code>提供的一个值，表示的就是<code>Appbar</code>的高度-<code>56dp</code>；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">           </div><div class="line">           <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/app_toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span>/&gt;</div><div class="line">           </div><div class="line">           <span class="comment">&lt;!--天气详情的布局--&gt;</span></div><div class="line">           ......</div><div class="line">            </div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>?attr/actionBarSize&quot;</code>当中<code>?</code>的用法表示：这个属性的取值，与当前应用使用的到的<code>actionBarSize</code>属性的取值相同；但是<code>actionBarSize</code>取值到底是什么，我们并不需要知道，只要知道系统对这个值有设定就行了，我们的目的是让它与系统值保持一致即可。</p>
<p>修改<code>天气详情</code>布局的上边距：</p>
<p>将上边距从<code>24dp</code>调整为<code>80dp</code>，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">           </div><div class="line">           <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/app_toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span>/&gt;</div><div class="line">           </div><div class="line">           <span class="comment">&lt;!--天气详情的布局--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"80dp"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line">                </div><div class="line">                ......</div><div class="line">                </div><div class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">            </div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_design_appbar_layout.png" width="500" alt=" material_design_appbar_layout"></div>

<p>现在<code>Appbar</code>的布局就调整好了。</p>
<h2 id="启用Toolbar"><a href="#启用Toolbar" class="headerlink" title="启用Toolbar"></a>启用Toolbar</h2><p>我们在布局文件中，使用了<code>Toolbar</code>，希望借此代替程序原有的标题栏。</p>
<p>但代替的工作还没有完成。</p>
<p>还需要做两件配合的事情。</p>
<h3 id="代码设置"><a href="#代码设置" class="headerlink" title="代码设置"></a>代码设置</h3><p>在<code>MainActivity</code>创建的时候，我们需要，</p>
<ol>
<li>通过<code>findViewById()</code>找到布局文件中的<code>Toolbar</code>；</li>
<li>使用<code>setSupportActionBar()</code>替换系统默认的标题栏；</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"Weather app launched"</span>);</div><div class="line">        </div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.app_toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时运行程序看看吧。啊哦！！！程序运行崩溃了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_run_crash.png" width="200" alt=" app_run_crash"></div>

<p>当程序运行出错的时候，设备通常会弹出这样的对话框，提示用户。不过这个提示对开发者没有太大的用处，没法知道哪里出错了。</p>
<p>再看看<code>Android Studio</code>的调试窗口(<code>Android Monitor -&gt; logcat</code>)，打出了一堆的信息，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/app_run_crash_log.png" width="500" alt=" app_run_crash_log"></div>

<p>通过打出的信息，我们可以看到，系统提示我们要使用<code>Toolbar</code>的话，必须将主题的<code>windowActionBar</code>设置成<code>false</code>。</p>
<p>这是啥意思？主题又是啥？</p>
<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>主题是一个应用或者<code>Activity</code>的显示风格，它的定义和前面提到的<code>style</code>很类似。<br>先跟着我做一遍，之后你一定会对主题有个具体的认识，</p>
<ol>
<li>打开<code>res\valuse\styles.xml</code>文件，里面已经默认定义好了一个主题<code>AppTheme</code>;</li>
<li><p>自定义一个主题-<code>AppTheme.NoActionBar</code>；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    </div><div class="line">    ......</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><code>AppTheme.NoActionBar</code>的这种写法，说明它继承了主题<code>AppTheme</code>的所有属性。</p>
<p>这个新主题，新增了<code>windowActionBar</code>为<code>false</code>，和<code>windowNoTitle</code>为<code>true</code>两个属性。</p>
<p><em>通过<code>.</code>分割主题名称的命名方式，是主题的隐性继承，还有一种使用<code>parent=</code>的显性继承方式，例如<code>AppTheme</code>的定义。</em></p>
<p>使用这个主题的时候，需要，</p>
<ol>
<li><p>打开<code>AndroidManifest.xml</code>文件，</p>
</li>
<li><p>修改<code>Activity</code>的属性，给它加上<code>android:theme=&quot;@style/AppTheme.NoActionBar&quot;</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    <span class="attr">......</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">    </div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.NoActionBar"</span>&gt;</div><div class="line">            ......</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样一来，<code>MainActivity</code>就使用了我们刚定义的<code>AppTheme.NoActionBar</code>主题。</p>
<p>同时也可以看到整个程序-<code>application</code>，在默认情况下使用的是<code>AppTheme</code>主题。</p>
<p>再次运行程序看看，成了，程序没有报错了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_change_activity_theme_for_material_design.png" width="250" alt=" weather_app_change_activity_theme_for_material_design"></div>

<p>不过这里会发现2个问题：</p>
<ol>
<li><code>天气预报</code>几个字是黑色，与我们预想的不符；</li>
<li>滑动整个界面，还是没有<code>Appbar</code>动态变化的效果；</li>
</ol>
<p>我们先来解决第1个问题。</p>
<p><code>天气预报</code>这几个字，默认情况下是程序的名称，是<code>AppBarLayout</code>自身就有的一部分。</p>
<p>因此可以给<code>AppBarLayout</code>设置一个显示白色文字的主题。</p>
<p><code>Android SDK</code>提供了很多现成的主题，这里可以使用一个叫做<code>ThemeOverlay.AppCompat.Dark.ActionBar</code>的主题。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></div><div class="line">   <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div></pre></td></tr></table></figure>
<p>为什么是选择的这个主题？</p>
<ol>
<li>这个主题能让文字从黑色变成白色，其他文字的属性都不会被影响；</li>
<li>用多了就习惯了；</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_add_appbar_theme_for_material_design.png" width="250" alt=" weather_app_add_appbar_theme_for_material_design"></div>

<hr>
<p>要解决第2个问题，我们还的继续调整整个界面的布局。</p>
<p>咱们下一节继续。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;改造Appbar&quot;&gt;&lt;a href=&quot;#改造Appbar&quot; class=&quot;headerlink&quot; title=&quot;改造Appbar&quot;&gt;&lt;/a&gt;改造Appbar&lt;/h1&gt;&lt;p&gt;现在我们开始改造&lt;code&gt;Appbar&lt;/code&gt;，希望给它添加上滑动效果，&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>15 MaterialDesign开发</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/15_MaterialDesign%E5%BC%80%E5%8F%91/"/>
    <id>http://booktest.anddle.com/4_开发/15_MaterialDesign开发/</id>
    <published>2017-02-09T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Material-Design开发"><a href="#Material-Design开发" class="headerlink" title="Material Design开发"></a>Material Design开发</h1><p>从这一章节开始，我们将开始把现有的设计改造成<code>Material Design</code>。</p>
<p>前面我们已经详细的介绍过了<code>Material Design</code>设计相关的内容，但是具体落实到实际的开发，又需要考验程序开发者了。</p>
<p><code>Google</code>深知实现<code>Material Design</code>对于初级开发者的难度。为了让开发者们能尽可能的使用<code>Material Design</code>规范开发应用，它提供了一系列的开发支持库，</p>
<table>
<thead>
<tr>
<th>支持库名称</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>设计支持库</td>
<td>com.android.support:design:24.2.1</td>
</tr>
<tr>
<td>v7 appcompat 库</td>
<td>com.android.support:appcompat-v7:24.2.0</td>
</tr>
<tr>
<td>v7 cardview 库</td>
<td>com.android.support:cardview-v7:24.2.0</td>
</tr>
<tr>
<td>v7 gridlayout 库</td>
<td>com.android.support:gridlayout-v7:24.2.0</td>
</tr>
<tr>
<td>v7 palette 库</td>
<td>com.android.support:palette-v7:24.2.0</td>
</tr>
<tr>
<td>v7 recyclerview 库</td>
<td>com.android.support:recyclerview-v7:24.2.0</td>
</tr>
</tbody>
</table>
<p>这些支持库是对<code>Android SDK</code>的拓展，实现了很多复杂的<code>Material Design</code>动态效果。开发者不需要去为如何实现一个动效而抓耳挠腮，只需要把精力放倒程序逻辑当中。</p>
<p>这些开发包具体支持了哪些<code>Material Design</code>的设计呢？下面举几个例子，</p>
<p>悬浮按钮（Floating Action bar）</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/material_classic_float_button.png" width="50" alt=" material_classic_float_button"></div>

<p><code>Appbar</code>可滑动的界面特效（CoordinatorLayout）</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/appbar_scroll_toolbar_image.gif" width="250" alt=" appbar_scroll_toolbar_image"></div>

<p>侧边栏滑动</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/slider_drawer_example.png" width="250" alt=" slider_drawer_example"></div>

<h2 id="支持包的用法"><a href="#支持包的用法" class="headerlink" title="支持包的用法"></a>支持包的用法</h2><p>看到这么多支持库，是不是有点犯晕，不知道该用哪个，具体怎么使用了？</p>
<p>现在开始改造<code>天气预报</code>，给工程添加<code>Material Design</code>的支持库。</p>
<p><code>Android Studio</code>给我们提供了一个非常简便的方法，</p>
<ol>
<li><p>打开项目工程下的<code>app\build.grandle</code>目录（注意是<strong><code>app目录</code></strong>下的<code>build.grandle</code>文件），</p>
</li>
<li><p>给<code>dependencies</code>添加支持库的引用，<code>compile &#39;com.android.support:design:24.2.1&#39;</code></p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class="line">    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', &#123;</div><div class="line">        exclude group: 'com.android.support', module: 'support-annotations'</div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:24.2.1'</div><div class="line">    compile 'com.android.support:design:24.2.1'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 其中的<code>compile &#39;com.android.support:appcompat-v7:24.2.1&#39;</code>是原本就有的，假如没有，只是添加<code>compile &#39;com.android.support:design:24.2.1&#39;</code>也行，<code>Android Studio</code>会自动加上<code>设计支持库</code>需要的库文件。</p>
</li>
<li><p>保存修改后，点击右上角出现的<code>Sync Now</code>就可以了，</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/add_design_lib_support.png" width="400" alt=" add_design_lib_support"></div>

</li>
</ol>
<p>可以看到，整个项目多出了如下的<code>java包</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/add_design_lib_support_result.png" width="500" alt=" add_design_lib_support_result"></div>

<p>引入<code>设计支持库</code>的时候，<code>Android Studio</code>还会检查是否已经引入了其他相关支持库，如果没有会自动引入，例如很多<code>v4</code>和<code>v7</code>的支持包。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/add_design_lib_support_auto_load.png" width="250" alt=" add_design_lib_support_auto_load"></div>

<p>假如要使用没有自动引入的开发库，我们需要使用上面的方法，手动引入支持库。例如<code>v7 palette 库</code>，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">   ......</div><div class="line">   compile 'com.android.support:appcompat-v7:24.2.1'</div><div class="line">   compile 'com.android.support:design:24.2.1'</div><div class="line">   compile 'com.android.support:palette-v7:24.2.0'</div><div class="line">   testCompile 'junit:junit:4.12'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em><code>Google</code>提供的官方支持库，包含了很多种类，开发者需要根据自己的需要自己选择。最重要的就是<code>v4支持库</code>（由多个支持库组成） <code>v7支持库</code>由多个支持库组成）和<code>设计支持库</code>。通常来讲只要引入<code>设计支持库</code>，就能自动引入很多常用的相关开发库了。</em></p>
<p><em>支持库就是<code>aar</code>格式的文件，把它解压后可以发现，里面包含了开发需要使用到的<code>jar包</code>、资源文件等等。不过你并不需要自己去找这样的<code>aar</code>文件，<code>Android Studio</code>会自动为你完成匹配。</em></p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/aar_file_content.png" width="200" alt=" aar_file_content"></div>

<h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2><p>在前面的设计原理章节，我们讲到了<code>Material Design</code>有一个色彩搭配的规则：一个应用要设定它的调色板，<code>Primary Color</code> <code>Primary Dark Color</code> <code>Accent Color</code>。</p>
<p>这个规则在代码实现中是如何得以体现的呢？</p>
<p>我们打开项目工程的<code>app\src\main\res\values\colors.xml</code>，可以看到这样的颜色定义，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这三个颜色正是对应着调色板的三个主要颜色，</p>
<table>
<thead>
<tr>
<th>调色板块</th>
<th>颜色属性名称</th>
<th>调色板颜色名</th>
<th>颜色值</th>
</tr>
</thead>
<tbody>
<tr>
<td>Primary Color</td>
<td>colorPrimary</td>
<td>Indigo 500</td>
<td>#3F51B5</td>
</tr>
<tr>
<td>Primary Dark Color</td>
<td>colorPrimaryDark</td>
<td>Indigo 700</td>
<td>#303F9F</td>
</tr>
<tr>
<td>Accent Color</td>
<td>colorAccent</td>
<td>Pink A200</td>
<td>#FF4081</td>
</tr>
</tbody>
</table>
<p>在打开项目工程的<code>app\src\main\res\values\styles.xml</code>，可以看到这样的颜色定义，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    ......</div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到，这里定义了一个主题<code>AppTheme</code>。</p>
<p>主题<code>theme</code>是一个应用或者<code>Activity</code>的显示风格，它的定义和前面提到的<code>style</code>很类似。</p>
<p>这个主题当中，重新定义了主题的<code>colorPrimary</code> <code>colorPrimaryDark</code> <code>colorAccent</code>属性，把调色板的颜色赋予给了它们。</p>
<p>又在<code>AndroidManifest.xml</code>当中把这个主题赋予了整个应用，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.anddle.weatherapp"</span>&gt;</div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">......</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        </div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面整个这套配色体系在工程创建的时候，就自动为我们创建好了。所以在进入这一章节之前，将应用运行起来的时候，已经可以看到<code>天气预报</code>界面这样的颜色搭配了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase1_complete.png" width="250" alt=" weather_app_phase1_complete"></div>

<p>假如你对<code>主题theme</code>还是感觉很抽象没有明白，也没有关系，后面我们会自定一个<code>主题</code>，我想等你做过一遍后，会对它有一个具体的认识与理解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Material-Design开发&quot;&gt;&lt;a href=&quot;#Material-Design开发&quot; class=&quot;headerlink&quot; title=&quot;Material Design开发&quot;&gt;&lt;/a&gt;Material Design开发&lt;/h1&gt;&lt;p&gt;从这一章节开始，我们
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>14 界面优化</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/14_%E7%95%8C%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://booktest.anddle.com/4_开发/14_界面优化/</id>
    <published>2017-02-08T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面优化"><a href="#界面优化" class="headerlink" title="界面优化"></a>界面优化</h1><p><code>天气预报</code>的功能都实现了，但代码当中还有一些需要优化的地方。比如对资源的使用方式。</p>
<h2 id="style的用法"><a href="#style的用法" class="headerlink" title="style的用法"></a>style的用法</h2><p>假如我们想要修改当日温度的字体属性，那就需要修改<code>activity_main.xml</code>中<code>current_temperature</code>所对应的字体颜色、大小等参数。</p>
<p>修改的方案有2个：</p>
<ol>
<li>直接修改<code>TextView</code>对应的<code>android:textColor</code> <code>android:textSize</code>等属性；</li>
<li>给<code>TextView</code>设置一个<code>style</code>，将希望的属性都放到这个<code>Style</code>当中；</li>
</ol>
<p>作为优化的方式，我们当然选择第2种方案：使用<code>Style</code>。可以将使用这种类型的字体都统一起来，如果需要修改这些文字的样式，只要修改这种<code>Style</code>就可以了，大大减小了编码的工作量，便于后期维护。</p>
<p>首先来改造一下<code>天气详情</code>当中的当前温度，</p>
<ol>
<li>打开<code>res\values\styles.xml</code>文件；</li>
<li><p>将<code>android:textColor</code> <code>android:textSize</code>等特性定义成一个<code>style</code>－－－`WeatherDetailCurrentTemperatureStyle。</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"WeatherDetailCurrentTemperatureStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#b3ffffff<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>56sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p> <code>android:textColor</code> <code>android:textSize</code>的取值，完全与<code>current_temperature</code>中的设置完全相同；</p>
</li>
<li><p>为<code>TextView</code>设置<code>android:textAppearance</code>属性，添加<code>WeatherDetailCurrentTemperatureStyle</code>风格；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/current_temperature"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:text</span>=<span class="string">"23°"</span></div><div class="line">     <span class="attr">android:textAppearance</span>=<span class="string">"@style/WeatherDetailCurrentTemperatureStyle"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用类似的方法，我们可以添加更多的<code>style</code>，将它们应用到对应的<code>TextView</code>中，</p>
<table>
<thead>
<tr>
<th>style名称</th>
<th>应用的对象</th>
<th>所在文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>WeatherDetailCurrentTemperatureStyle</td>
<td>current_temperature</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>WeatherDetailTemperatureRangeStyle</td>
<td>temperature_range</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>WeatherDetailLocationStyle</td>
<td>weather_location</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>WeatherForcastDateStyle</td>
<td>forcast_date</td>
<td>forcast_item.xml</td>
</tr>
<tr>
<td>WeatherForcastTemperatureRangeStyle</td>
<td>forcast_temperature</td>
<td>forcast_item.xml</td>
</tr>
<tr>
<td>WeatherMoreInfoDescriptionStyle</td>
<td>weather_more_info_description</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
<tr>
<td>WeatherMoreInfoValueStyle</td>
<td>weather_more_info_value</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
</tbody>
</table>
<h2 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h2><p>字符串、颜色以及各种尺寸相关的值都属于程序的资源。<br>我们前面都是直接使用的这些资源，例如,</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"WeatherForcastTemperatureRangeStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#8a000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其实这些资源可以分门别类的放到单独的位置定义，然后通过<code>@</code>引用的方式进行使用。</p>
<h3 id="优化颜色"><a href="#优化颜色" class="headerlink" title="优化颜色"></a>优化颜色</h3><p>颜色的定义和使用，</p>
<ol>
<li><p>颜色应该定义到<code>res\values\colors.xml</code>当中，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorBlackDarkText"</span>&gt;</span>#DE000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在需要使用它的地方采用引用的方式，<code>@color/</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"WeatherMoreInfoDescriptionStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorBlackDarkText<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用类似的方法，我们可以添加更多的<code>color</code>，将它们应用到对应的地方，</p>
<table>
<thead>
<tr>
<th>颜色值</th>
<th>颜色名称</th>
<th>所在文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>#DE000000</td>
<td>colorBlackDarkText</td>
<td>凡事使用了该颜色的位置</td>
</tr>
<tr>
<td>#8A000000</td>
<td>colorBlackLightText</td>
<td>凡事使用了该颜色的位置</td>
</tr>
<tr>
<td>#FFFFFFFF</td>
<td>colorWhiteLightText</td>
<td>凡事使用了该颜色的位置</td>
</tr>
<tr>
<td>#b3FFFFFF</td>
<td>colorWhiteDarkText</td>
<td>凡事使用了该颜色的位置</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorBlackDarkText"</span>&gt;</span>#DE000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorBlackLightText"</span>&gt;</span>#8A000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorWhiteLightText"</span>&gt;</span>#FFFFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorWhiteDarkText"</span>&gt;</span>#b3FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="优化尺寸"><a href="#优化尺寸" class="headerlink" title="优化尺寸"></a>优化尺寸</h3><p>之前给控件或者布局设置边距的时候，都是直接写的<code>xxdp</code>。这个数值最好也统一放倒资源文件当中进行统一管理，</p>
<ol>
<li><p>尺寸应该定义到<code>res\values\dimens.xml</code>当中，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"forcast_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在需要使用它的地方采用引用的方式，<code>@dimen/</code>，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"@dimen/forcast_margin"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/forcast_margin"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item3"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item4"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item5"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用类似的方法，我们可以添加更多的<code>color</code>，将它们应用到对应的地方，</p>
<table>
<thead>
<tr>
<th>数值</th>
<th>数值名称</th>
<th>所在文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>16dp</td>
<td>forcast_margin</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>10dp</td>
<td>gap_height</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>100dp</td>
<td>forcast_height</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>16dp</td>
<td>list_icon_left_margin</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
<tr>
<td>72dp</td>
<td>list_text_left_margin</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
<tr>
<td>16dp</td>
<td>list_text_right_margin</td>
<td>weather_more_info_item_layout.xml</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Default screen margins, per the Android Design guidelines. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"activity_horizontal_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"activity_vertical_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"forcast_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"forcast_height"</span>&gt;</span>100dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"gap_height"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"list_icon_left_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"list_text_left_margin"</span>&gt;</span>72dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"list_text_right_margin"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="优化字符串"><a href="#优化字符串" class="headerlink" title="优化字符串"></a>优化字符串</h3><p>当应用启动后，还没有获取到网络数据的时候，界面上应该显示<code>空数据</code>才行，不然很容易误导用户。</p>
<p>在之前的开发中，我为了在布局的时候能够看到界面效果，所以写入了很多假的信息。这里需要一一挪除了。对于文字的部分，如果没有显示我们就统一使用<code>-</code>来代替，</p>
<table>
<thead>
<tr>
<th>原始文字</th>
<th>空数据文字</th>
</tr>
</thead>
<tbody>
<tr>
<td>23°</td>
<td>–°</td>
</tr>
<tr>
<td>17℃～25℃</td>
<td>-℃～-℃</td>
</tr>
<tr>
<td>成都</td>
<td>–</td>
</tr>
<tr>
<td>星期X</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>字符串应该统一定义到<code>res\values\strings.xml</code>当中，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"current_temperature_none"</span>&gt;</span>--°<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在使用它的地方用<code>@string/</code>来引用，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">     <span class="attr">android:id</span>=<span class="string">"@+id/current_temperature"</span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:text</span>=<span class="string">"@string/current_temperature_none"</span></div><div class="line">     <span class="attr">android:textAppearance</span>=<span class="string">"@style/WeatherDetailCurrentTemperatureStyle"</span>/&gt;</div></pre></td></tr></table></figure>
<p>使用类似的方法，我们可以添加更多的<code>string</code>，将它们应用到对应的地方，</p>
<table>
<thead>
<tr>
<th>字符串</th>
<th>字符串名称</th>
<th>所在文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>–°</td>
<td>current_temperature_none</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>-℃～-℃</td>
<td>temperature_range_none</td>
<td>activity_main.xml forcast_item.xml</td>
</tr>
<tr>
<td>–</td>
<td>location_none</td>
<td>activity_main.xml</td>
</tr>
<tr>
<td>—</td>
<td>date_none</td>
<td>forcast_item.xml</td>
</tr>
</tbody>
</table>
<p>对于在代码中使用字符串，应该采用如下方式，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = context.getString(R.string.current_temperature_none);</div></pre></td></tr></table></figure>
<p>其中<code>context</code>是一个应用到上下文环境。对一个Activity来说，就是Activity自身<code>MainActivity.this</code>。</p>
<p>设置字符串的时候，也可以直接使用字符串对应的资源id，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line">currentTemperatureView.setText(R.string.current_temperature_none);</div></pre></td></tr></table></figure>
<p>项目工程中<code>WeatherMoreInfo.java</code>中使用了字符串，所以需要将这里的字符串进行改造，</p>
<ol>
<li><p><code>strings.xml</code>中增加对应的文字：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"wind_direction"</span>&gt;</span>Wind Direction<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"wind_level"</span>&gt;</span>Wind Level<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"humidity_level"</span>&gt;</span>Humidity<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"air_quality"</span>&gt;</span>Air Quality<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"sport"</span>&gt;</span>Sport<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"ultraviolet_level"</span>&gt;</span>Ultraviolet<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>WeatherMoreInfo.java</code>中的<code>description</code>类型从<code>String</code>改变成<code>int</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> description;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfo</span><span class="params">(String keyword, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (keyword) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"wind_direction"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_wind_direction;</div><div class="line">                <span class="keyword">this</span>.description = R.string.wind_direction;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"wind_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_wind_level;</div><div class="line">                <span class="keyword">this</span>.description = R.string.wind_level;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"humidity_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_humidity_level;</div><div class="line">                <span class="keyword">this</span>.description = R.string.humidity_level;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"air_quality"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_air_quality;</div><div class="line">                <span class="keyword">this</span>.description = R.string.air_quality;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"sport_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_sport_level;</div><div class="line">                <span class="keyword">this</span>.description = R.string.sport;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"ultraviolet_ray"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_ultraviolet_level;</div><div class="line">                <span class="keyword">this</span>.description = R.string.ultraviolet_level;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>将代码中所有使用资源的地方，都按照前面介绍的方式进行改造。以后在修改代码的时候，就不会牵一发而动全身了，只需要修改一处，就能够把所有需要修改的地方都修改到了。</p>
<p>重新运行程序，可以看到这样的界面了，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/add_default_string_support.png" width="250" alt=" add_default_string_support"></div>

<p>现在资源使用方式的优化就完成了。</p>
<h2 id="多国语言支持"><a href="#多国语言支持" class="headerlink" title="多国语言支持"></a>多国语言支持</h2><p>安卓系统，支持多国语言。它的本质是使用<code>资源的命名法</code>在<code>res\</code>目录下，增加一个<code>value-xx</code>目录，然后在里面添加<code>string.xml</code>文件，该文件当中定义的字符串就是当地的语言。</p>
<p>例如增加中文支持，就增加一个名字叫做<code>value-zh</code>的目录。添加<code>string.xml</code>文件后，就该文件当中定义的中文字符串。</p>
<p>现在我们将添加对中文支持。</p>
<ol>
<li><p>在<code>res</code>目录下，点击右键，启动创建android resource的向导；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_zh_support1.png" width="400" alt=" create_zh_support1"></div>
</li>
<li><p>在<code>File name</code>栏，输入<code>strings</code>，再选中下方的<code>locale</code>，添加到右边；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_zh_support2.png" width="400" alt=" create_zh_support2"></div>
</li>
<li><p>选中<code>zh</code>，代表中文；</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_zh_support3.png" width="400" alt=" create_zh_support3"></div>
</li>
<li><p>在创建出来的中文的<code>res\values-zh\strings.xml</code>文件中，仿照<code>res\values\strings.xml</code>的内容，添加中文语言；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    &lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>天气预报<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"wind_direction"</span>&gt;</span>风向<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"wind_level"</span>&gt;</span>风力<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"humidity_level"</span>&gt;</span>湿度<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"air_quality"</span>&gt;</span>空气质量<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"sport"</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"ultraviolet_level"</span>&gt;</span>紫外线<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里的<code>app_name</code>，在<code>AndroidManifest.xml</code>文件中被使用，里面使用了<code>android:label</code>属性，指定这个应用的名称。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_phase1_complete.png" width="250" alt=" weather_app_phase1_complete"></div>

<p>现在<code>天气预报</code>就支持了中文和英文显示了。</p>
<hr>
<p>至此我们也完成了整个第一阶段的任务：开发完成了<code>天气预报</code>的所有功能。我们将在下一个阶段开始，加入<code>Material Design</code>的设计。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面优化&quot;&gt;&lt;a href=&quot;#界面优化&quot; class=&quot;headerlink&quot; title=&quot;界面优化&quot;&gt;&lt;/a&gt;界面优化&lt;/h1&gt;&lt;p&gt;&lt;code&gt;天气预报&lt;/code&gt;的功能都实现了，但代码当中还有一些需要优化的地方。比如对资源的使用方式。&lt;/p&gt;
&lt;h2 
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>13 获取网络数据</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/13_%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE/"/>
    <id>http://booktest.anddle.com/4_开发/13_获取网络数据/</id>
    <published>2017-02-07T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取网络数据"><a href="#获取网络数据" class="headerlink" title="获取网络数据"></a>获取网络数据</h1><p>之前对数据的解析都是建立在假数据之上的，当网络端的开发者把真实数据上线以后，我们就可以通过网络获取真实的数据了。</p>
<p>正如我们最早的假设前提那样，网络数据是由我构造好了放到自己的服务器上的，里面的内容并不是真实的当日天气，只是便于大家学习如何使用网络访问获取数据。</p>
<p>我们这个示例的网络地址是：<a href="http://book.anddle.com/api/query_weather" target="_blank" rel="external">http://book.anddle.com/api/query_weather</a>。</p>
<p>大家通过浏览器打开，可以看到它包含的内容与我们之前写死在代码中的内容完全一致。</p>
<p>很多时候访问网络数据还需要传入访问的参数，就像我们使用<code>java语言</code>中的函数调用一样，同一个接口需要很多的参数。比如，我们这个天气信息的请求，可以携带地理位置的参数，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://book.anddle.com/api/query_weather?location=北京&amp;date=2017-01-01</div></pre></td></tr></table></figure>
<p>尾部的<code>?</code>表示后面携带的都是参数，<code>location=北京&amp;date=2017-01-01</code>就是携带的参数。</p>
<ol>
<li>这些参数成键值对的形式出现，用<code>=</code>分割-<code>location=北京</code> <code>date=2017-01-01</code>；</li>
<li>参数之间用<code>&amp;</code>分割；</li>
</ol>
<p>我们这里很简单，没有提供参数，只需要使用<code>http://book.anddle.com/api/query_weather</code>发出查询请求就可以了。</p>
<p><em>准确的来讲，我们这里使用的都是<code>http</code>的<code>GET</code>方法获取数据，还有一种<code>POST</code>方法。<code>POST</code>方法不会在链接地址中明确的指出调用的参数是什么，而是会在<code>http</code>协议的报文中携带参数。将调用参数放在报文里会更加的安全，避免别人看到敏感的信息，比如用户名和密码。</em></p>
<h2 id="获取网络数据的通用方法"><a href="#获取网络数据的通用方法" class="headerlink" title="获取网络数据的通用方法"></a>获取网络数据的通用方法</h2><p>现在的应用几乎都离不开网络访问，<code>Android SDK</code>已经继承了对网络访问的全面支持。</p>
<p>使用<code>HttpURLConnection</code>，就能获取该链接下的内容，</p>
<ol>
<li><p>通过访问地址创建<code>URL</code>，</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">URL url = null;</div><div class="line">try &#123;</div><div class="line">    url = new URL(&quot;http://booktest.anddle.com/api/query_weather&quot;);</div><div class="line">    </div><div class="line">&#125; catch (MalformedURLException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>利用<code>HttpURLConnection</code>的<code>openConnection()</code>连接网络，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</div><div class="line">    </div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过打开的连接获取流接口，并通过流接口读取数据，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">InputStream in = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    in = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream());</div><div class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">    <span class="keyword">int</span> readBytes = <span class="number">0</span>;</div><div class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">while</span>((readBytes = in.read(buffer)) &gt; <span class="number">0</span>)&#123;</div><div class="line">        stringBuilder.append(<span class="keyword">new</span> String(buffer, <span class="number">0</span>, readBytes));</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>关闭连接，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">urlConnection.disconnect();</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="获取天气预报数据"><a href="#获取天气预报数据" class="headerlink" title="获取天气预报数据"></a>获取天气预报数据</h2><p>使用<code>HttpURLConnection</code>获取天气数据的过程是个需要在工作线程中进行的工作。因此，需要将它放到<code>UpdateTask</code>的<code>doInBackground()</code>方法当中。</p>
<p>将原有的写死的假数据移除，代替以真实的网络获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">    Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask doInBackground - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line">    </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    </div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://booktest.anddle.com/api/query_weather"</span>);</div><div class="line">        </div><div class="line">        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</div><div class="line">        </div><div class="line">        InputStream in = <span class="keyword">new</span> BufferedInputStream(urlConnection.getInputStream());</div><div class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">        <span class="keyword">int</span> readBytes = <span class="number">0</span>;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>((readBytes = in.read(buffer)) &gt; <span class="number">0</span>)&#123;</div><div class="line">        stringBuilder.append(<span class="keyword">new</span> String(buffer, <span class="number">0</span>, readBytes));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        urlConnection.disconnect();</div><div class="line">        </div><div class="line">        String weatherRes = stringBuilder.toString();</div><div class="line">        </div><div class="line">        ......</div><div class="line">        </div><div class="line">   &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"fail to parse JSON content"</span>);</div><div class="line">   &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="增加权限"><a href="#增加权限" class="headerlink" title="增加权限"></a>增加权限</h2><p>安卓系统对每个应用程序都有严格的权限控制，如果程序要访问网络，必须明确的告诉用户。</p>
<p>这是对用户利益的保护，谁也不愿意一个程序在自己不知情的情况下做一些可能会侵犯自己隐私的事情吧。</p>
<p>如果不添加，那么程序在运行的时候会报这样的错误，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/no_internet_access_permission.png" width="500" alt=" no_internet_access_permission"></div>


<p>添加<code>网络访问权限</code>很简单，打开项目工程的<code>AndroidManifest.xml</code>文件，在<code>application</code>标签之前，添加上<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/androidmanifest_file.png" width="200" alt=" androidmanifest_file"></div>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.anddle.weatherapp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这时运行程序就不会有问题了。</p>
<hr>
<p>至此，<code>天气预报</code>应用的功能就全部实现了。</p>
<h2 id="其他访问网络数据的方式"><a href="#其他访问网络数据的方式" class="headerlink" title="其他访问网络数据的方式"></a>其他访问网络数据的方式</h2><p>在使用<code>AsyncTask</code>的过程中，我们可以体会到它的好处：将耗时不确定的操作与界面刷新整合在了一起，我们开发者不需要使用原始的<code>Thread</code>，不需要去考虑工作线程与主线程如何配合工作这个细节了。</p>
<p>那么也许<code>Android SDK</code>还可以提供一个针对网络访问的异步解决方案：</p>
<ol>
<li>网络访问在工作线程中（不像<code>AsyncTask</code>提供的是一个通用的耗时操作）；</li>
<li>界面刷新在主线程中；</li>
</ol>
<p>针对上面的需求，出现了一些不错的第三方解决方案，例如<br><code>OKHttp</code> <code>volley</code>等等。它们就像是一个个轮子，我们不需要重新开放这些功能了，直接拿过来用就可以了。</p>
<p>在这系列的文章中，我们暂时不适用第三方库做开发，先充分的认识下<code>纯正的安卓开发</code>。</p>
<h2 id="天气API"><a href="#天气API" class="headerlink" title="天气API"></a>天气API</h2><p>为了开发的方便、降低入门的难度，我自己写了一个简单的网络服务提供天气信息。但这并不是真实有效的信息，大家只能用来学习开发使用。</p>
<p>但是互联网上有很多第三方机构提供了真实可用的天气预报。例如<a href="http://www.thinkpage.cn/" target="_blank" rel="external"><code>心知天气</code></a>。</p>
<p>它提供了很多天气信息相关的调用接口。</p>
<p>这些接口和我之前介绍的都很类似，例如查询当前天气的接口：<code>https://api.thinkpage.cn/v3/weather/now.json?key=your_api_key&amp;location=beijing&amp;language=zh-Hans&amp;unit=c</code></p>
<p>返回的结果如下，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "results": [&#123;</div><div class="line">  "location": &#123;</div><div class="line">      "id": "C23NB62W20TF",</div><div class="line">      "name": "西雅图",</div><div class="line">      "country": "US",</div><div class="line">      "timezone": "America/Los_Angeles",</div><div class="line">      "timezone_offset": "-07:00"</div><div class="line">  &#125;,</div><div class="line">  "now": &#123;</div><div class="line">      "text": "多云", //天气现象文字</div><div class="line">      "code": "4", //天气现象代码</div><div class="line">      "temperature": "14", //温度，单位为c摄氏度或f华氏度</div><div class="line">      "feels_like": "14", //体感温度，单位为c摄氏度或f华氏度</div><div class="line">      "pressure": "1018", //气压，单位为mb百帕或in英寸</div><div class="line">      "humidity": "76", //相对湿度，0~100，单位为百分比</div><div class="line">      "visibility": "16.09", //能见度，单位为km公里或mi英里</div><div class="line">      "wind_direction": "西北", //风向文字</div><div class="line">      "wind_direction_degree": "340", //风向角度，范围0~360，0为正北，90为正东，180为正南，270为正西</div><div class="line">      "wind_speed": "8.05", //风速，单位为km/h公里每小时或mph英里每小时</div><div class="line">      "wind_scale": "2", //风力等级，请参考：http://baike.baidu.com/view/465076.htm</div><div class="line">      "clouds": "90", //云量，范围0~100，天空被云覆盖的百分比 #目前不支持中国城市#</div><div class="line">      "dew_point": "-12" //露点温度，请参考：http://baike.baidu.com/view/118348.htm #目前不支持中国城市#</div><div class="line">  &#125;,</div><div class="line">  "last_update": "2015-09-25T22:45:00-07:00" //数据更新时间（该城市的本地时间）</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于这一段更为详细的描述请看它的<a href="http://www.thinkpage.cn/doc#now" target="_blank" rel="external">官方文档</a>，对每个参数和返回值都有解释。</p>
<p>这是一个需要注册或者付费的服务，也是我没有选择使用它来做例子的原因。</p>
<p>如果大家学习了本文很有兴趣，可以将查询天气信息的接口改成这里真实的服务地址，做成一个实用的应用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;获取网络数据&quot;&gt;&lt;a href=&quot;#获取网络数据&quot; class=&quot;headerlink&quot; title=&quot;获取网络数据&quot;&gt;&lt;/a&gt;获取网络数据&lt;/h1&gt;&lt;p&gt;之前对数据的解析都是建立在假数据之上的，当网络端的开发者把真实数据上线以后，我们就可以通过网络获取真实的数据
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>12 数据的异步更新</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/12_%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0/"/>
    <id>http://booktest.anddle.com/4_开发/12_数据的异步更新/</id>
    <published>2017-02-06T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面的异步更新"><a href="#界面的异步更新" class="headerlink" title="界面的异步更新"></a>界面的异步更新</h1><p>前面我们获取的数据是假数据，只要需要，马上就能得到。但是实际的情况下，我们将从网络获取数据。</p>
<p>从网络获取数据有很大的不确定性，主要体现在消耗的时间不确定。假如当时的网络情况非常很好，瞬间就能得到期望的数据，就像是使用在代码中写死的假数据一样；假如网络情况很糟糕，发起数据请求后几十秒钟才能获得结果。</p>
<p>由此可见，通过网络获取数据，花费的时间是说不清楚的。</p>
<p>安卓应用只有一个主线程－各个组件都是在这个线程中运行。作为组件的之一的Activity就是在这个线程中更新应用界面的，例如，用户点击界面上的一个按钮，按钮得到响应，整个过程就是在这个主线程里。所以这个主线程<strong>绝对不可以做耗时的操作</strong>。假如在按钮中做了耗时的操作，那么当它进行耗时操作的时候，你去点击界面上的其它按钮是不会有反应的，就好像程序冻在了那里。</p>
<p>比如说，我们看到的这个<code>onCreate()</code>函数，就是在主线程中执行的。如果在这个主线程中进行网络访问，等着在不确定的时间内收到结果，那么主线程在等待的过程中啥也不能做，整个程序就好像是僵死在那里。</p>
<p>我们的代码一旦连续占用这个线程超过一定的时间，系统甚至就会弹出“程序无响应的”提示，这个提示叫做<code>ANR</code>-Applicatin No Response。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/ANR.png" width="200" alt=" ANR"></div>

<p>所以每当需要进行与界面操作不相关的耗时操作时，比如访问网络获取数据，就需要开辟另一个线程-叫做工作线程。在工作线程中进行耗时工作，然后再将处理的结果告诉主线程，让主线程进行界面更新的工作。</p>
<p>这就好比你在正在做一件事情A，突然另一件事情B来打扰你，你不得不停下手头的工作来完成，做完了才能继续之前的工作；这时如果有另外一个人（另一个线程）来帮助你，把事情B全部包揽了，那你就不用分心了。当另一个人把事情B做完后，告诉你一声就可以了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/main_thread_and_work_thread.png" width="300" alt=" main_thread_and_work_thread"></div>

<p>因此，在从网络获取真实的数据之前，我们要首先解决在工作线程中如何异步刷新界面的问题。</p>
<h2 id="工作线程"><a href="#工作线程" class="headerlink" title="工作线程"></a>工作线程</h2><p>启动一个新的线程，分担耗时工作的方法是一种异步操作：我让你帮我做一件事情，布置任务后，我就去做其他的事情了，等你做完了再告诉我结果；</p>
<p>与它对应的是同步操作：我让你帮我做一件事情，布置任务后，我啥也不做，就等着你做完了告诉我结果；</p>
<p>获取网络信息是个异步操作，启动一个新线程－工作线程thread－查询网络数据，查询完成后，工作线程再将结果通知到主线程，让主线程将查询到结果的结果显示到界面上。界面的更新一定要在主线程中进行，不能在别的线程修改，否则系统后提示运行错误，这一点相当重要。因此我们一定要将查询的结果发送给主线程，让主线程处理界面的更新。</p>
<p>安卓系统提供的异步操作方案有：</p>
<ol>
<li><p>创建工作线程<code>thread</code>和<code>Handler</code>，利用Handler在工作线程和主线程之间传递数据；</p>
</li>
<li><p>使用<code>AsyncTask</code>帮助类，</p>
<p> 考虑到2个因素，</p>
<ol>
<li>耗时的工作要开辟一个工作线程，在其中进行工作；</li>
<li><p>耗时工作的结果要返回给主线程，由主线程更新界面；</p>
<p><code>Android SDK</code>提供了<code>AsyncTask</code>实现耗时操作的使用场景。</p>
</li>
</ol>
</li>
</ol>
<p>虽然将AsyncTask看成是一个单独的方案，但实际上它也是通过<code>方案1</code>实现的，只不过对于使用者来讲更加方便而已。</p>
<p>它们的本质都是创建一个<code>Thread</code>对象，然后让它运行起来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Thread thread = <span class="keyword">new</span> Thread();</div><div class="line">thread.start();</div></pre></td></tr></table></figure>
<p>这里我们选择<code>方案2</code>。因为，</p>
<ol>
<li>使用场景简单，只是单个任务的异步操作，没有多个线程之间的数据同步考虑；</li>
<li>使用方便，不用考虑太多的新线程创建的细节；</li>
</ol>
<h2 id="AsyncTask的用法"><a href="#AsyncTask的用法" class="headerlink" title="AsyncTask的用法"></a>AsyncTask的用法</h2><p>AsyncTask需要被继承成为一个新的子类来使用，在被继承时，要指定三种参数的类型－<code>Param</code> <code>Progress</code> <code>Result</code>，还需要实现<code>doInBackground(Param...)</code>函数，此外通常还要实现<code>onProgressUpdate(Progress...)</code> <code>onPostExecute(Result)</code> 两个回调函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span>  <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Param</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... progresses)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><code>doInBackground(Param... params)</code>函数：传入参数的<code>Param</code>类型就是<code>AsyncTask&lt;Param, Progress, Result&gt;</code>中指定的<code>Param</code>类型。它运行在新创建的工作线程当中。</p>
<p> 使用<code>MyTask</code>时，要在主线程中使用<code>excute()</code>方法传入不定长参数，让<code>Task</code>运行起来，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyTask task = <span class="keyword">new</span> MyTask();</div><div class="line">task.excute(param0, param1, ..., paramN);</div></pre></td></tr></table></figure>
<p> 不定长参数会以数组的形式传递到<code>doInBackground()</code>函数当中，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">    Param param0 = params[<span class="number">0</span>];</div><div class="line">    Param param1 = params[<span class="number">1</span>];</div><div class="line">    ......</div><div class="line">    Param paramN = params[N];</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>onProgressUpdate(Progress... progresses)</code>函数：传入参数的<code>Progress</code>类型就是<code>AsyncTask&lt;Param, Progress, Result&gt;</code>中指定的<code>Progress</code>类型。</p>
<p> 在<code>doInBackground()</code>中执行的是一个很耗时的工作，有时需要向主线程报告当前的运行状况，这就要使用到<code>publishProgress()</code>函数，<code>publishProgress()</code>也是使用的不定长参数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    publishProgress(progress1, progress2, ..., progressN)</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 不定长参数会以数组的形式传递到<code>onProgressUpdate()</code>函数当中，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... progresses)</span> </span>&#123;</div><div class="line">    Progress progress0 = progresses[<span class="number">0</span>];</div><div class="line">    Progress progress1 = progresses[<span class="number">1</span>];</div><div class="line">    ......</div><div class="line">    Progress progressN = progresses[N];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>onPostExecute(Result result)</code>函数：传入参数的<code>Result</code>类型就是<code>AsyncTask&lt;Param, Progress, Result&gt;</code>中指定的<code>Result</code>类型。</p>
<p> <code>doInBackground()</code>函数返回的类型也是<code>Result</code></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">    ......</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 返回的结果作为参数传递给<code>onPostExecute()</code>函数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>onCancel()</code>函数会在调用者取消<code>AsyncTask</code>的工作的时候被触发。</p>
<p> 要取消<code>AsyncTask</code>的工作，首先要在主线程中调用<code>cancel()</code>方法，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">task.cancel(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p> 因为在<code>doInBackground()</code>中执行的是一个很耗时的工作，需要时不时的检查自己是否被取消执行了，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">if</span>(isCancelled())</div><div class="line">    &#123;</div><div class="line">        ......</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    ......</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 最后，<code>onCancelled()</code>函数会被触发，这个函数会在主线程中被执行，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>综合上面的分析，自定义一个<code>AsyncTask</code>的方法如下，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Param</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Result <span class="title">doInBackground</span><span class="params">(Param... params)</span> </span>&#123;</div><div class="line">        Param param0 = params[<span class="number">0</span>];</div><div class="line">        Param param1 = params[<span class="number">1</span>];</div><div class="line">        ......</div><div class="line">        Param paramN = params[N];</div><div class="line">     </div><div class="line">        <span class="keyword">while</span>(!isCancelled())</div><div class="line">        &#123;</div><div class="line">            ......</div><div class="line">            publishProgress(progress1, progress2, ..., progressN);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... progresses)</span> </span>&#123;</div><div class="line">        Progress progress0 = progresses[<span class="number">0</span>];</div><div class="line">        Progress progress1 = progresses[<span class="number">1</span>];</div><div class="line">        ......</div><div class="line">        Progress progressN = progresses[N];</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用一个<code>AsyncTask</code>的方法如下，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyTask task = <span class="keyword">new</span> MyTask();</div><div class="line">task.excute(param0, param1, ..., paramN);</div><div class="line">......    </div><div class="line">task.cancel(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<h2 id="AsyncTask中解析天气数据"><a href="#AsyncTask中解析天气数据" class="headerlink" title="AsyncTask中解析天气数据"></a>AsyncTask中解析天气数据</h2><p>根据我们的需要，自己定义个<code>AsyncTask</code>－<code>UpdateTask</code>，</p>
<ol>
<li>不需要为新创建的线程传入参数；所以<code>Param</code>设置成<code>Object</code>；</li>
<li>获取网络数据以及解析数据的是一个耗时不确定的过程。为了减小我们开发的难度，可以假设在完成整个过程之前，不需要通知主线程当前查询的状态；所以<code>Progress</code>设置成<code>Void</code>；</li>
<li><p>解析出来的结果有3类，天气详情信息，天气预报信息和天气更多信息。 但是<code>AsyncTask</code>发送给主线程的内容只能包含在一个<code>Result</code>参数当中。</p>
<p> 为此可以有两种办法，</p>
<ol>
<li>在定义一个结构体，把这3类数据放里面，让它们整体作为一个<code>Result</code>；</li>
<li><p>把这3类数据作为<code>UpdateTask</code>的成员变量直接使用，作为结果的保存对象；</p>
<p>同样为了简化问题，我决定使用第2个方法。因此<code>Result</code>设置成<code>Void</code>；再分别设置3类数据的成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mLocation;</div><div class="line">    <span class="keyword">private</span> String mTemperature;</div><div class="line">    <span class="keyword">private</span> String mTemperatureRange;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWeatherCode;</div><div class="line">    <span class="keyword">private</span> List&lt;ForcastInfo&gt; mForcastList;</div><div class="line">    <span class="keyword">private</span> List&lt;WeatherMoreInfo&gt; mWeatherMoreInfoList;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">    </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>将获取网络数据和解析数据的工作放到<code>doInBackground()</code>中进行，这是在一个新创建的工作线程中执行的；并且将解析的结果保存到<code>UpdateTask</code>的成员变量当中，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"start to parse JSON content"</span>);</div><div class="line">        </div><div class="line">        JSONObject weatherResult = <span class="keyword">new</span> JSONObject(FAKE_DATA);</div><div class="line">        <span class="keyword">int</span> errorCode = weatherResult.getInt(<span class="string">"error_code"</span>);</div><div class="line">        Log.d(<span class="string">"TEST"</span>, <span class="string">"error_code = "</span> + errorCode);</div><div class="line">        <span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">            JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">            mLocation = data.getString(<span class="string">"location"</span>);</div><div class="line">            mTemperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">            mTemperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">            mWeatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line">            </div><div class="line">            Log.d(<span class="string">"TEST"</span>,<span class="string">"weather detail info:"</span>+</div><div class="line">                    <span class="string">" location = "</span> + mLocation +</div><div class="line">                    <span class="string">" temperature = "</span> + mTemperature +</div><div class="line">                    <span class="string">" temperatureRange = "</span> + mTemperatureRange +</div><div class="line">                    <span class="string">" weatherCode = "</span> + mWeatherCode);</div><div class="line">            </div><div class="line">            JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">            mForcastList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">                JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">                String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">                String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">                <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line">            </div><div class="line">                Log.d(<span class="string">"TEST"</span>,<span class="string">"weather forcast info:"</span>+</div><div class="line">                        <span class="string">" date = "</span> + date +</div><div class="line">                        <span class="string">" forcastTemperatureRange = "</span> + forcastTemperatureRange +</div><div class="line">                        <span class="string">" forcastWeatherCode = "</span> + forcastWeatherCode);</div><div class="line">            </div><div class="line">                ForcastInfo forcastInfo = <span class="keyword">new</span> ForcastInfo(date, forcastTemperatureRange, forcastWeatherCode);</div><div class="line">                mForcastList.add(forcastInfo);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">            String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">            String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">            String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">            String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">            String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line">            </div><div class="line">            Log.d(<span class="string">"TEST"</span>,<span class="string">"more weather info:"</span>+</div><div class="line">                    <span class="string">" windDirection = "</span> + windDirection +</div><div class="line">                    <span class="string">" windLevel = "</span> + windLevel +</div><div class="line">                    <span class="string">" humidityLevel = "</span> + humidityLevel +</div><div class="line">                    <span class="string">" airQuality = "</span> + airQuality +</div><div class="line">                    <span class="string">" sportLevel = "</span> + sportLevel +</div><div class="line">                    <span class="string">" ultravioletRay = "</span> + ultravioletRay );</div><div class="line">            </div><div class="line">            mWeatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            WeatherMoreInfo info1 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_direction"</span>, windDirection);</div><div class="line">            WeatherMoreInfo info2 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_level"</span>, windLevel);</div><div class="line">            WeatherMoreInfo info3 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"humidity_level"</span>, humidityLevel);</div><div class="line">            WeatherMoreInfo info4 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"air_quality"</span>, airQuality);</div><div class="line">            WeatherMoreInfo info5 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"sport_level"</span>, sportLevel);</div><div class="line">            WeatherMoreInfo info6 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"ultraviolet_ray"</span>, ultravioletRay);</div><div class="line">            mWeatherMoreInfoList.add(info1);</div><div class="line">            mWeatherMoreInfoList.add(info2);</div><div class="line">            mWeatherMoreInfoList.add(info3);</div><div class="line">            mWeatherMoreInfoList.add(info4);</div><div class="line">            mWeatherMoreInfoList.add(info5);</div><div class="line">            mWeatherMoreInfoList.add(info6);</div><div class="line">            </div><div class="line">            Log.d(<span class="string">"TEST"</span>,<span class="string">"finish to parse JSON content"</span>);</div><div class="line">             </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"fail to parse JSON content"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将解析完成，刷新界面的工作放到<code>onPostExecute()</code>中进行，这是运行在主线程上的，所以可以用来更新界面，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line"></div><div class="line">    updateWeatherDetail(mLocation, mTemperature, mTemperatureRange, mWeatherCode);</div><div class="line">    updateWeatherForcast(mForcastList);</div><div class="line">    updateWeatherMoreInfo(mWeatherMoreInfoList);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="AsyncTask的使用"><a href="#AsyncTask的使用" class="headerlink" title="AsyncTask的使用"></a>AsyncTask的使用</h2><p>在<code>天气应用</code>的<code>MainActivity</code>创建的时候，我们就启动<code>UpdateTask</code>，开始更新界面的工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> AsyncTask mUpdateTask;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    ......</div><div class="line">    </div><div class="line">    mUpdateTask = <span class="keyword">new</span> UpdateTask();</div><div class="line">    mUpdateTask.execute();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>MainActivity</code>退出的时候，判断<code>mUpdateTask</code>是否还在运行，如果还在运行，就让它停止，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((mUpdateTask != <span class="keyword">null</span>) &amp;&amp; (mUpdateTask.getStatus() == AsyncTask.Status.RUNNING)) &#123;</div><div class="line">        mUpdateTask.cancel(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mUpdateTask = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>onCreate()</code>与<code>onDestroy()</code>是Activity生命周期的一部分，当一个<code>Activity</code>被创建的时候会调用到<code>onCreate()</code>，当Activity被退出销毁的时候会调用到<code>onDestroy()</code>。所以在这两个地方使用<code>UpdateTask</code>是一个合适的选择。</p>
<h2 id="验证主线程与工作线程"><a href="#验证主线程与工作线程" class="headerlink" title="验证主线程与工作线程"></a>验证主线程与工作线程</h2><p>代码写完了，我们来验证一下<code>AsyncTask</code>是否如我之前介绍的那样，将不同的工作自动的放到了主线程与工作线程之中进行。</p>
<p>系统运行时，会未每一个程序分配一个<code>进程ID-PID</code>，每个进程可以有多个线程，而每个线程又会根据线程的数量给它们分配对于的<code>线程ID-TID</code>。</p>
<p><code>Android SDK</code>提供了一个叫做<code>Thread.currentThread()</code>的函数，能获取执行当前函数所用线程<code>TID</code>值。</p>
<p>使用<code>Log.d()</code>将这两个信息打印出来看看，</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line"></div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask doInBackground - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line">     </div><div class="line">        ......   </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line"></div><div class="line">        Log.d(<span class="string">"TEST"</span>,<span class="string">"UpdateTask onPostExecute - ThreadId = "</span> + Thread.currentThread().getId());</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>从<code>log</code>中可以看到，工作线程的<code>线程id</code>是<code>1008</code>；而主线程的<code>线程id</code>是<code>1</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/asynctask_threadid.png" width="600" alt=" asynctask_threadid"></div>

<p>这和我们之前的介绍一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面的异步更新&quot;&gt;&lt;a href=&quot;#界面的异步更新&quot; class=&quot;headerlink&quot; title=&quot;界面的异步更新&quot;&gt;&lt;/a&gt;界面的异步更新&lt;/h1&gt;&lt;p&gt;前面我们获取的数据是假数据，只要需要，马上就能得到。但是实际的情况下，我们将从网络获取数据。&lt;/p&gt;
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>11 界面的更新</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/11_%E7%95%8C%E9%9D%A2%E7%9A%84%E6%9B%B4%E6%96%B0/"/>
    <id>http://booktest.anddle.com/4_开发/11_界面的更新/</id>
    <published>2017-02-05T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面的更新"><a href="#界面的更新" class="headerlink" title="界面的更新"></a>界面的更新</h1><p>解析出天气预报的各种数据之后，就需要将它们反映到界面上了。</p>
<p>更新的原理很简单，通过<code>findViewById()</code>获取要更新的各种控件，然后将要更新的数据设置给这些控件就可以了。<br>例如，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取控件</span></div><div class="line">TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line"></div><div class="line"><span class="comment">//使用控件</span></div><div class="line">currentTemperatureView.setText(temperature);</div></pre></td></tr></table></figure>
<h2 id="天气详情界面"><a href="#天气详情界面" class="headerlink" title="天气详情界面"></a>天气详情界面</h2><ol>
<li><p>添加一个更新天气详情界面的函数，把这个界面更新的操作放在一起，便于维护；<br> 传人位置、温度、温度范围、天气状态等几个更新界面需要用到的信息，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过<code>findViewById()</code>找到需要更新的控件-天气图标、当前温度、温度范围，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">    TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line">    TextView temperatureRangeView = (TextView) findViewById(R.id.temperature_range);</div><div class="line">    ImageView weatherIcon = (ImageView) findViewById(R.id.weather_icon);</div><div class="line">    TextView weatherLocation = (TextView) findViewById(R.id.weather_location);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将当前温度、温度范围和位置设置到界面上，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">   TextView currentTemperatureView = (TextView) findViewById(R.id.current_temperature);</div><div class="line">   TextView temperatureRangeView = (TextView) findViewById(R.id.temperature_range);</div><div class="line">   ImageView weatherIcon = (ImageView) findViewById(R.id.weather_icon);</div><div class="line">   TextView weatherLocation = (TextView) findViewById(R.id.weather_location);</div><div class="line">   </div><div class="line">   currentTemperatureView.setText(temperature);</div><div class="line">   temperatureRangeView.setText(temperatureRange);</div><div class="line">   weatherLocation.setText(location);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里<code>TextView</code>的<code>setText()</code>方法，就是设置控件显示内容的，它与<code>xml</code>布局文件中的<code>android:text</code>属性的功能一样。</p>
</li>
<li><p>根据<code>协议</code>约定的含义，将<code>weather code</code>代码转换成对应的图标，并设置给界面，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherDetail</span><span class="params">(String location, String temperature, String temperatureRange, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">int</span> iconId = R.mipmap.ic_sunny_cloudy_l;</div><div class="line">    <span class="keyword">switch</span> (weatherCode) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            iconId = R.mipmap.ic_sunny_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            iconId = R.mipmap.ic_rainy_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            iconId = R.mipmap.ic_cloudy_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            iconId = R.mipmap.ic_fog_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            iconId = R.mipmap.ic_snow_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">            iconId = R.mipmap.ic_sunny_cloudy_l;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    weatherIcon.setImageResource(iconId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里<code>ImageView</code>的<code>setImageResource()</code>方法，就是设置控件显示图片的，它与<code>xml</code>布局文件中的<code>android:src</code>属性的功能一样。</p>
</li>
<li><p>当解析出<code>JSON</code>数据以后，就可以使用<code>updateWeatherDetail()</code>来更新界面，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">    String location = data.getString(<span class="string">"location"</span>);</div><div class="line">    String temperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">    String temperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">    <span class="keyword">int</span> weatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line">    </div><div class="line">    </div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="comment">//更新数据</span></div><div class="line">    updateWeatherDetail(location, temperature, temperatureRange, weatherCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_update_detail.png" width="250" alt=" weather_app_update_detail"></div>

<h2 id="天气预报界面"><a href="#天气预报界面" class="headerlink" title="天气预报界面"></a>天气预报界面</h2><p>每个天气预报由3个信息组成：日期、温度范围、天气状态。其中天气状态决定了需要显示的图标。</p>
<ol>
<li><p>新建一个<code>java源文件</code>-<code>ForcastInfo.java</code>，创建一个新类-<code>ForcastInfo</code>，使用3个变量保存天气预报项中的数据。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String date;</div><div class="line">    <span class="keyword">public</span> String temperatureRage;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> iconResId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 用<code>iconResId</code>保存天气状态对应的图标资源<code>id</code>。</p>
</li>
<li><p>因为<code>iconResId</code>保存的是天气状态对应的图标资源<code>id</code>，所以给<code>iconResId</code>赋值的时候得转化一番，因此我想到了给<code>ForcastInfo</code>设计一个构造函数，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForcastInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForcastInfo</span><span class="params">(String date, String temperatureRage, <span class="keyword">int</span> weatherCode)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.date = date;</div><div class="line">        <span class="keyword">this</span>.temperatureRage = temperatureRage;</div><div class="line">        </div><div class="line">        <span class="keyword">this</span>.iconResId = R.mipmap.ic_sunny_cloudy_s;</div><div class="line">        <span class="keyword">switch</span> (weatherCode) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId = R.mipmap.ic_sunny_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_rainy_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_cloudy_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_fog_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_snow_s;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">                <span class="keyword">this</span>.iconResId =  R.mipmap.ic_sunny_cloudy_s;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 构造函数中，将3个数据转换成了显示使用的数据。</p>
<p> <em>注意：这里的代码留有一个bug-<code>switch case</code>缺少了<code>break</code>，为的是给将来的测试做一个铺垫。</em></p>
</li>
<li><p>添加一个更新天气预报区域的函数，把界面更新的操作放在一起，便于维护；<br>传人<code>ForcastInfo</code>的列表，作为更新界面需要用到的信息， </p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherForcast</span><span class="params">(List&lt;ForcastInfo&gt; list)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>需要获取<code>天气预报区域</code>中，5个完全一样的布局，逐个更新这5个一样的布局，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherForcast</span><span class="params">(List&lt;ForcastInfo&gt; list)</span> </span>&#123;</div><div class="line">        </div><div class="line">        LinearLayout forcastItem1 = (LinearLayout) findViewById(R.id.forcast_item1);</div><div class="line">        LinearLayout forcastItem2 = (LinearLayout) findViewById(R.id.forcast_item2);</div><div class="line">        LinearLayout forcastItem3 = (LinearLayout) findViewById(R.id.forcast_item3);</div><div class="line">        LinearLayout forcastItem4 = (LinearLayout) findViewById(R.id.forcast_item4);</div><div class="line">        LinearLayout forcastItem5 = (LinearLayout) findViewById(R.id.forcast_item5);</div><div class="line">        </div><div class="line">        updateWeatherForcastItem(forcastItem1, list.get(<span class="number">0</span>));</div><div class="line">        updateWeatherForcastItem(forcastItem2, list.get(<span class="number">1</span>));</div><div class="line">        updateWeatherForcastItem(forcastItem3, list.get(<span class="number">2</span>));</div><div class="line">        updateWeatherForcastItem(forcastItem4, list.get(<span class="number">3</span>));</div><div class="line">        updateWeatherForcastItem(forcastItem5, list.get(<span class="number">4</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherForcastItem</span><span class="params">(LinearLayout layout, ForcastInfo info)</span> </span>&#123;</div><div class="line"></div><div class="line">        TextView date = (TextView) layout.findViewById(R.id.forcast_date);</div><div class="line">        ImageView icon = (ImageView) layout.findViewById(R.id.forcast_icon);</div><div class="line">        TextView temperatureRage = (TextView) layout.findViewById(R.id.forcast_temperature);</div><div class="line"></div><div class="line">        date.setText(info.date);</div><div class="line">        icon.setImageResource(info.iconResId);</div><div class="line">        temperatureRage.setText(info.temperatureRage);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里看似代码有很多雷同的地方，其实是可以通过循环来实现的（获取<code>天气预报区域</code>，然后遍历它的所有子布局）。不过这里只是为了介绍更新的方法，就不去那样写了。</p>
</li>
<li><p>当解析出<code>JSON</code>数据以后，将它封装成<code>ForcastInfo</code>对象，然后就可以使用<code>updateWeatherForcast()</code>来更新界面了，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    ......</div><div class="line">    JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//创建列表，准备保存数据</span></div><div class="line">    List&lt;ForcastInfo&gt; forcastInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">       JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">       String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">       String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">       <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line">       </div><div class="line">       ......</div><div class="line">       </div><div class="line">       ForcastInfo forcastInfo = <span class="keyword">new</span> ForcastInfo(date, forcastTemperatureRange, forcastWeatherCode);</div><div class="line">       forcastInfoList.add(forcastInfo);</div><div class="line">    &#125;        </div><div class="line">    </div><div class="line">    <span class="comment">//更新数据</span></div><div class="line">    updateWeatherForcast(forcastInfoList);</div><div class="line">    </div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_update_forcast.png" width="250" alt=" weather_app_update_forcast"></div>

<h2 id="更多天气信息界面"><a href="#更多天气信息界面" class="headerlink" title="更多天气信息界面"></a>更多天气信息界面</h2><p>每条更多信息都由3个信息组成：图标、描述、取值。其中<code>描述</code>与<code>图标</code>是一一对应的关系，它们都是根据<code>JSON</code>字段的名称来确定的，</p>
<table>
<thead>
<tr>
<th>JSON字段名称</th>
<th>描述</th>
<th>图片id</th>
</tr>
</thead>
<tbody>
<tr>
<td>wind_direction</td>
<td>风向</td>
<td>R.mipmap.ic_wind_direction</td>
</tr>
<tr>
<td>wind_level</td>
<td>风力</td>
<td>R.mipmap.ic_wind_level</td>
</tr>
<tr>
<td>humidity_level</td>
<td>湿度</td>
<td>R.mipmap.ic_humidity_level</td>
</tr>
<tr>
<td>air_quality</td>
<td>空气质量</td>
<td>R.mipmap.ic_air_quality</td>
</tr>
<tr>
<td>sport_level</td>
<td>运动</td>
<td>R.mipmap.ic_sport_level</td>
</tr>
<tr>
<td>ultraviolet_ray</td>
<td>紫外线</td>
<td>R.mipmap.ic_ultraviolet_level</td>
</tr>
</tbody>
</table>
<ol>
<li><p>改造原有的<code>WeatherMoreInfo</code>类，让它也拥有一个<code>构造函数</code>，可以自动的根据<code>JSON</code>字段名称翻译描述文字和对应的图片，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfo</span> </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfo</span><span class="params">(String keyword, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (keyword) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"wind_direction"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_wind_direction;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"风向"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"wind_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_wind_level;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"风力"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"humidity_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_humidity_level;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"湿度"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"air_quality"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_air_quality;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"空气质量"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"sport_level"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_sport_level;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"运动"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> <span class="string">"ultraviolet_ray"</span>:</div><div class="line">                <span class="keyword">this</span>.typeResId = R.mipmap.ic_ultraviolet_level;</div><div class="line">                <span class="keyword">this</span>.description = <span class="string">"紫外线"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加更新更多天气信息列表的函数<code>updateWeatherMoreInfo()</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateWeatherMoreInfo</span><span class="params">(List&lt;WeatherMoreInfo&gt; list)</span> </span>&#123;</div><div class="line"></div><div class="line">    mWeatherMoreInfoList.clear();</div><div class="line">    mWeatherMoreInfoList.addAll(list);</div><div class="line"></div><div class="line">    WeatherMoreInfoAdapter adapter = (WeatherMoreInfoAdapter) mWeatherMoreInfoListView.getAdapter();</div><div class="line">    adapter.notifyDataSetChanged();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里面对<code>Adapter</code>中数据的修改要在主线程中进行，修改完成后，使用<code>notifyDataSetChanged()</code>刷新界面。</p>
</li>
<li><p>当解析出<code>JSON</code>数据以后，将它封装成<code>WeatherMoreInfo</code>对象，然后就可以使用<code>updateWeatherMoreInfo()</code>来更新界面了，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    ......</div><div class="line">    String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">    String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">    String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">    String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">    String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">    String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line">   </div><div class="line">    <span class="comment">//创建一个列表存储更多天气信息的数据        </span></div><div class="line">    List&lt;WeatherMoreInfo&gt; weatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    WeatherMoreInfo info1 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_direction"</span>, windDirection);</div><div class="line">    WeatherMoreInfo info2 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"wind_level"</span>, windLevel);</div><div class="line">    WeatherMoreInfo info3 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"humidity_level"</span>, humidityLevel);</div><div class="line">    WeatherMoreInfo info4 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"air_quality"</span>, airQuality);</div><div class="line">    WeatherMoreInfo info5 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"sport_level"</span>, sportLevel);</div><div class="line">    WeatherMoreInfo info6 = <span class="keyword">new</span> WeatherMoreInfo(<span class="string">"ultraviolet_ray"</span>, ultravioletRay);</div><div class="line">    weatherMoreInfoList.add(info1);</div><div class="line">    weatherMoreInfoList.add(info2);</div><div class="line">    weatherMoreInfoList.add(info3);</div><div class="line">    weatherMoreInfoList.add(info4);</div><div class="line">    weatherMoreInfoList.add(info5);</div><div class="line">    weatherMoreInfoList.add(info6);</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="comment">//更新数据</span></div><div class="line">    updateWeatherMoreInfo(weatherMoreInfoList);</div><div class="line">  </div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_more_info_list_complete.png" width="250" alt=" weather_more_info_list_complete"></div>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>有编码基础的高手们在看完前面的代码之后，一定发现了不少代码潜在的问题：我没有去考虑数据解析失败、联网失败的情况。一旦发生这样的情况，程序就会崩溃。</p>
<p>是的，你看的很仔细，很善于思考。这些缺陷我是故意留下的。这些缺陷用专业的叫法就是<code>bug</code>。我留下了这些伏笔，准备再后面的<code>测试</code>章节单独来进行处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面的更新&quot;&gt;&lt;a href=&quot;#界面的更新&quot; class=&quot;headerlink&quot; title=&quot;界面的更新&quot;&gt;&lt;/a&gt;界面的更新&lt;/h1&gt;&lt;p&gt;解析出天气预报的各种数据之后，就需要将它们反映到界面上了。&lt;/p&gt;
&lt;p&gt;更新的原理很简单，通过&lt;code&gt;find
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>10 解析天气预报数据</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/10_%E8%A7%A3%E6%9E%90%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E6%95%B0%E6%8D%AE/"/>
    <id>http://booktest.anddle.com/4_开发/10_解析天气预报数据/</id>
    <published>2017-02-04T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解析天气预报数据"><a href="#解析天气预报数据" class="headerlink" title="解析天气预报数据"></a>解析天气预报数据</h1><p>界面布局完成以后，就需要设计代码来控制界面上各个元素的逻辑了。</p>
<ol>
<li>从网络获取天气预报数据；</li>
<li>解析获取的数据；</li>
<li>根据解析的结果更新<code>天气预报</code>界面；</li>
</ol>
<p>天气预报数据依赖于网络端的服务器，不是我们应用开发者自己能决定的。假如应用和网络服务器是两拨人同时在开发，极有可能出现应用端需要获取数据的时候，服务器端还没有准备好数据的情况。</p>
<p>这种情况怎么办呢？</p>
<p>我们应用开发者可以自己<code>构造</code>一个假数据，模拟已经获取到真实数据的情形。当然，这样的假数据从格式到内容要尽量和网络端提供的真实数据一致。两者越是相同，后面使用真实数据时所作的修改就越是容易。</p>
<p>所以在实际的开发项目中，应用开发者和网络端开发者会拟定一个<code>数据协议</code>，应用开发者看这个<code>协议</code>就知道假数据如何构造了，而不用总是打断网络端开发者的工作。网络端开发者的开发也会严格按照这个<code>协议</code>来执行，不然将来的配合就是鸡同鸭讲。</p>
<p>这里我们先假设已经获取道了网络上的天气预报数据，看看如何来解析数据，并更新<code>天气预报界面</code>。</p>
<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>现在应用端（客户端）与网络端（服务器端）之间的数据交换，通常会使用两种格式的文本内容：<code>XML</code>与<code>JSON</code>。</p>
<p>比如通过网络获取一个班级学生的信息（假设包含学生的姓名、年龄、性别等3个内容）。</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>年龄</th>
<th>性别</th>
</tr>
</thead>
<tbody>
<tr>
<td>赵一</td>
<td>15</td>
<td>男</td>
</tr>
<tr>
<td>钱二</td>
<td>14</td>
<td>女</td>
</tr>
<tr>
<td>孙三</td>
<td>16</td>
<td>女</td>
</tr>
<tr>
<td>李四</td>
<td>12</td>
<td>男</td>
</tr>
</tbody>
</table>
<ul>
<li><p>使用<code>XML</code>来传递信息，可能的内容就是：</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>赵一<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>15<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>钱二<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>14<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>孙三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>16<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>12<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">student</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  每个节点<code>&lt;&gt;</code>代表一个数据。</p>
</li>
<li><p>使用<code>JSON</code>来传递信息，可能的内容就是：</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"students"</span>:</div><div class="line">	[</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>:<span class="string">"赵一"</span>, </div><div class="line">			<span class="attr">"age"</span>:<span class="string">"15"</span>, </div><div class="line">			<span class="attr">"sex"</span>:<span class="string">"男"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>:<span class="string">"钱二"</span>, </div><div class="line">			<span class="attr">"age"</span>:<span class="string">"14"</span>, </div><div class="line">			<span class="attr">"sex"</span>:<span class="string">"女"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>:<span class="string">"孙三"</span>, </div><div class="line">			<span class="attr">"age"</span>:<span class="string">"16"</span>, </div><div class="line">			<span class="attr">"sex"</span>:<span class="string">"女"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>:<span class="string">"李四"</span>, </div><div class="line">			<span class="attr">"age"</span>:<span class="string">"12"</span>, </div><div class="line">			<span class="attr">"sex"</span>:<span class="string">"男"</span></div><div class="line">		&#125;</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>XML</code>与<code>JSON</code>相比，<code>JSON</code>格式的数据占用的空间更小，表达方式更简洁一些。所以<code>JSON</code>似乎更受开发者的欢迎。</p>
<p>我们这里采用的就是<code>JSON</code>格式的数据。</p>
<h3 id="JSON初步"><a href="#JSON初步" class="headerlink" title="JSON初步"></a>JSON初步</h3><p><code>JSON</code>格式的理解也很简单。</p>
<ul>
<li><p>数据由<code>名称</code>和<code>取值</code>构成，例如<code>&quot;name&quot;:&quot;李四&quot;</code>，</p>
<ol>
<li>它们由<code>:</code>分隔开，并且用<code>&quot;</code>括了起来（对于数值型的取值可以不用引号扩起来，但为了简化大家记忆的规则，都还是扩起来吧）；</li>
<li><p><code>:</code>后面可以跟<code>[]</code>，也可以跟<code>{}</code>；不同的括号，代表数据的不同类型；</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"name":"李四"</div><div class="line">"age":"12"</div><div class="line">"sex":"男"</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>使用<code>{}</code>，表现的是同一个事物的不同项，</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"李四"</span></div><div class="line">    <span class="string">"age"</span>:<span class="string">"12"</span></div><div class="line">    <span class="string">"sex"</span>:<span class="string">"男"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用<code>[]</code>，表现的是同一类事物，内部会有多个平级的数据项；</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">"data":</div><div class="line">	[</div><div class="line">		&#123;</div><div class="line">			"item":"1", </div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			"item":"2", </div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			"item":"3", </div><div class="line">		&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="天气数据"><a href="#天气数据" class="headerlink" title="天气数据"></a>天气数据</h3><p>根据之前的功能规划，我们确定了网络数据的格式，拿出一个实实在在的例子感受一下吧：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"error_code"</span>: <span class="string">"0"</span>,</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"location"</span>: <span class="string">"成都"</span>,</div><div class="line">        <span class="attr">"temperature"</span>: <span class="string">"23°"</span>,</div><div class="line">        <span class="attr">"temperature_range"</span>: <span class="string">"18℃~23℃"</span>,</div><div class="line">        <span class="attr">"weather_code"</span>: <span class="string">"5"</span>,</div><div class="line">        <span class="attr">"wind_direction"</span>: <span class="string">"东南"</span>,</div><div class="line">        <span class="attr">"wind_level"</span>: <span class="string">"1级"</span>,</div><div class="line">        <span class="attr">"humidity_level"</span>: <span class="string">"30%"</span>,</div><div class="line">        <span class="attr">"air_quality"</span>: <span class="string">"良"</span>,</div><div class="line">        <span class="attr">"sport_level"</span>: <span class="string">"适宜"</span>,</div><div class="line">        <span class="attr">"ultraviolet_ray"</span>: <span class="string">"弱"</span>,</div><div class="line">        <span class="attr">"forcast"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"明天"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"18℃~23℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"0"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"星期六"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"17℃~21℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"1"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"星期日"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"19℃~24℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"3"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"星期一"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"16℃~22℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"4"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"date"</span>: <span class="string">"星期二"</span>,</div><div class="line">                <span class="attr">"temperature_range"</span>: <span class="string">"20℃~26℃"</span>,</div><div class="line">                <span class="attr">"weather_code"</span>: <span class="string">"2"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到整个数据分成了两个大的部分，</p>
<ul>
<li><p><code>error_code</code>：网络端服务器返回的错误代码，假如服务器发现自身有问题，可以通过这个字段的数值告诉客户端。客户端收到返回值以后，首先要检查这个字段是否为<code>0</code>。对于<code>非0</code>值，我们就要警惕了，说明<code>data</code>字段的取值也许就是无效的了。</p>
<p>  不过你也要记住，这个返回的<code>JSON</code>内容，都是应用开发者和网络开发者协商好的，你们也可以不设计<code>error_code</code>这个字段。但是目前大家已经形成了一个不成文的规定，都将这个字段作为<code>JSON</code>数据的标配。</p>
</li>
<li><p><code>data</code>：携带我们真正关心的实际数据，所有天气相关的数据都放在这个字段当中。</p>
</li>
</ul>
<p>接下来的分析，我们将集中于<code>data</code>字段。</p>
<h4 id="天气详情数据"><a href="#天气详情数据" class="headerlink" title="天气详情数据"></a>天气详情数据</h4><p>天气详情数据需要使用到如下内容，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"location": "成都",</div><div class="line">"temperature": "23°",</div><div class="line">"temperature_range": "18℃~23℃",</div><div class="line">"weather_code": "5",</div></pre></td></tr></table></figure>
<p>大部分数据的取值就是我们要显示到界面上的内容，这很简单。例如，</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>取值</th>
<th>显示</th>
</tr>
</thead>
<tbody>
<tr>
<td>location</td>
<td>成都</td>
<td>成都</td>
</tr>
<tr>
<td>temperature</td>
<td>23°</td>
<td>23°</td>
</tr>
<tr>
<td>temperature_range</td>
<td>18℃~23℃</td>
<td>18℃~23℃</td>
</tr>
</tbody>
</table>
<p><code>weather_code</code>字段，取值是数值，不同的数值，代表了不同的天气状态，</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>天气状态</th>
<th>应用显示对应的图标</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>晴</td>
<td>R.mipmap.ic_sunny_l</td>
</tr>
<tr>
<td>1</td>
<td>雨</td>
<td>R.mipmap.ic_rainy_l</td>
</tr>
<tr>
<td>2</td>
<td>多云</td>
<td>R.mipmap.ic_cloudy_l</td>
</tr>
<tr>
<td>3</td>
<td>雾</td>
<td>R.mipmap.ic_fog_l</td>
</tr>
<tr>
<td>4</td>
<td>雪</td>
<td>R.mipmap.ic_snow_l</td>
</tr>
<tr>
<td>5</td>
<td>晴间多云</td>
<td>R.mipmap.ic_sunny_cloudy_l</td>
</tr>
</tbody>
</table>
<h4 id="天气预报数据"><a href="#天气预报数据" class="headerlink" title="天气预报数据"></a>天气预报数据</h4><p>天气预报数据包含5个子项，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">"forcast": [</div><div class="line">      &#123;</div><div class="line">          "date": "明天",</div><div class="line">          "temperature_range": "18℃~23℃",</div><div class="line">          "weather_code": "0"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          "date": "星期六",</div><div class="line">          "temperature_range": "17℃~21℃",</div><div class="line">          "weather_code": "1"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          "date": "星期日",</div><div class="line">          "temperature_range": "19℃~24℃",</div><div class="line">          "weather_code": "3"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          "date": "星期一",</div><div class="line">          "temperature_range": "16℃~22℃",</div><div class="line">          "weather_code": "4"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">          "date": "星期二",</div><div class="line">          "temperature_range": "20℃~26℃",</div><div class="line">          "weather_code": "2"</div><div class="line">      &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>大部分数据的取值就是我们要显示到界面上的内容，这很简单。例如，</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>取值</th>
<th>显示</th>
</tr>
</thead>
<tbody>
<tr>
<td>date</td>
<td>星期一</td>
<td>星期一</td>
</tr>
<tr>
<td>temperature_range</td>
<td>16℃~22℃</td>
<td>16℃~22℃</td>
</tr>
</tbody>
</table>
<p><code>weather_code</code>字段，取值是数值，不同的数值，代表了不同的天气状态，对它的理解与天气预报数据中的<code>weather_code</code>一样，只是图标变小了，</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>天气状态</th>
<th>应用显示对应的图标</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>晴</td>
<td>R.mipmap.ic_sunny_s</td>
</tr>
<tr>
<td>1</td>
<td>雨</td>
<td>R.mipmap.ic_rainy_s</td>
</tr>
<tr>
<td>2</td>
<td>多云</td>
<td>R.mipmap.ic_cloudy_s</td>
</tr>
<tr>
<td>3</td>
<td>雾</td>
<td>R.mipmap.ic_fog_s</td>
</tr>
<tr>
<td>4</td>
<td>雪</td>
<td>R.mipmap.ic_snow_s</td>
</tr>
<tr>
<td>5</td>
<td>晴间多云</td>
<td>R.mipmap.ic_sunny_cloudy_s</td>
</tr>
</tbody>
</table>
<h4 id="更多天气信息"><a href="#更多天气信息" class="headerlink" title="更多天气信息"></a>更多天气信息</h4><p>更多天气信息需要使用到如下内容，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"wind_direction": "东南",</div><div class="line">"wind_level": "1级",</div><div class="line">"humidity_level": "30%",</div><div class="line">"air_quality": "良",</div><div class="line">"sport_level": "适宜",</div><div class="line">"ultraviolet_ray": "弱"</div></pre></td></tr></table></figure>
<p>大部分数据的取值就是我们要显示到界面上的内容，这很简单。例如，</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>取值</th>
<th>显示</th>
<th>使用的图标</th>
</tr>
</thead>
<tbody>
<tr>
<td>wind_direction</td>
<td>东南</td>
<td>东南</td>
<td>R.mipmap.ic_wind_direction</td>
</tr>
<tr>
<td>wind_level</td>
<td>1级</td>
<td>1级</td>
<td>R.mipmap.ic_wind_level</td>
</tr>
<tr>
<td>humidity_level</td>
<td>30%</td>
<td>30%</td>
<td>R.mipmap.ic_humidity_level</td>
</tr>
<tr>
<td>air_quality</td>
<td>良</td>
<td>良</td>
<td>R.mipmap.ic_air_quality</td>
</tr>
<tr>
<td>sport_level</td>
<td>适宜</td>
<td>适宜</td>
<td>R.mipmap.ic_sport_level</td>
</tr>
<tr>
<td>ultraviolet_ray</td>
<td>弱</td>
<td>弱</td>
<td>R.mipmap.ic_ultraviolet_level</td>
</tr>
</tbody>
</table>
<h2 id="解析JSON数据"><a href="#解析JSON数据" class="headerlink" title="解析JSON数据"></a>解析JSON数据</h2><p><code>Android SDK</code>给我们提供了非常好的<code>JSON</code>解析支持，我们不需要冲头去写一个解析器，直接拿过来用就好了。</p>
<ol>
<li><p>添加<code>JSON</code>假数据，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String FAKE_DATA= <span class="string">"&#123;\n"</span> +</div><div class="line">            <span class="string">"    \"error_code\": \"0\",\n"</span> +</div><div class="line">            <span class="string">"    \"data\": &#123;\n"</span> +</div><div class="line">            <span class="string">"        \"location\": \"成都\",\n"</span> +</div><div class="line">            <span class="string">"        \"temperature\": \"23°\",\n"</span> +</div><div class="line">            <span class="string">"        \"temperature_range\": \"18℃~23℃\",\n"</span> +</div><div class="line">            <span class="string">"        \"weather_code\": \"5\",\n"</span> +</div><div class="line">            <span class="string">"        \"wind_direction\": \"东南\",\n"</span> +</div><div class="line">            <span class="string">"        \"wind_level\": \"1级\",\n"</span> +</div><div class="line">            <span class="string">"        \"humidity_level\": \"30%\",\n"</span> +</div><div class="line">            <span class="string">"        \"air_quality\": \"良\",\n"</span> +</div><div class="line">            <span class="string">"        \"sport_level\": \"适宜\",\n"</span> +</div><div class="line">            <span class="string">"        \"ultraviolet_ray\": \"弱\",\n"</span> +</div><div class="line">            <span class="string">"        \"forcast\": [\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"明天\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"18℃~23℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"0\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;,\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"星期六\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"17℃~21℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"1\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;,\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"星期日\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"19℃~24℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"3\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;,\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"星期一\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"16℃~22℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"4\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;,\n"</span> +</div><div class="line">            <span class="string">"            &#123;\n"</span> +</div><div class="line">            <span class="string">"                \"date\": \"星期二\",\n"</span> +</div><div class="line">            <span class="string">"                \"temperature_range\": \"20℃~26℃\",\n"</span> +</div><div class="line">            <span class="string">"                \"weather_code\": \"2\"\n"</span> +</div><div class="line">            <span class="string">"            &#125;\n"</span> +</div><div class="line">            <span class="string">"        ]\n"</span> +</div><div class="line">            <span class="string">"    &#125;\n"</span> +</div><div class="line">            <span class="string">"&#125;"</span>;</div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>删除之前为<code>更多天气信息</code>而创建的假数据，同时在<code>onCreate()</code>中创建一个<code>JSON</code>解析器，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        JSONObject weatherResult = <span class="keyword">new</span> JSONObject(FAKE_DATA);</div><div class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>Android Studio</code>会提示你处理<code>try catch</code>异常。假如程序运行时解析<code>JSON</code>字符串遇到了问题，会通过异常报错，让我们做进一步的处理。</p>
</li>
<li><p>解析<code>error_code</code>，判断数据是否可用，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">         JSONObject weatherResult = <span class="keyword">new</span> JSONObject(FAKE_DATA);</div><div class="line">         <span class="keyword">int</span> errorCode = weatherResult.getInt(<span class="string">"error_code"</span>);</div><div class="line">         <span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">         </div><div class="line">         &#125;</div><div class="line">         <span class="keyword">else</span> &#123;</div><div class="line">         </div><div class="line">         &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里使用了<code>getInt(&quot;error_code&quot;)</code>来获取<code>error</code>字段对应的值，并且把这个值解析成数值<code>int</code>类型。</p>
</li>
</ol>
<h3 id="解析天气详情数据"><a href="#解析天气详情数据" class="headerlink" title="解析天气详情数据"></a>解析天气详情数据</h3><ol>
<li>通过<code>getJSONObject(&quot;data&quot;)</code> 获取<code>data</code>字段的数据结构；</li>
<li>通过<code>getString(xxx)</code>、<code>getInt(xxx)</code>获取<code>location</code> <code>temperature</code> <code>temperature_range</code> <code>weather_code</code>等字段的具体内容；</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">    String location = data.getString(<span class="string">"location"</span>);</div><div class="line">    String temperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">    String temperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">    <span class="keyword">int</span> weatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解析天气预报数据-1"><a href="#解析天气预报数据-1" class="headerlink" title="解析天气预报数据"></a>解析天气预报数据</h3><ol>
<li><p>通过<code>getJSONArray(&quot;forcast&quot;)</code>获取<code>forcast</code>字段下所有的天气预报子项，一共有5个子项；</p>
</li>
<li><p>通过<code>getString(xxx)</code>和<code>getInt(xxx)</code>，获取<code>date</code> <code>temperature_range</code> <code>weather_code</code>等字段的内容；</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">        JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">        String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">        String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">        <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解析更多天气数据"><a href="#解析更多天气数据" class="headerlink" title="解析更多天气数据"></a>解析更多天气数据</h3><p>通过<code>getString(xxx)</code>获取<code>wind_direction</code> <code>wind_level</code> <code>humidity_level</code> <code>air_quality</code> <code>sport_level</code> <code>ultraviolet_ray</code>等字段的具体内容；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">    ......</div><div class="line">    </div><div class="line">    String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">    String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">    String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">    String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">    String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">    String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>完整的代码如下，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   ......</div><div class="line">   </div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">        JSONObject weatherResult = <span class="keyword">new</span> JSONObject(FAKE_DATA);</div><div class="line">        <span class="keyword">int</span> errorCode = weatherResult.getInt(<span class="string">"error_code"</span>);</div><div class="line">        <span class="keyword">if</span>(errorCode == <span class="number">0</span>) &#123;</div><div class="line">            JSONObject data = weatherResult.getJSONObject(<span class="string">"data"</span>);</div><div class="line">            String location = data.getString(<span class="string">"location"</span>);</div><div class="line">            String temperature = data.getString(<span class="string">"temperature"</span>);</div><div class="line">            String temperatureRange = data.getString(<span class="string">"temperature_range"</span>);</div><div class="line">            <span class="keyword">int</span> weatherCode = data.getInt(<span class="string">"weather_code"</span>);</div><div class="line">            </div><div class="line">            JSONArray forcast = data.getJSONArray(<span class="string">"forcast"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forcast.length(); i++) &#123;</div><div class="line">                JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">                String date = forcastItem.getString(<span class="string">"date"</span>);</div><div class="line">                String forcastTemperatureRange = forcastItem.getString(<span class="string">"temperature_range"</span>);</div><div class="line">                <span class="keyword">int</span> forcastWeatherCode = forcastItem.getInt(<span class="string">"weather_code"</span>);</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            String windDirection = data.getString(<span class="string">"wind_direction"</span>);</div><div class="line">            String windLevel = data.getString(<span class="string">"wind_level"</span>);</div><div class="line">            String humidityLevel = data.getString(<span class="string">"humidity_level"</span>);</div><div class="line">            String airQuality = data.getString(<span class="string">"air_quality"</span>);</div><div class="line">            String sportLevel = data.getString(<span class="string">"sport_level"</span>);</div><div class="line">            String ultravioletRay = data.getString(<span class="string">"ultraviolet_ray"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">    </div><div class="line">        &#125;</div><div class="line">   &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h2><p>解析的数据需要更新到界面上。但是在解析的过程中，我们希望能尽早看到解析的结果是否正确。</p>
<p><code>Android Studio</code>为我们提供了两种调试代码、看到代码运行到中间状态的方法：<code>断点调试</code>和<code>Log调试</code>。</p>
<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>断点调试让程序在运行到某一个状态的时候，冻结应用运行的状态，仿佛时间停止了一般。然后让我们有时间逐一观察此时程序的各个参数是否符合我们的预期。</p>
<p>这种调试方法适用于对时间不敏感的程序。也就是说被调试的程序线程不需要依赖别的线程，即使暂时停止工作也不会影响别的工作线程或者受别的工作线程影响。</p>
<ol>
<li><p>在希望代码暂停运行的地方打断点——在代码前点击一下，出现一个红色的圆点，如果想取消，再点击一次即可。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_set_break_point.png" width="500" alt=" debug_set_break_point"></div></li>
<li><p>用<code>debug run</code>的方式(ctrl+D)部署程序。当程序运行到设置了端点的位置时，程序将停止下来，切换到<code>Debug</code>窗口。这时，我们就可以观察各个参数了。</p>
<p> 例如下图右半区域就列出了停止时，各个变量的值；左边区域展示了当时函数到调用栈（谁调用的这个函数）情况。我们可以逐一分析，详细观察，看这些值是否符合我们的预期。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_watch_break_point_values.png" width="500" alt=" debug_watch_break_point_values"></div></li>
<li><p>使用菜单栏中的<code>Run -&gt; Step Over</code>(或者快捷键F8)，能让程序往下执行一步。多按几次，就会依次往下执行几次。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_watch_break_point_values_more.png" width="600" alt=" debug_watch_break_point_values_more"></div>

<p> 这里可以看到我们解析的天气预报数据都没有问题。</p>
</li>
</ol>
<p>端点调试有很多的快捷按键，都是值得我们记住的，可以大大加快我们的开发效率。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_break_point_shortcut.png" width="250" alt=" debug_break_point_shortcut"></div>


<h3 id="Log调试"><a href="#Log调试" class="headerlink" title="Log调试"></a>Log调试</h3><p>对于那些和时间相关的程序（不能让程序暂停，等你慢慢观察），我们就不能使用静态的设置断点的调试方法了，得采用动态调试，添加log的方式。</p>
<p>Log的中文名字叫做日志，在编程界表示程序运行过程中打印出的信息。根据log我们就知道现在程序运行到什么地方了，log还可以携带程序中某些变量的信息输出，让我们更精准的知道程序当前运行的状态。</p>
<h4 id="代码中添加Log"><a href="#代码中添加Log" class="headerlink" title="代码中添加Log"></a>代码中添加Log</h4><p>在代码中添加一段函数，就能通过特别的工具输出这些log。我们在创建工程的时候就用过了，</p>
<p>在Android代码中添加log的方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Log.d(<span class="string">"TEST"</span>, <span class="string">"Weather app launched"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里面使用了Android提供的Log库，<code>Log.d</code>代表信息属于<code>Debug</code>类型。</p>
<p>我们给解析出的天气预报数据，都一一加上Log信息。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    Log.d("TEST","start to parse JSON content");</div><div class="line">    </div><div class="line">    JSONObject weatherResult = new JSONObject(FAKE_DATA);</div><div class="line">    int errorCode = weatherResult.getInt("error_code");</div><div class="line">    Log.d("TEST", "error_code = " + errorCode);</div><div class="line">    if(errorCode == 0) &#123;</div><div class="line">        JSONObject data = weatherResult.getJSONObject("data");</div><div class="line">        String location = data.getString("location");</div><div class="line">        String temperature = data.getString("temperature");</div><div class="line">        String temperatureRange = data.getString("temperature_range");</div><div class="line">        int weatherCode = data.getInt("weather_code");</div><div class="line">        </div><div class="line">        Log.d("TEST","weather detail info: "+</div><div class="line">            "location=" + location +</div><div class="line">            "temperature=" + temperature +</div><div class="line">            "temperatureRange=" + temperatureRange +</div><div class="line">            "weatherCode=" + weatherCode);</div><div class="line">        </div><div class="line">        JSONArray forcast = data.getJSONArray("forcast");</div><div class="line">        for(int i = 0; i &lt; forcast.length(); i++) &#123;</div><div class="line">            JSONObject forcastItem = forcast.getJSONObject(i);</div><div class="line">            String date = forcastItem.getString("date");</div><div class="line">            String forcastTemperatureRange = forcastItem.getString("temperature_range");</div><div class="line">            int forcastWeatherCode = forcastItem.getInt("weather_code");</div><div class="line">            </div><div class="line">            Log.d("TEST","weather forcast info: "+</div><div class="line">                    "date=" + date +</div><div class="line">                    "forcastTemperatureRange=" + forcastTemperatureRange +</div><div class="line">                    "forcastWeatherCode=" + forcastWeatherCode);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        String windDirection = data.getString("wind_direction");</div><div class="line">        String windLevel = data.getString("wind_level");</div><div class="line">        String humidityLevel = data.getString("humidity_level");</div><div class="line">        String airQuality = data.getString("air_quality");</div><div class="line">        String sportLevel = data.getString("sport_level");</div><div class="line">        String ultravioletRay = data.getString("ultraviolet_ray");</div><div class="line">        </div><div class="line">        Log.d("TEST","more weather info: "+</div><div class="line">            "windDirection=" + windDirection +</div><div class="line">            "windLevel=" + windLevel +</div><div class="line">            "humidityLevel=" + humidityLevel +</div><div class="line">            "airQuality=" + airQuality +</div><div class="line">            "sportLevel=" + sportLevel +</div><div class="line">            "ultravioletRay=" + ultravioletRay );</div><div class="line">        </div><div class="line">        Log.d("TEST","finish to parse JSON content");</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125; catch (JSONException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    Log.d("TEST","fail to parse JSON content");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Log的查看"><a href="#Log的查看" class="headerlink" title="Log的查看"></a>Log的查看</h4><p>添加了log信息后，将程序通过<code>debug app</code>部署到设备上，就能在<code>Android Monitor</code>工具的<code>logcat</code>窗口中看到对应的信息了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/debug_log_information.png" width="700" alt=" debug_log_information"></div>

<p>可以看出，我们对<code>JSON</code>的解析完全正确。</p>
<p>输出的调试信息，单条如下：</p>
<p><code>02-10 13:49:29.608 7948-7948/com.anddle.weatherapp D/TEST: error_code = 0</code></p>
<p>是不是可以猜出它所代表的含义呢？</p>
<p>Android应用开发的Log库提供了几种不同等级的log：<code>Verbose</code> <code>Debug</code> <code>Info</code> <code>Warning</code> <code>Error</code>，我们可以根据自己log的需要加不同等级的log，使用的形式为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Log.v(“TAG”,”content is verbose”);</div><div class="line">Log.d(“TAG”,”content is debug”);</div><div class="line">Log.i(“TAG”,”content is info”);</div><div class="line">Log.w(“TAG”,”content is waring”);</div><div class="line">Log.e(“TAG”,”content is error”);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解析天气预报数据&quot;&gt;&lt;a href=&quot;#解析天气预报数据&quot; class=&quot;headerlink&quot; title=&quot;解析天气预报数据&quot;&gt;&lt;/a&gt;解析天气预报数据&lt;/h1&gt;&lt;p&gt;界面布局完成以后，就需要设计代码来控制界面上各个元素的逻辑了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>9 天气更多信息的布局</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/9_%E5%A4%A9%E6%B0%94%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF%E7%9A%84%E5%B8%83%E5%B1%80/"/>
    <id>http://booktest.anddle.com/4_开发/9_天气更多信息的布局/</id>
    <published>2017-02-03T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天气更多信息的布局"><a href="#天气更多信息的布局" class="headerlink" title="天气更多信息的布局"></a>天气更多信息的布局</h1><p>天气相关信息是通过列表方式呈现的。<code>Android SDK</code>提供的<code>ListView</code>控件就能实现这样功能。</p>
<p><code>ListView</code>需要和<code>Adapter</code>配合使用，<code>ListView</code>负责内容的显示，<code>Adapter</code>负责为<code>ListView</code>提供要展示的数据。</p>
<p>要实现我们希望的展示效果，需要开发者自定义一个<code>Adapter</code>。那我们先把问题简化一下，看看<code>ListView</code>是怎么使用的。</p>
<h2 id="ListView的基本方法"><a href="#ListView的基本方法" class="headerlink" title="ListView的基本方法"></a>ListView的基本方法</h2><p>先在我们的工程项目中，使用<code>ListView</code>展示点简单的内容，大家熟悉熟悉使用<code>ListView</code>的套路，</p>
<ol>
<li><p>在<code>activity_main.xml</code>布局文件中，给<code>ListView</code>布局增加一个<code>id</code>叫做<code>weather_more_info_list</code>(在现有的代码中，我们之前已经增加过了)；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_list"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在<code>MainActivity.java</code>的源码文件里，在界面创建的时候（onCreate()当中），通过代码获取<code>ListView</code>；</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Log.d(<span class="string">"TEST"</span>, <span class="string">"Weather app launched"</span>);</div><div class="line"></div><div class="line">    ListView lv = (ListView) findViewById(R.id.weather_more_info_list);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>java</code>源码通过<code>R.id.weather_more_info_list</code>，将布局文件中的<code>ListView</code>找了出来，转换成了可以通过<code>java</code>代码操作的对象。</p>
</li>
<li><p>创建一个<code>Adapter</code>负责为<code>ListView</code>提供数据。Android SDK提供了很多类型的<code>Adapter</code>，<code>ArrayAdapter</code> <code>CursorAdapter</code> <code>SimpleAdapter</code>等等，它们都是<code>BaseAdapter</code>的子类，简化了<code>Adapter</code>的使用。</p>
<p> 要显示的数据和显示这项数据项的布局要设置给<code>Adapter</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="comment">//每一项要显示的数据是一个字符串，这里设置显示3项</span></div><div class="line">    String data[] = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</div><div class="line">    <span class="comment">//指定显示的数据内容，以及显示每项内容的布局文件</span></div><div class="line">    ArrayAdapter adapter ＝ <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1 , data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> Android SDK提供了一些常用的数据项布局方式<code>android.R.layout.simple_list_item_1</code> <code>android.R.layout.simple_list_item_2</code>等等。我们也可以自己设计每一项的布局方式。</p>
</li>
<li><p>将<code>Adapter</code>设置给<code>ListView</code>，数据将以列表的形式被展示，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    lv.setAdapter(adapter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>为显示的每个item添加，点击时代响应处理函数；</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    lv.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">            <span class="comment">//添加需要响应的操作</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>综合以上的代码，就是，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    ListView lv = (ListView) findViewById(R.id.list_view);</div><div class="line">    String data[] = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</div><div class="line">    ArrayAdapter adapter ＝ <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1 , data);</div><div class="line">    lv.setAdapter(adapter);</div><div class="line">    lv.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() &#123;</div><div class="line">            </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">            <span class="comment">//添加需要响应的操作</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后的界面效果就是这样，</p>
<p>运行以后，就能看到<code>a b c</code>以列表的形式，在界面上展现出来了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_list_view_demo.png" width="250" alt=" weather_app_list_view_demo"></div>

<p>如果需要展示的数据有变化，就需要更新<code>ListView</code>。</p>
<p><code>ListView</code>的更新需要在主线程进行（UI线程）。如果在其他线程更新，系统有可能报错，并提示你“不能在非UI线程更新界面元素”。</p>
<p>所以修改了<code>Adapter</code>中要展示的数据后，需要使用<code>Adapter</code>的<code>notifyDataSetChanged()</code>通知主线程自动刷新界面;</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要显示的数据用链表的形式保存；</span></div><div class="line">List data ＝ <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">data.add(<span class="string">"a"</span>);</div><div class="line">data.add(<span class="string">"b"</span>);</div><div class="line">data.add(<span class="string">"c"</span>);</div><div class="line"><span class="comment">//指定显示的数据内容，以及显示每项内容的布局文件</span></div><div class="line">ArrayAdapter adapter ＝ <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1 , data);</div><div class="line">    </div><div class="line">......</div><div class="line"><span class="comment">//修改显示的数据项</span></div><div class="line">data.add(<span class="string">"d"</span>);</div><div class="line"></div><div class="line"><span class="comment">//使用notifyDataSetChanged()通知主线程刷新界面</span></div><div class="line">ArrayAdapter.notifyDataSetChanged();</div></pre></td></tr></table></figure>
<h2 id="自定义Adapter"><a href="#自定义Adapter" class="headerlink" title="自定义Adapter"></a>自定义Adapter</h2><p>虽然<code>Android SDK</code>为我们提供了好几种现成的Adapter使用，但有时它们也并不能完全符合我们的要求，比如满足我们希望的天气信息项界面。</p>
<p>因此，我们准备自定义一个Adapter。</p>
<p><em>其实<code>SimpleAdapter</code>是可以满足要求的，但是为了下一阶段能容易的使用<code>Material Design</code>推荐的列表控件，我就先讲一讲如何自定义Adapter，降低后面的学习难度。</em></p>
<h3 id="定义数据项的布局"><a href="#定义数据项的布局" class="headerlink" title="定义数据项的布局"></a>定义数据项的布局</h3><p>为了让列表的数据项按照我们设计的模样显示，我们需要为它设计一个布局，把天气相关的更多信息展示上去。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weahter_more_info_item_layout.png" width="250" alt=" weahter_more_info_item_layout"></div>

<p>数据项的布局定义在<code>res\layout\weather_more_info_item_layout.xml</code>文件中（如何创建这种布局文件，前面已经介绍过了）。</p>
<p>数据项布局的方案如下，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weahter_more_info_item_layout_solution.png" width="400" alt=" weahter_more_info_item_layout_solution"></div>

<table>
<thead>
<tr>
<th>元素</th>
<th>控件</th>
<th>属性</th>
<th>id名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>图标</td>
<td>ImageView</td>
<td>左边距 16dp 内容居中</td>
<td>weather_more_info_icon</td>
</tr>
<tr>
<td>内容描述</td>
<td>TextView</td>
<td>左边距 72dp 内容垂直居中</td>
<td>weather_more_info_description</td>
</tr>
<tr>
<td>取值</td>
<td>TextView</td>
<td>有边距 16dp 内容垂直居中</td>
<td>weather_more_info_value</td>
</tr>
<tr>
<td>数据项的整体布局</td>
<td>FrameLayout</td>
<td>高度48dp</td>
<td>无</td>
</tr>
</tbody>
</table>
<ul>
<li><p>数据项是一个<code>FrameLayout</code>，放到这个布局中的所有元素就像千层饼一样，都是一层一层堆叠起来的；</p>
<p>  <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/framelayout_principle.png" width="300" alt=" framelayout_principle"></div><br>  高度是设计规范中定义的<code>48dp</code>，</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>图标使用<code>ImageView</code>控件，给它的<code>android:scaleType</code>属性设置<code>center</code>，让缩略图垂直居中放置，图片预设成<code>ic_air_quality</code>；左边距是<code>16dp</code>；</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_icon"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_air_quality"</span></div><div class="line">    <span class="attr">android:scaleType</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>内容描述使用<code>TextView</code>控件，它的左边距是<code>72dp</code>，垂直居中放置，字体的大小和颜色按照设计的规范来指定，</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_description"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"湿度"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"72dp"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">    <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></div><div class="line">    <span class="attr">android:textColor</span>= <span class="string">"#DE000000"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>取值使用<code>TextView</code>控件，它的右边距是<code>16dp</code>，垂直居中、整体靠右放置-<code>center_vertical|right</code>，字体的大小和颜色按照设计的规范来指定，</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_value"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"30%"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"16dp"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical|right"</span></div><div class="line">    <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">    <span class="attr">android:textColor</span>= <span class="string">"#8A000000"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>综合起来，如下面的布局源码，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_icon"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_air_quality"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_description"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"湿度"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"72dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></div><div class="line">        <span class="attr">android:textColor</span>= <span class="string">"#DE000000"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/weather_more_info_value"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"30%"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical|right"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">        <span class="attr">android:textColor</span>= <span class="string">"#8A000000"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最后效果图：</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weahter_more_info_item_layout_complete.png" width="300" alt=" weahter_more_info_item_layout_complete"></div>

<p><em>实现同一个布局效果的方案可以有很多种。有的方案在代码上很容易实现，有的方案可能还会考虑到布局刷新的效率。随着开发经验的增多，对各种布局实现原理的深入理解，大家会进一步的加深对布局的认识。</em></p>
<h3 id="定义数据项的数据结构"><a href="#定义数据项的数据结构" class="headerlink" title="定义数据项的数据结构"></a>定义数据项的数据结构</h3><p>为了提供显示的数据内容，要先定义一个存放数据的数据结构-<code>WeatherMoreInfo</code>。</p>
<p>首先要重新创建一个<code>java源文件</code>，定义数据结构的类，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_java_class_file.png" width="500" alt=" create_java_class_file"></div>

<p>给类命名<code>WeatherMoreInfo</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/create_java_class_file2.png" width="400" alt=" create_java_class_file2"></div>

<p>在<code>java</code>目录对应的包目录下，就生成了<code>WeatherMoreInfo.java</code>文件。</p>
<p>我们要在这个类里面存放3个数据：图标、名称、数值。</p>
<table>
<thead>
<tr>
<th>组件名称</th>
<th>存储类型</th>
<th>说明</th>
<th>字段名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>图标</td>
<td>int</td>
<td>存储图标对应的<code>资源id</code></td>
<td>typeResId</td>
</tr>
<tr>
<td>内容描述</td>
<td>String</td>
<td>数据项的名称，描述含义</td>
<td>description</td>
</tr>
<tr>
<td>数值</td>
<td>String</td>
<td>显示名称对应的数据取值</td>
<td>value</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> typeResId = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> description;</div><div class="line">    <span class="keyword">public</span> String value = <span class="string">""</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>数据结构的定义我们暂时就到这里，这个结构在后面还会做出调整，需要和网络端的数据进行配合。我们先到此处，只要能显示列表就可以了。</em></p>
<h3 id="定义Adapter"><a href="#定义Adapter" class="headerlink" title="定义Adapter"></a>定义Adapter</h3><p>现在开始自定义<code>Adapter</code>-<code>WeatherMoreInfoAdapter</code>。</p>
<p><code>Adapter</code>都是继承自<code>BaseAdapter</code>的，我们这里的<code>Adapter</code>准备继承自它的一个子类<code>ArrayAdapter</code>。因为<code>ArrayAdapter</code>在最原始的基础上作出了改进，我们再在它的基础上做一些小的调整就可以用了，而不用完全从头来过。</p>
<p>创建<code>WeatherMoreInfoAdapter.java</code>的新类。</p>
<ol>
<li><p>继承<code>ArrayAdapter</code>，将显示的数据类型指定成<code>WeatherMoreInfo</code>；重新构造函数，传入<code>Context</code>，数据项布局使用的布局ID，要显示的数据列表；重写它的<code>getView()</code>方法；</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherMoreInfoAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">WeatherMoreInfo</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfoAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resource, List&lt;WeatherMoreInfo&gt; objects)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, resource, objects);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在构造函数中，保存好布局ID以后使用，通过<code>Context</code>获取<code>Inflater</code>，为以后数据项布局的创建做准备，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> LayoutInflater mInflater;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mResource;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeatherMoreInfoAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resource, List&lt;WeatherMoreInfo&gt; objects)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, resource, objects);</div><div class="line">    mInflater = LayoutInflater.from(context);</div><div class="line">    mResource = resource;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>getView()</code>函数中，创建数据项的布局，并为他们赋值，最后将这个布局返回给<code>ListView</code>，让它显示，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">        convertView = mInflater.inflate(mResource, parent, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    WeatherMoreInfo item = getItem(position);</div><div class="line"></div><div class="line">    ImageView icon = (ImageView) convertView.findViewById(R.id.weather_more_info_icon);</div><div class="line">    icon.setImageResource(item.typeResId);</div><div class="line"></div><div class="line">    TextView description = (TextView) convertView.findViewById(R.id.weather_more_info_description);</div><div class="line">    description.setText(item.description);</div><div class="line"></div><div class="line">    TextView value = (TextView) convertView.findViewById(R.id.weather_more_info_value);</div><div class="line">    value.setText(item.value);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里的<code>convertView</code>就是数据项所代表的那个布局，当<code>ListView</code>刚创建，还没有产生任何数据项的时候，它就是为<code>null</code>的，此时我们就需要创建一个布局，并通过<code>getView()</code>将这个布局返回给<code>ListView</code>。</p>
<p> 假如<code>ListView</code>上的数据项布局已经足够了，那么这里传入的<code>convertView</code>就不会再是<code>null</code>，而是之前的某个数据项布局，我们就不必为此重新创建了，只需要更新上面的内容就好。这样提高了界面刷新的效率。</p>
<p> 当然，这里还能通过其他方法减少使用<code>findViewById()</code>，进一步提高效率，不过目前就不改进了，先把功能实现完成。</p>
</li>
</ol>
<p><code>Adapter</code>终于完成了。</p>
<h2 id="使用Adapter"><a href="#使用Adapter" class="headerlink" title="使用Adapter"></a>使用Adapter</h2><p>现在看看这个<code>Adapter</code>怎么用。</p>
<ol>
<li><p>在<code>MainActivity</code>创建之时，我们在<code>onCreate()</code>中创建并设置<code>WeatherMoreInfoAdapter</code>，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//保存ListView控件</span></div><div class="line">    <span class="keyword">private</span> ListView mWeatherMoreInfoListView;</div><div class="line">    <span class="comment">//保存更多信息到列表当中</span></div><div class="line">    <span class="keyword">private</span> List&lt;WeatherMoreInfo&gt; mWeatherMoreInfoList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        ......</div><div class="line"></div><div class="line">        mWeatherMoreInfoListView = (ListView) findViewById(R.id.weather_more_info_list);</div><div class="line">        <span class="comment">//创建保存数据的列表，数据暂时没有</span></div><div class="line">        mWeatherMoreInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//创建一个还没有添加入数据的Adapter</span></div><div class="line">        WeatherMoreInfoAdapter adapter = <span class="keyword">new</span> WeatherMoreInfoAdapter(MainActivity.<span class="keyword">this</span>, R.layout.weather_more_info_item_layout, mWeatherMoreInfoList);</div><div class="line">        mWeatherMoreInfoListView.setAdapter(adapter);       </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在创建<code>Adapter</code>的时候，把<code>weather_more_info_item_layout.xml</code>代表的布局传给了<code>Adapter</code>，<code>Adapter</code>将使用它来生成每个数据项的界面。</p>
</li>
<li><p>添加一些虚假的数据到<code>Adapter</code>中，并使用<code>notifyDataSetChanged()</code>刷新看看效果，</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    ......</div><div class="line"></div><div class="line">    WeatherMoreInfo data1 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data1.typeResId = R.mipmap.ic_wind_level;</div><div class="line">    data1.description = <span class="string">"风力"</span>;</div><div class="line">    data1.value = <span class="string">"3级"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data1);</div><div class="line"></div><div class="line">    WeatherMoreInfo data2 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data2.typeResId = R.mipmap.ic_wind_direction;</div><div class="line">    data2.description = <span class="string">"风向"</span>;</div><div class="line">    data2.value = <span class="string">"东南"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data2);</div><div class="line"></div><div class="line">    WeatherMoreInfo data3 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data3.typeResId = R.mipmap.ic_humidity_level;</div><div class="line">    data3.description = <span class="string">"湿度"</span>;</div><div class="line">    data3.value = <span class="string">"60%"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data3);</div><div class="line"></div><div class="line">    WeatherMoreInfo data4 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data4.typeResId = R.mipmap.ic_air_quality;</div><div class="line">    data4.description = <span class="string">"空气质量"</span>;</div><div class="line">    data4.value = <span class="string">"重污染"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data4);</div><div class="line"></div><div class="line">    WeatherMoreInfo data5 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data5.typeResId = R.mipmap.ic_sport_level;</div><div class="line">    data5.description = <span class="string">"运动"</span>;</div><div class="line">    data5.value = <span class="string">"不合适"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data5);</div><div class="line"></div><div class="line">    WeatherMoreInfo data6 = <span class="keyword">new</span> WeatherMoreInfo();</div><div class="line">    data6.typeResId = R.mipmap.ic_ultraviolet_level;</div><div class="line">    data6.description = <span class="string">"紫外线"</span>;</div><div class="line">    data6.value = <span class="string">"强"</span>;</div><div class="line">    mWeatherMoreInfoList.add(data6);</div><div class="line"></div><div class="line">    adapter.notifyDataSetChanged();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p> 至此，视频列表的界面就能看到视频列表了。</p>
 <div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_more_info_list_complete.png" width="250" alt=" weather_more_info_list_complete"></div>


</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;天气更多信息的布局&quot;&gt;&lt;a href=&quot;#天气更多信息的布局&quot; class=&quot;headerlink&quot; title=&quot;天气更多信息的布局&quot;&gt;&lt;/a&gt;天气更多信息的布局&lt;/h1&gt;&lt;p&gt;天气相关信息是通过列表方式呈现的。&lt;code&gt;Android SDK&lt;/code&gt;提
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>8 天气预报的布局</title>
    <link href="http://booktest.anddle.com/4_%E5%BC%80%E5%8F%91/8_%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%E7%9A%84%E5%B8%83%E5%B1%80/"/>
    <id>http://booktest.anddle.com/4_开发/8_天气预报的布局/</id>
    <published>2017-02-02T01:00:00.000Z</published>
    <updated>2017-03-28T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天气预报的布局"><a href="#天气预报的布局" class="headerlink" title="天气预报的布局"></a>天气预报的布局</h1><p>现在我们开始进行<code>天气预报</code>区域的布局。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_complete.png" width="300" alt=" weather_app_forcast_complete"></div>

<p>可以看出，这个区域，由5个完全一样的<code>组件</code>组合而成。只要我们完成一个组件-<code>天气预报项</code>的布局，再把这个布局<code>复制粘贴</code>，很容易就完成了。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_item.png" width="70" alt=" weather_app_forcast_item"></div>

<h2 id="天气预报项"><a href="#天气预报项" class="headerlink" title="天气预报项"></a>天气预报项</h2><p>在<code>layout</code>目录上点击右键，选择<code>New -&gt; Layout resource file</code>。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_create_forcast_item.png" width="600" alt=" weather_app_create_forcast_item"></div>

<p>输入布局文件的名字<code>forcast_item</code>，</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_create_forcast_item_name.png" width="200" alt=" weather_app_create_forcast_item_name"></div>

<p>一个新的布局文件<code>forcast_item.xml</code>就被创建到了<code>res\layout</code>目录下了。</p>
<p><code>天气预报项</code>的整体布局分成上中下3段，依次纵向排列，分别显示文字、图片、文字。</p>
<table>
<thead>
<tr>
<th style="text-align:center">区域名称</th>
<th style="text-align:center">区域高度</th>
<th style="text-align:center">选用控件或布局</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">日期</td>
<td style="text-align:center">占用剩余空间的上半部分</td>
<td style="text-align:center">TextView</td>
</tr>
<tr>
<td style="text-align:center">天气</td>
<td style="text-align:center">根据资源图片的高度确定</td>
<td style="text-align:center">ImageView</td>
</tr>
<tr>
<td style="text-align:center">温度范围</td>
<td style="text-align:center">占用剩余空间的下半部分</td>
<td style="text-align:center">TextView</td>
</tr>
</tbody>
</table>
<p>修改<code>forcast_item.xml</code>布局文件：</p>
<ol>
<li>给<code>LinearLayout</code>设置<code>android:orientation=&quot;vertical&quot;</code>属性；</li>
<li>让<code>LinearLayout</code>内部的组件，水平居中<code>android:gravity=&quot;center_horizontal&quot;</code>；</li>
<li>从上到下，依次放入<code>TextView</code> <code>ImageView</code> <code>TextView</code>；它们的布局属性如此设置：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">日期</th>
<th style="text-align:center">天气</th>
<th style="text-align:center">温度范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout_height</td>
<td style="text-align:center">0dp</td>
<td style="text-align:center">wrap_content</td>
<td style="text-align:center">0dp</td>
</tr>
<tr>
<td style="text-align:center">layout_width</td>
<td style="text-align:center">wrap_content</td>
<td style="text-align:center">wrap_content</td>
<td style="text-align:center">wrap_content</td>
</tr>
<tr>
<td style="text-align:center">layout_weight</td>
<td style="text-align:center">1</td>
<td style="text-align:center">无</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">id名称</td>
<td style="text-align:center">forcast_date</td>
<td style="text-align:center">forcast_icon</td>
<td style="text-align:center">forcast_temperature</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/forcast_date"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/forcast_icon"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/forcast_temperature"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里使用到了<code>LinearLayout</code>给内部组件使用到属性<code>layout_weight</code>。</p>
<p><code>layout_weight</code>表示一个组件的重要性，拥有这个属性的组件将根据它的数值，按照比例分得剩余空间。</p>
<p>就这里来讲，<code>日期</code>与<code>温度范围</code>都具有<code>1</code>的权重，因此它们将按照<code>1:1</code>的比例，瓜分除去<code>天气</code>占据的高度后，剩下的空间高度。</p>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_item_layout_weight.png" width="350" alt=" weather_app_forcast_item_layout_weight"></div>

<p>为<code>日期</code>预设上显示的内容：</p>
<ol>
<li>设置<code>TextView</code>显示的文字内容，<code>android:text=&quot;明天&quot;</code>；</li>
<li>设置<code>TextView</code>文字的大小，<code>android:textSize=&quot;14sp&quot;</code>；</li>
<li>设置<code>TextView</code>文字的颜色，<code>android:textColor=&quot;#de000000&quot;</code>；</li>
<li>让文字显示居中，<code>android:gravity=&quot;center&quot;</code>;</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/forcast_date"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">   <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">   <span class="attr">android:text</span>=<span class="string">"明天"</span></div><div class="line">   <span class="attr">android:textColor</span>=<span class="string">"#DE000000"</span></div><div class="line">   <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></div><div class="line">   <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</div></pre></td></tr></table></figure>
<p>为<code>天气</code>预设上显示的图片：</p>
<ol>
<li>设置<code>android:src=&quot;@mipmap/ic_sunny_cloudy_s&quot;</code>，加上图标；</li>
<li>设置<code>android:scaleType=&quot;center&quot;</code>，将图标正好占满控件的区域；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/forcast_icon"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_sunny_cloudy_s"</span></div><div class="line">   <span class="attr">android:scaleType</span>=<span class="string">"center"</span>/&gt;</div></pre></td></tr></table></figure>
<p>为<code>温度范围</code>预设上显示的内容：</p>
<ol>
<li>设置<code>TextView</code>显示的文字内容，<code>android:text=&quot;17℃～25℃&quot;</code>；</li>
<li>设置<code>TextView</code>文字的大小，<code>android:textSize=&quot;12sp&quot;</code>；</li>
<li>设置<code>TextView</code>文字的颜色，<code>android:textColor=&quot;#8a000000&quot;</code>；</li>
<li>让文字显示居中，<code>android:gravity=&quot;center&quot;</code>;</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">   <span class="attr">android:id</span>=<span class="string">"@+id/forcast_temperature"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">   <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">   <span class="attr">android:text</span>=<span class="string">"17℃～25℃"</span></div><div class="line">   <span class="attr">android:textColor</span>=<span class="string">"#8a000000"</span></div><div class="line">   <span class="attr">android:textSize</span>=<span class="string">"12sp"</span></div><div class="line">   <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</div></pre></td></tr></table></figure>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_item_layout.png" width="200" alt=" weather_app_forcast_item_layout"></div>

<h2 id="使用include标签"><a href="#使用include标签" class="headerlink" title="使用include标签"></a>使用include标签</h2><p>接下来就可以给<code>天气预报</code>区域所在的<code>LinearLayout</code>，</p>
<ol>
<li><p>设置上水平显示的属性<code>android:orientation=&quot;horizontal&quot;</code>；</p>
</li>
<li><p>再把<code>天气预报项</code>的布局方式重复5次，放入其中。这就完成了这个区域的布局了；</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">   <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">        <span class="attr">......</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>哈哈，这样的做法真是简单又暴力。</p>
<p>不过，对于这种需要重复使用到的布局，<code>Android SDK</code>提供了一个非常方便的标签<code>include</code>。使用它就可以把一个布局重复的布局文件引入到另一个布局文件当中。</p>
<ol>
<li>在<code>LinearLayout</code>当中使用多个<code>include</code>标签；</li>
<li><p>给它们的<code>layout</code>属性设置上要重复使用的布局文件<code>forcast_item</code>；并给每个标签设置一个<code>id</code>。</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">   <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item3"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item4"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/forcast_item"</span> <span class="attr">android:id</span>=<span class="string">"@+id/forcast_item5"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>这时还看不到期待的效果，原因是<code>forcast_item</code>当中的<code>LinearLayout</code>设置的宽度是<code>match_parent</code>-占据整个屏幕。我们需要让这些<code>天气预报项</code>平均占据屏幕的宽度，所以需要给<code>forcast_item.xml</code>中的<code>LinearLayout</code>设置上<code>android:layout_weight=&quot;1&quot;</code>的属性，</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</div><div class="line"></div><div class="line">    ......</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>给<code>天气预报</code>区域的左右两边，加上<code>16dp</code>的边距；</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"16dp"</span>&gt;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<div align="center"><img src="http://7xrwhw.com1.z0.glb.clouddn.com/weather_app_forcast_complete-1.png" width="500" alt=" weather_app_forcast_complete"></div>

<p>从这个例子可以看出，<code>include</code>的作用就是把它自己<code>layout</code>属性指定的布局替换到<code>include</code>的位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;天气预报的布局&quot;&gt;&lt;a href=&quot;#天气预报的布局&quot; class=&quot;headerlink&quot; title=&quot;天气预报的布局&quot;&gt;&lt;/a&gt;天气预报的布局&lt;/h1&gt;&lt;p&gt;现在我们开始进行&lt;code&gt;天气预报&lt;/code&gt;区域的布局。&lt;/p&gt;
&lt;div align=&quot;ce
    
    </summary>
    
      <category term="第4章-开发" scheme="http://booktest.anddle.com/categories/%E7%AC%AC4%E7%AB%A0-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>
